{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 4, "column": 0}, "map": {"version":3,"sources":["turbopack://[project]/node_modules/svix/src/timing_safe_equal.ts"],"sourcesContent":["// Copyright 2018-2022 the Deno authors. All rights reserved. MIT license.\n// https://github.com/denoland/deno_std/blob/main/crypto/timing_safe_equal.ts\n\n/** Make an assertion, if not `true`, then throw. */\nfunction assert(expr: unknown, msg = \"\"): asserts expr {\n  if (!expr) {\n    throw new Error(msg);\n  }\n}\n\n/** Compare to array buffers or data views in a way that timing based attacks\n * cannot gain information about the platform. */\nexport function timingSafeEqual(\n  a: ArrayBufferView | ArrayBufferLike | DataView,\n  b: ArrayBufferView | ArrayBufferLike | DataView\n): boolean {\n  if (a.byteLength !== b.byteLength) {\n    return false;\n  }\n  if (!(a instanceof DataView)) {\n    a = new DataView(ArrayBuffer.isView(a) ? a.buffer : a);\n  }\n  if (!(b instanceof DataView)) {\n    b = new DataView(ArrayBuffer.isView(b) ? b.buffer : b);\n  }\n  assert(a instanceof DataView);\n  assert(b instanceof DataView);\n  const length = a.byteLength;\n  let out = 0;\n  let i = -1;\n  while (++i < length) {\n    out |= a.getUint8(i) ^ b.getUint8(i);\n  }\n  return out === 0;\n}\n"],"names":[],"mappings":";;;;;AAIA,SAAS,OAAO,IAAa,EAAE,MAAM,EAAE;IACrC,IAAI,CAAC,MAAM;QACT,MAAM,IAAI,MAAM;;AAEpB;AAIA,SAAgB,gBACd,CAA+C,EAC/C,CAA+C;IAE/C,IAAI,EAAE,UAAU,KAAK,EAAE,UAAU,EAAE;QACjC,OAAO;;IAET,IAAI,CAAC,CAAC,aAAa,QAAQ,GAAG;QAC5B,IAAI,IAAI,SAAS,YAAY,MAAM,CAAC,KAAK,EAAE,MAAM,GAAG;;IAEtD,IAAI,CAAC,CAAC,aAAa,QAAQ,GAAG;QAC5B,IAAI,IAAI,SAAS,YAAY,MAAM,CAAC,KAAK,EAAE,MAAM,GAAG;;IAEtD,OAAO,aAAa;IACpB,OAAO,aAAa;IACpB,MAAM,SAAS,EAAE,UAAU;IAC3B,IAAI,MAAM;IACV,IAAI,IAAI,CAAC;IACT,MAAO,EAAE,IAAI,OAAQ;QACnB,OAAO,EAAE,QAAQ,CAAC,KAAK,EAAE,QAAQ,CAAC;;IAEpC,OAAO,QAAQ;AACjB;AAtBA,QAAA,eAAA,GAAA"}},
    {"offset": {"line": 35, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 39, "column": 0}, "map": {"version":3,"sources":["turbopack://[project]/node_modules/svix/src/index.ts"],"sourcesContent":["import {\n  ServerConfiguration,\n  HttpBearerConfiguration,\n  Configuration,\n  createConfiguration,\n  ApplicationApi,\n  ApplicationOut,\n  ListResponseApplicationOut,\n  ApplicationIn,\n  EndpointApi,\n  ListResponseEndpointOut,\n  EndpointOut,\n  EndpointIn,\n  EndpointUpdate,\n  EndpointSecretOut,\n  EndpointSecretRotateIn,\n  EndpointTransformationIn,\n  EndpointTransformationOut,\n  EndpointHeadersIn,\n  EndpointHeadersPatchIn,\n  EndpointHeadersOut,\n  EndpointStats,\n  EventExampleIn,\n  RecoverIn,\n  ReplayIn,\n  IntegrationApi,\n  ListResponseIntegrationOut,\n  IntegrationOut,\n  IntegrationIn,\n  IntegrationUpdate,\n  IntegrationKeyOut,\n  MessageApi,\n  MessageOut,\n  MessageIn,\n  ListResponseMessageOut,\n  AuthenticationApi,\n  DashboardAccessOut,\n  MessageAttemptApi,\n  ListResponseEndpointMessageOut,\n  ListResponseMessageEndpointOut,\n  ListResponseMessageAttemptEndpointOut,\n  ListResponseMessageAttemptOut,\n  MessageAttemptOut,\n  MessageStatus,\n  EventTypeApi,\n  ListResponseEventTypeOut,\n  EventTypeIn,\n  EventTypeOut,\n  EventTypeUpdate,\n  StatusCodeClass,\n  Middleware,\n  RequestContext,\n  ResponseContext,\n  AppPortalAccessOut,\n  AppPortalAccessIn,\n  Ordering,\n  BackgroundTaskStatus,\n  BackgroundTaskType,\n  BackgroundTaskOut,\n  ListResponseBackgroundTaskOut,\n  BackgroundTasksApi,\n  ApplicationPatch,\n  EndpointPatch,\n  EventTypePatch,\n  EventTypeImportOpenApiIn,\n  EventTypeImportOpenApiOut,\n  StatisticsApi,\n  AppUsageStatsIn,\n  AppUsageStatsOut,\n  AggregateEventTypesOut,\n  EndpointOauthConfigIn,\n} from \"./openapi/index\";\nexport * from \"./openapi/models/all\";\nexport * from \"./openapi/apis/exception\";\nimport { timingSafeEqual } from \"./timing_safe_equal\";\nimport * as base64 from \"@stablelib/base64\";\nimport * as sha256 from \"fast-sha256\";\n\nconst WEBHOOK_TOLERANCE_IN_SECONDS = 5 * 60; // 5 minutes\nconst VERSION = \"1.37.0\";\n\nclass UserAgentMiddleware implements Middleware {\n  public pre(context: RequestContext): Promise<RequestContext> {\n    context.setHeaderParam(\"User-Agent\", `svix-libs/${VERSION}/javascript`);\n    return Promise.resolve(context);\n  }\n\n  public post(context: ResponseContext): Promise<ResponseContext> {\n    return Promise.resolve(context);\n  }\n}\n\nexport interface SvixOptions {\n  debug?: boolean;\n  serverUrl?: string;\n}\n\nconst REGIONS = [\n  { region: \"us\", url: \"https://api.us.svix.com\" },\n  { region: \"eu\", url: \"https://api.eu.svix.com\" },\n  { region: \"in\", url: \"https://api.in.svix.com\" },\n];\n\nexport class Svix {\n  public readonly _configuration: Configuration;\n  public readonly authentication: Authentication;\n  public readonly application: Application;\n  public readonly endpoint: Endpoint;\n  public readonly eventType: EventType;\n  public readonly integration: Integration;\n  public readonly message: Message;\n  public readonly messageAttempt: MessageAttempt;\n  public readonly backgroundTask: BackgroundTask;\n  public readonly statistics: Statistics;\n\n  public constructor(token: string, options: SvixOptions = {}) {\n    const regionalUrl = REGIONS.find((x) => x.region === token.split(\".\")[1])?.url;\n    const baseUrl: string = options.serverUrl ?? regionalUrl ?? \"https://api.svix.com\";\n\n    const baseServer = new ServerConfiguration<any>(baseUrl, {});\n\n    const bearerConfiguration: HttpBearerConfiguration = {\n      tokenProvider: {\n        getToken: () => token,\n      },\n    };\n    const config = createConfiguration({\n      baseServer,\n      promiseMiddleware: [new UserAgentMiddleware()],\n      authMethods: {\n        HTTPBearer: bearerConfiguration,\n      },\n    });\n\n    this._configuration = config;\n    this.authentication = new Authentication(config);\n    this.application = new Application(config);\n    this.endpoint = new Endpoint(config);\n    this.eventType = new EventType(config);\n    this.integration = new Integration(config);\n    this.message = new Message(config);\n    this.messageAttempt = new MessageAttempt(config);\n    this.backgroundTask = new BackgroundTask(config);\n    this.statistics = new Statistics(config);\n  }\n}\nexport interface PostOptions {\n  idempotencyKey?: string;\n}\nclass Authentication {\n  private readonly api: AuthenticationApi;\n\n  public constructor(config: Configuration) {\n    this.api = new AuthenticationApi(config);\n  }\n\n  public appPortalAccess(\n    appId: string,\n    appPortalAccessIn: AppPortalAccessIn,\n    options?: PostOptions\n  ): Promise<AppPortalAccessOut> {\n    return this.api.v1AuthenticationAppPortalAccess({\n      appId,\n      appPortalAccessIn,\n      ...options,\n    });\n  }\n\n  public dashboardAccess(\n    appId: string,\n    options?: PostOptions\n  ): Promise<DashboardAccessOut> {\n    return this.api.v1AuthenticationDashboardAccess({\n      appId,\n      ...options,\n    });\n  }\n\n  public logout(options?: PostOptions): Promise<void> {\n    return this.api.v1AuthenticationLogout({ ...options });\n  }\n}\n\ninterface ListOptions {\n  iterator?: string;\n  limit?: number;\n}\n\nexport interface ApplicationListOptions extends ListOptions {\n  order?: Ordering;\n}\n\nexport interface EndpointListOptions extends ListOptions {\n  order?: Ordering;\n}\n\nexport interface EndpointStatsOptions {\n  since?: Date;\n  until?: Date;\n}\n\nexport type IntegrationListOptions = ListOptions;\n\nexport interface EventTypeListOptions extends ListOptions {\n  withContent?: boolean;\n  includeArchived?: boolean;\n}\n\nexport interface MessageListOptions extends ListOptions {\n  eventTypes?: string[];\n  before?: Date;\n  after?: Date;\n  channel?: string;\n  withContent?: boolean;\n  tag?: string;\n}\n\nexport interface MessageAttemptListOptions extends ListOptions {\n  status?: MessageStatus;\n  eventTypes?: string[];\n  before?: Date;\n  after?: Date;\n  statusCodeClass?: StatusCodeClass;\n  channel?: string;\n  withContent?: boolean;\n}\n\nexport interface MessageAttemptListByEndpointOptions extends MessageAttemptListOptions {\n  withMsg?: boolean;\n}\n\nexport interface BackgroundTaskListOptions extends ListOptions {\n  status?: BackgroundTaskStatus;\n  task?: BackgroundTaskType;\n}\n\nclass Application {\n  private readonly api: ApplicationApi;\n\n  public constructor(config: Configuration) {\n    this.api = new ApplicationApi(config);\n  }\n\n  public list(options?: ApplicationListOptions): Promise<ListResponseApplicationOut> {\n    return this.api.v1ApplicationList({ ...options });\n  }\n\n  public create(\n    applicationIn: ApplicationIn,\n    options?: PostOptions\n  ): Promise<ApplicationOut> {\n    return this.api.v1ApplicationCreate({ applicationIn, ...options });\n  }\n\n  public getOrCreate(\n    applicationIn: ApplicationIn,\n    options?: PostOptions\n  ): Promise<ApplicationOut> {\n    return this.api.v1ApplicationCreate({\n      applicationIn,\n      ...options,\n      getIfExists: true,\n    });\n  }\n\n  public get(appId: string): Promise<ApplicationOut> {\n    return this.api.v1ApplicationGet({ appId });\n  }\n\n  public update(appId: string, applicationIn: ApplicationIn): Promise<ApplicationOut> {\n    return this.api.v1ApplicationUpdate({ appId, applicationIn });\n  }\n\n  public patch(\n    appId: string,\n    applicationPatch: ApplicationPatch\n  ): Promise<ApplicationOut> {\n    return this.api.v1ApplicationPatch({ appId, applicationPatch });\n  }\n\n  public delete(appId: string): Promise<void> {\n    return this.api.v1ApplicationDelete({ appId });\n  }\n}\n\nclass Endpoint {\n  private readonly api: EndpointApi;\n\n  public constructor(config: Configuration) {\n    this.api = new EndpointApi(config);\n  }\n\n  public list(\n    appId: string,\n    options?: EndpointListOptions\n  ): Promise<ListResponseEndpointOut> {\n    return this.api.v1EndpointList({ appId, ...options });\n  }\n\n  public create(\n    appId: string,\n    endpointIn: EndpointIn,\n    options?: PostOptions\n  ): Promise<EndpointOut> {\n    return this.api.v1EndpointCreate({\n      appId,\n      endpointIn,\n      ...options,\n    });\n  }\n\n  public get(appId: string, endpointId: string): Promise<EndpointOut> {\n    return this.api.v1EndpointGet({ endpointId, appId });\n  }\n\n  public update(\n    appId: string,\n    endpointId: string,\n    endpointUpdate: EndpointUpdate\n  ): Promise<EndpointOut> {\n    return this.api.v1EndpointUpdate({\n      appId,\n      endpointId,\n      endpointUpdate,\n    });\n  }\n\n  public patch(\n    appId: string,\n    endpointId: string,\n    endpointPatch: EndpointPatch\n  ): Promise<EndpointOut> {\n    return this.api.v1EndpointPatch({\n      appId,\n      endpointId,\n      endpointPatch,\n    });\n  }\n\n  public delete(appId: string, endpointId: string): Promise<void> {\n    return this.api.v1EndpointDelete({\n      endpointId,\n      appId,\n    });\n  }\n\n  public getSecret(appId: string, endpointId: string): Promise<EndpointSecretOut> {\n    return this.api.v1EndpointGetSecret({\n      endpointId,\n      appId,\n    });\n  }\n\n  public rotateSecret(\n    appId: string,\n    endpointId: string,\n    endpointSecretRotateIn: EndpointSecretRotateIn,\n    options?: PostOptions\n  ): Promise<void> {\n    return this.api.v1EndpointRotateSecret({\n      endpointId,\n      appId,\n      endpointSecretRotateIn,\n      ...options,\n    });\n  }\n\n  public recover(\n    appId: string,\n    endpointId: string,\n    recoverIn: RecoverIn,\n    options?: PostOptions\n  ): Promise<void> {\n    return this.api\n      .v1EndpointRecover({\n        appId,\n        endpointId,\n        recoverIn,\n        ...options,\n      })\n      .then(() => Promise.resolve());\n  }\n\n  public replayMissing(\n    appId: string,\n    endpointId: string,\n    replayIn: ReplayIn,\n    options?: PostOptions\n  ): Promise<void> {\n    return this.api\n      .v1EndpointReplay({\n        appId,\n        endpointId,\n        replayIn,\n        ...options,\n      })\n      .then(() => Promise.resolve());\n  }\n\n  public getHeaders(appId: string, endpointId: string): Promise<EndpointHeadersOut> {\n    return this.api.v1EndpointGetHeaders({\n      appId,\n      endpointId,\n    });\n  }\n\n  /**\n   * @deprecated Since version 1.30.0. Use `headersUpdate` instead.\n   */\n  public updateHeaders(\n    appId: string,\n    endpointId: string,\n    endpointHeadersIn: EndpointHeadersIn\n  ): Promise<void> {\n    return this.api.v1EndpointUpdateHeaders({\n      appId,\n      endpointId,\n      endpointHeadersIn,\n    });\n  }\n\n  public headersUpdate(\n    appId: string,\n    endpointId: string,\n    endpointHeadersIn: EndpointHeadersIn\n  ): Promise<void> {\n    return this.api.v1EndpointUpdateHeaders({\n      appId,\n      endpointId,\n      endpointHeadersIn,\n    });\n  }\n\n  /**\n   * @deprecated Since version 1.30.0. Use `headersPatch` instead.\n   */\n  public patchHeaders(\n    appId: string,\n    endpointId: string,\n    endpointHeadersPatchIn: EndpointHeadersPatchIn\n  ): Promise<void> {\n    return this.api.v1EndpointPatchHeaders({\n      appId,\n      endpointId,\n      endpointHeadersPatchIn,\n    });\n  }\n\n  public headersPatch(\n    appId: string,\n    endpointId: string,\n    endpointHeadersPatchIn: EndpointHeadersPatchIn\n  ): Promise<void> {\n    return this.api.v1EndpointPatchHeaders({\n      appId,\n      endpointId,\n      endpointHeadersPatchIn,\n    });\n  }\n\n  public getStats(\n    appId: string,\n    endpointId: string,\n    options?: EndpointStatsOptions\n  ): Promise<EndpointStats> {\n    return this.api.v1EndpointGetStats({\n      appId,\n      endpointId,\n      ...options,\n    });\n  }\n\n  public transformationGet(\n    appId: string,\n    endpointId: string\n  ): Promise<EndpointTransformationOut> {\n    return this.api.v1EndpointTransformationGet({ endpointId, appId });\n  }\n\n  public transformationPartialUpdate(\n    appId: string,\n    endpointId: string,\n    endpointTransformationIn: EndpointTransformationIn\n  ): Promise<void> {\n    return this.api.v1EndpointTransformationPartialUpdate({\n      appId,\n      endpointId,\n      endpointTransformationIn,\n    });\n  }\n\n  public sendExample(\n    appId: string,\n    endpointId: string,\n    eventExampleIn: EventExampleIn,\n    options?: PostOptions\n  ): Promise<MessageOut> {\n    return this.api.v1EndpointSendExample({\n      appId,\n      endpointId,\n      eventExampleIn,\n      ...options,\n    });\n  }\n\n  public oauthUpdate(\n    appId: string,\n    endpointId: string,\n    endpointOauthConfigIn: EndpointOauthConfigIn\n  ): Promise<void> {\n    return this.api.v1EndpointUpdateOauthConfig({\n      appId,\n      endpointId,\n      endpointOauthConfigIn,\n    });\n  }\n\n  public oauthDelete(appId: string, endpointId: string): Promise<void> {\n    return this.api.v1EndpointDeleteOauthConfig({\n      appId,\n      endpointId,\n    });\n  }\n}\n\nclass EventType {\n  private readonly api: EventTypeApi;\n\n  public constructor(config: Configuration) {\n    this.api = new EventTypeApi(config);\n  }\n\n  public list(options?: EventTypeListOptions): Promise<ListResponseEventTypeOut> {\n    return this.api.v1EventTypeList({ ...options });\n  }\n\n  public get(eventTypeName: string): Promise<EventTypeOut> {\n    return this.api.v1EventTypeGet({ eventTypeName });\n  }\n\n  public create(eventTypeIn: EventTypeIn, options?: PostOptions): Promise<EventTypeOut> {\n    return this.api.v1EventTypeCreate({ eventTypeIn, ...options });\n  }\n\n  public update(\n    eventTypeName: string,\n    eventTypeUpdate: EventTypeUpdate\n  ): Promise<EventTypeOut> {\n    return this.api.v1EventTypeUpdate({\n      eventTypeName,\n      eventTypeUpdate,\n    });\n  }\n\n  public patch(\n    eventTypeName: string,\n    eventTypePatch: EventTypePatch\n  ): Promise<EventTypeOut> {\n    return this.api.v1EventTypePatch({\n      eventTypeName,\n      eventTypePatch,\n    });\n  }\n\n  public delete(eventTypeName: string): Promise<void> {\n    return this.api.v1EventTypeDelete({ eventTypeName });\n  }\n\n  public importOpenApi(\n    eventTypeImportOpenApiIn: EventTypeImportOpenApiIn,\n    options?: PostOptions\n  ): Promise<EventTypeImportOpenApiOut> {\n    return this.api.v1EventTypeImportOpenapi({ eventTypeImportOpenApiIn, ...options });\n  }\n}\n\nclass Integration {\n  private readonly api: IntegrationApi;\n\n  public constructor(config: Configuration) {\n    this.api = new IntegrationApi(config);\n  }\n\n  public list(\n    appId: string,\n    options?: IntegrationListOptions\n  ): Promise<ListResponseIntegrationOut> {\n    return this.api.v1IntegrationList({ appId, ...options });\n  }\n\n  public create(\n    appId: string,\n    integrationIn: IntegrationIn,\n    options?: PostOptions\n  ): Promise<IntegrationOut> {\n    return this.api.v1IntegrationCreate({\n      appId,\n      integrationIn,\n      ...options,\n    });\n  }\n\n  public get(appId: string, integId: string): Promise<IntegrationOut> {\n    return this.api.v1IntegrationGet({ integId, appId });\n  }\n\n  public update(\n    appId: string,\n    integId: string,\n    integrationUpdate: IntegrationUpdate\n  ): Promise<IntegrationOut> {\n    return this.api.v1IntegrationUpdate({\n      appId,\n      integId,\n      integrationUpdate,\n    });\n  }\n\n  public delete(appId: string, integId: string): Promise<void> {\n    return this.api.v1IntegrationDelete({\n      integId,\n      appId,\n    });\n  }\n\n  public getKey(appId: string, integId: string): Promise<IntegrationKeyOut> {\n    return this.api.v1IntegrationGetKey({\n      integId,\n      appId,\n    });\n  }\n\n  public rotateKey(\n    appId: string,\n    integId: string,\n    options?: PostOptions\n  ): Promise<IntegrationKeyOut> {\n    return this.api.v1IntegrationRotateKey({\n      integId,\n      appId,\n      ...options,\n    });\n  }\n}\n\nclass Message {\n  private readonly api: MessageApi;\n\n  public constructor(config: Configuration) {\n    this.api = new MessageApi(config);\n  }\n\n  public list(\n    appId: string,\n    options?: MessageListOptions\n  ): Promise<ListResponseMessageOut> {\n    return this.api.v1MessageList({ appId, ...options });\n  }\n\n  public create(\n    appId: string,\n    messageIn: MessageIn,\n    options?: PostOptions\n  ): Promise<MessageOut> {\n    return this.api.v1MessageCreate({ appId, messageIn, ...options });\n  }\n\n  public get(appId: string, msgId: string): Promise<MessageOut> {\n    return this.api.v1MessageGet({ msgId, appId });\n  }\n\n  public expungeContent(appId: string, msgId: string): Promise<void> {\n    return this.api.v1MessageExpungeContent({ appId, msgId });\n  }\n}\n\nclass MessageAttempt {\n  private readonly api: MessageAttemptApi;\n\n  public constructor(config: Configuration) {\n    this.api = new MessageAttemptApi(config);\n  }\n\n  /**\n   * @deprecated Since version 0.48.0. Use listByMsg or listByEndpoint instead.\n   */\n  public list(\n    appId: string,\n    msgId: string,\n    options?: MessageAttemptListOptions\n  ): Promise<ListResponseMessageAttemptOut> {\n    return this.listByMsg(appId, msgId, options);\n  }\n\n  public listByMsg(\n    appId: string,\n    msgId: string,\n    options?: MessageAttemptListOptions\n  ): Promise<ListResponseMessageAttemptOut> {\n    return this.api.v1MessageAttemptListByMsg({\n      appId,\n      msgId,\n      ...options,\n    });\n  }\n\n  public listByEndpoint(\n    appId: string,\n    endpointId: string,\n    options?: MessageAttemptListByEndpointOptions\n  ): Promise<ListResponseMessageAttemptOut> {\n    return this.api.v1MessageAttemptListByEndpoint({\n      appId,\n      endpointId,\n      ...options,\n    });\n  }\n\n  public get(\n    appId: string,\n    msgId: string,\n    attemptId: string\n  ): Promise<MessageAttemptOut> {\n    return this.api.v1MessageAttemptGet({\n      attemptId,\n      msgId,\n      appId,\n    });\n  }\n\n  public resend(\n    appId: string,\n    msgId: string,\n    endpointId: string,\n    options?: PostOptions\n  ): Promise<void> {\n    return this.api.v1MessageAttemptResend({\n      endpointId,\n      msgId,\n      appId,\n      ...options,\n    });\n  }\n\n  public listAttemptedMessages(\n    appId: string,\n    endpointId: string,\n    options?: MessageAttemptListOptions\n  ): Promise<ListResponseEndpointMessageOut> {\n    return this.api.v1MessageAttemptListAttemptedMessages({\n      appId,\n      endpointId,\n      ...options,\n    });\n  }\n\n  public listAttemptedDestinations(\n    appId: string,\n    msgId: string,\n    options?: MessageAttemptListOptions\n  ): Promise<ListResponseMessageEndpointOut> {\n    return this.api.v1MessageAttemptListAttemptedDestinations({\n      appId,\n      msgId,\n      ...options,\n    });\n  }\n\n  public listAttemptsForEndpoint(\n    appId: string,\n    msgId: string,\n    endpointId: string,\n    options?: MessageAttemptListOptions\n  ): Promise<ListResponseMessageAttemptEndpointOut> {\n    return this.api.v1MessageAttemptListByEndpointDeprecated({\n      appId,\n      msgId,\n      endpointId,\n      ...options,\n    });\n  }\n\n  public expungeContent(appId: string, msgId: string, attemptId: string): Promise<void> {\n    return this.api.v1MessageAttemptExpungeContent({\n      appId,\n      msgId,\n      attemptId,\n    });\n  }\n}\n\nclass BackgroundTask {\n  private readonly api: BackgroundTasksApi;\n\n  public constructor(config: Configuration) {\n    this.api = new BackgroundTasksApi(config);\n  }\n\n  public listByEndpoint(\n    options?: BackgroundTaskListOptions\n  ): Promise<ListResponseBackgroundTaskOut> {\n    return this.api.listBackgroundTasks({\n      ...options,\n    });\n  }\n\n  public get(taskId: string): Promise<BackgroundTaskOut> {\n    return this.api.getBackgroundTask({\n      taskId,\n    });\n  }\n}\n\nclass ExtendableError extends Error {\n  constructor(message: any) {\n    super(message);\n    Object.setPrototypeOf(this, ExtendableError.prototype);\n    this.name = \"ExtendableError\";\n    this.stack = new Error(message).stack;\n  }\n}\n\nexport class WebhookVerificationError extends ExtendableError {\n  constructor(message: string) {\n    super(message);\n    Object.setPrototypeOf(this, WebhookVerificationError.prototype);\n    this.name = \"WebhookVerificationError\";\n  }\n}\n\nexport interface WebhookRequiredHeaders {\n  \"svix-id\": string;\n  \"svix-timestamp\": string;\n  \"svix-signature\": string;\n}\n\nexport interface WebhookUnbrandedRequiredHeaders {\n  \"webhook-id\": string;\n  \"webhook-timestamp\": string;\n  \"webhook-signature\": string;\n}\n\nexport interface WebhookOptions {\n  format?: \"raw\";\n}\n\nexport class Webhook {\n  private static prefix = \"whsec_\";\n  private readonly key: Uint8Array;\n\n  constructor(secret: string | Uint8Array, options?: WebhookOptions) {\n    if (!secret) {\n      throw new Error(\"Secret can't be empty.\");\n    }\n    if (options?.format === \"raw\") {\n      if (secret instanceof Uint8Array) {\n        this.key = secret;\n      } else {\n        this.key = Uint8Array.from(secret, (c) => c.charCodeAt(0));\n      }\n    } else {\n      if (typeof secret !== \"string\") {\n        throw new Error(\"Expected secret to be of type string\");\n      }\n      if (secret.startsWith(Webhook.prefix)) {\n        secret = secret.substring(Webhook.prefix.length);\n      }\n      this.key = base64.decode(secret);\n    }\n  }\n\n  public verify(\n    payload: string | Buffer,\n    headers_:\n      | WebhookRequiredHeaders\n      | WebhookUnbrandedRequiredHeaders\n      | Record<string, string>\n  ): unknown {\n    const headers: Record<string, string> = {};\n    for (const key of Object.keys(headers_)) {\n      headers[key.toLowerCase()] = (headers_ as Record<string, string>)[key];\n    }\n\n    let msgId = headers[\"svix-id\"];\n    let msgSignature = headers[\"svix-signature\"];\n    let msgTimestamp = headers[\"svix-timestamp\"];\n\n    if (!msgSignature || !msgId || !msgTimestamp) {\n      msgId = headers[\"webhook-id\"];\n      msgSignature = headers[\"webhook-signature\"];\n      msgTimestamp = headers[\"webhook-timestamp\"];\n\n      if (!msgSignature || !msgId || !msgTimestamp) {\n        throw new WebhookVerificationError(\"Missing required headers\");\n      }\n    }\n\n    const timestamp = this.verifyTimestamp(msgTimestamp);\n\n    const computedSignature = this.sign(msgId, timestamp, payload);\n    const expectedSignature = computedSignature.split(\",\")[1];\n\n    const passedSignatures = msgSignature.split(\" \");\n\n    const encoder = new globalThis.TextEncoder();\n    for (const versionedSignature of passedSignatures) {\n      const [version, signature] = versionedSignature.split(\",\");\n      if (version !== \"v1\") {\n        continue;\n      }\n\n      if (timingSafeEqual(encoder.encode(signature), encoder.encode(expectedSignature))) {\n        return JSON.parse(payload.toString());\n      }\n    }\n    throw new WebhookVerificationError(\"No matching signature found\");\n  }\n\n  public sign(msgId: string, timestamp: Date, payload: string | Buffer): string {\n    if (typeof payload === \"string\") {\n      // Do nothing, already a string\n    } else if (payload.constructor.name === \"Buffer\") {\n      payload = payload.toString();\n    } else {\n      throw new Error(\n        \"Expected payload to be of type string or Buffer. Please refer to https://docs.svix.com/receiving/verifying-payloads/how for more information.\"\n      );\n    }\n\n    const encoder = new TextEncoder();\n    const timestampNumber = Math.floor(timestamp.getTime() / 1000);\n    const toSign = encoder.encode(`${msgId}.${timestampNumber}.${payload}`);\n    const expectedSignature = base64.encode(sha256.hmac(this.key, toSign));\n    return `v1,${expectedSignature}`;\n  }\n\n  private verifyTimestamp(timestampHeader: string): Date {\n    const now = Math.floor(Date.now() / 1000);\n    const timestamp = parseInt(timestampHeader, 10);\n    if (isNaN(timestamp)) {\n      throw new WebhookVerificationError(\"Invalid Signature Headers\");\n    }\n\n    if (now - timestamp > WEBHOOK_TOLERANCE_IN_SECONDS) {\n      throw new WebhookVerificationError(\"Message timestamp too old\");\n    }\n    if (timestamp > now + WEBHOOK_TOLERANCE_IN_SECONDS) {\n      throw new WebhookVerificationError(\"Message timestamp too new\");\n    }\n    return new Date(timestamp * 1000);\n  }\n}\n\nclass Statistics {\n  private readonly api: StatisticsApi;\n\n  public constructor(config: Configuration) {\n    this.api = new StatisticsApi(config);\n  }\n\n  public aggregateEventTypes(): Promise<AggregateEventTypesOut> {\n    return this.api.v1StatisticsAggregateEventTypes({});\n  }\n\n  public aggregateAppStats(\n    appUsageStatsIn: AppUsageStatsIn,\n    options?: PostOptions\n  ): Promise<AppUsageStatsOut> {\n    return this.api.v1StatisticsAggregateAppStats({\n      appUsageStatsIn,\n      ...options,\n    });\n  }\n}\n"],"names":[],"mappings":"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"}},
    {"offset": {"line": 625, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}