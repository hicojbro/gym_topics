{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 4, "column": 0}, "map": {"version":3,"sources":["turbopack://[project]/node_modules/svix/src/openapi/apis/exception.ts"],"sourcesContent":["/**\n * Represents an error caused by an api call i.e. it has attributes for a HTTP status code \n * and the returned body object.\n *\n * Example\n * API returns a ErrorMessageObject whenever HTTP status code is not in [200, 299]\n * => ApiException(404, someErrorMessageObject)\n *\n */\nexport class ApiException<T> extends Error {\n    public constructor(public code: number, public body: T) {\n        super(\"HTTP-Code: \" + code + \"\\nMessage: \" + JSON.stringify(body))  \n    }\n}\n"],"names":[],"mappings":";;;;;AASA,MAAa,qBAAwB;IACjC,YAA0B,IAAY,EAAS,IAAO,CAAA;QAClD,KAAK,CAAC,gBAAgB,OAAO,gBAAgB,KAAK,SAAS,CAAC;QADtC,IAAA,CAAA,IAAI,GAAJ;QAAqB,IAAA,CAAA,IAAI,GAAJ;IAE/C;;AAHJ,QAAA,YAAA,GAAA"}},
    {"offset": {"line": 17, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 21, "column": 0}, "map": {"version":3,"sources":["turbopack://[project]/node_modules/svix/src/openapi/apis/baseapi.ts"],"sourcesContent":["import { Configuration } from '../configuration'\n\n/**\n *\n * @export\n */\nexport const COLLECTION_FORMATS = {\n    csv: \",\",\n    ssv: \" \",\n    tsv: \"\\t\",\n    pipes: \"|\",\n};\n\n\n/**\n * \n * @export\n * @class BaseAPI\n */\nexport class BaseAPIRequestFactory {\n\n    constructor(protected configuration: Configuration) {\n    }\n};\n\n/**\n * \n * @export\n * @class RequiredError\n * @extends {Error}\n */\nexport class RequiredError extends Error {\n    name: \"RequiredError\" = \"RequiredError\";\n    constructor(public field: string, msg?: string) {\n        super(msg);\n    }\n}\n"],"names":[],"mappings":";;;;;AAMa,QAAA,kBAAkB,GAAG;IAC9B,KAAK;IACL,KAAK;IACL,KAAK;IACL,OAAO;;AASX,MAAa;IAET,YAAsB,aAA4B,CAAA;QAA5B,IAAA,CAAA,aAAa,GAAb;IACtB;;AAHJ,QAAA,qBAAA,GAAA;;AAYA,MAAa,sBAAsB;IAE/B,YAAmB,KAAa,EAAE,GAAY,CAAA;QAC1C,KAAK,CAAC;QADS,IAAA,CAAA,KAAK,GAAL;QADnB,IAAA,CAAA,IAAI,GAAoB;IAGxB;;AAJJ,QAAA,aAAA,GAAA"}},
    {"offset": {"line": 47, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 51, "column": 0}, "map": {"version":3,"sources":["turbopack://[project]/node_modules/svix/src/openapi/apis/ApplicationApi.ts"],"sourcesContent":["// TODO: better import syntax?\nimport { BaseAPIRequestFactory, RequiredError } from './baseapi';\nimport {Configuration} from '../configuration';\nimport { RequestContext, HttpMethod, ResponseContext, HttpFile} from '../http/http';\nimport {ObjectSerializer} from '../models/ObjectSerializer';\nimport {ApiException} from './exception';\nimport {isCodeInRange} from '../util';\n\nimport { ApplicationIn } from '../models/ApplicationIn';\nimport { ApplicationOut } from '../models/ApplicationOut';\nimport { ApplicationPatch } from '../models/ApplicationPatch';\nimport { ApplicationStats } from '../models/ApplicationStats';\nimport { HTTPValidationError } from '../models/HTTPValidationError';\nimport { HttpErrorOut } from '../models/HttpErrorOut';\nimport { ListResponseApplicationOut } from '../models/ListResponseApplicationOut';\nimport { ListResponseApplicationStats } from '../models/ListResponseApplicationStats';\nimport { Ordering } from '../models/Ordering';\n\n/**\n * no description\n */\nexport class ApplicationApiRequestFactory extends BaseAPIRequestFactory {\n\n    /**\n     * Get basic statistics for all applications.\n     * Get App Usage Stats\n     * @param since Filter the range to data after this date\n     * @param until Filter the range to data before this date\n     * @param limit Limit the number of returned items\n     * @param iterator The iterator to use (depends on the chosen ordering)\n     */\n    public async getAppUsageStatsApiV1AppStatsUsageGet(since: Date, until: Date, limit?: number, iterator?: string, _options?: Configuration): Promise<RequestContext> {\n        let _config = _options || this.configuration;\n\n        // verify required parameter 'since' is not null or undefined\n        if (since === null || since === undefined) {\n            throw new RequiredError('Required parameter since was null or undefined when calling getAppUsageStatsApiV1AppStatsUsageGet.');\n        }\n\n\n        // verify required parameter 'until' is not null or undefined\n        if (until === null || until === undefined) {\n            throw new RequiredError('Required parameter until was null or undefined when calling getAppUsageStatsApiV1AppStatsUsageGet.');\n        }\n\n\n\n\n        // Path Params\n        const localVarPath = '/api/v1/app/stats/usage';\n\n        // Make Request Context\n        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.GET);\n        requestContext.setHeaderParam(\"Accept\", \"application/json, */*;q=0.8\")\n        const randomId = Math.floor(Math.random() * Math.pow(2, 32))\n        requestContext.setHeaderParam(\"svix-req-id\", randomId.toString())\n\n        // Query Params\n        if (since !== undefined) {\n            requestContext.setQueryParam(\"since\", ObjectSerializer.serialize(since, \"Date\", \"date-time\"));\n        }\n        if (until !== undefined) {\n            requestContext.setQueryParam(\"until\", ObjectSerializer.serialize(until, \"Date\", \"date-time\"));\n        }\n        if (limit !== undefined) {\n            requestContext.setQueryParam(\"limit\", ObjectSerializer.serialize(limit, \"number\", \"int\"));\n        }\n        if (iterator !== undefined) {\n            requestContext.setQueryParam(\"iterator\", ObjectSerializer.serialize(iterator, \"string\", \"\"));\n        }\n\n        // Header Params\n\n        // Form Params\n\n\n        // Body Params\n\n        let authMethod = null;\n        // Apply auth methods\n        authMethod = _config.authMethods[\"HTTPBearer\"]\n        if (authMethod) {\n            await authMethod.applySecurityAuthentication(requestContext);\n        }\n\n        return requestContext;\n    }\n\n    /**\n     * Create a new application.\n     * Create Application\n     * @param applicationIn \n     * @param getIfExists Get an existing application, or create a new one if doesn&#39;t exist. It&#39;s two separate functions in the libs.\n     * @param idempotencyKey The request&#39;s idempotency key\n     */\n    public async v1ApplicationCreate(applicationIn: ApplicationIn, getIfExists?: boolean, idempotencyKey?: string, _options?: Configuration): Promise<RequestContext> {\n        let _config = _options || this.configuration;\n\n        // verify required parameter 'applicationIn' is not null or undefined\n        if (applicationIn === null || applicationIn === undefined) {\n            throw new RequiredError('Required parameter applicationIn was null or undefined when calling v1ApplicationCreate.');\n        }\n\n\n\n\n        // Path Params\n        const localVarPath = '/api/v1/app';\n\n        // Make Request Context\n        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.POST);\n        requestContext.setHeaderParam(\"Accept\", \"application/json, */*;q=0.8\")\n        const randomId = Math.floor(Math.random() * Math.pow(2, 32))\n        requestContext.setHeaderParam(\"svix-req-id\", randomId.toString())\n\n        // Query Params\n        if (getIfExists !== undefined) {\n            requestContext.setQueryParam(\"get_if_exists\", ObjectSerializer.serialize(getIfExists, \"boolean\", \"\"));\n        }\n\n        // Header Params\n        if (idempotencyKey !== undefined) {\n            requestContext.setHeaderParam(\"idempotency-key\", ObjectSerializer.serialize(idempotencyKey, \"string\", \"\"));\n        }\n\n        // Form Params\n\n\n        // Body Params\n        const contentType = ObjectSerializer.getPreferredMediaType([\n            \"application/json\"\n        ]);\n        requestContext.setHeaderParam(\"Content-Type\", contentType);\n        const serializedBody = ObjectSerializer.stringify(\n            ObjectSerializer.serialize(applicationIn, \"ApplicationIn\", \"\"),\n            contentType\n        );\n        requestContext.setBody(serializedBody);\n\n        let authMethod = null;\n        // Apply auth methods\n        authMethod = _config.authMethods[\"HTTPBearer\"]\n        if (authMethod) {\n            await authMethod.applySecurityAuthentication(requestContext);\n        }\n\n        return requestContext;\n    }\n\n    /**\n     * Delete an application.\n     * Delete Application\n     * @param appId The app&#39;s ID or UID\n     */\n    public async v1ApplicationDelete(appId: string, _options?: Configuration): Promise<RequestContext> {\n        let _config = _options || this.configuration;\n\n        // verify required parameter 'appId' is not null or undefined\n        if (appId === null || appId === undefined) {\n            throw new RequiredError('Required parameter appId was null or undefined when calling v1ApplicationDelete.');\n        }\n\n\n        // Path Params\n        const localVarPath = '/api/v1/app/{app_id}'\n            .replace('{' + 'app_id' + '}', encodeURIComponent(String(appId)));\n\n        // Make Request Context\n        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.DELETE);\n        requestContext.setHeaderParam(\"Accept\", \"application/json, */*;q=0.8\")\n        const randomId = Math.floor(Math.random() * Math.pow(2, 32))\n        requestContext.setHeaderParam(\"svix-req-id\", randomId.toString())\n\n        // Query Params\n\n        // Header Params\n\n        // Form Params\n\n\n        // Body Params\n\n        let authMethod = null;\n        // Apply auth methods\n        authMethod = _config.authMethods[\"HTTPBearer\"]\n        if (authMethod) {\n            await authMethod.applySecurityAuthentication(requestContext);\n        }\n\n        return requestContext;\n    }\n\n    /**\n     * Get an application.\n     * Get Application\n     * @param appId The app&#39;s ID or UID\n     */\n    public async v1ApplicationGet(appId: string, _options?: Configuration): Promise<RequestContext> {\n        let _config = _options || this.configuration;\n\n        // verify required parameter 'appId' is not null or undefined\n        if (appId === null || appId === undefined) {\n            throw new RequiredError('Required parameter appId was null or undefined when calling v1ApplicationGet.');\n        }\n\n\n        // Path Params\n        const localVarPath = '/api/v1/app/{app_id}'\n            .replace('{' + 'app_id' + '}', encodeURIComponent(String(appId)));\n\n        // Make Request Context\n        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.GET);\n        requestContext.setHeaderParam(\"Accept\", \"application/json, */*;q=0.8\")\n        const randomId = Math.floor(Math.random() * Math.pow(2, 32))\n        requestContext.setHeaderParam(\"svix-req-id\", randomId.toString())\n\n        // Query Params\n\n        // Header Params\n\n        // Form Params\n\n\n        // Body Params\n\n        let authMethod = null;\n        // Apply auth methods\n        authMethod = _config.authMethods[\"HTTPBearer\"]\n        if (authMethod) {\n            await authMethod.applySecurityAuthentication(requestContext);\n        }\n\n        return requestContext;\n    }\n\n    /**\n     * Get basic statistics for the application\n     * Get App Stats\n     * @param since Filter the range to data starting from this date\n     * @param until Filter the range to data ending by this date\n     * @param appId The app&#39;s ID or UID\n     */\n    public async v1ApplicationGetStats(since: Date, until: Date, appId: string, _options?: Configuration): Promise<RequestContext> {\n        let _config = _options || this.configuration;\n\n        // verify required parameter 'since' is not null or undefined\n        if (since === null || since === undefined) {\n            throw new RequiredError('Required parameter since was null or undefined when calling v1ApplicationGetStats.');\n        }\n\n\n        // verify required parameter 'until' is not null or undefined\n        if (until === null || until === undefined) {\n            throw new RequiredError('Required parameter until was null or undefined when calling v1ApplicationGetStats.');\n        }\n\n\n        // verify required parameter 'appId' is not null or undefined\n        if (appId === null || appId === undefined) {\n            throw new RequiredError('Required parameter appId was null or undefined when calling v1ApplicationGetStats.');\n        }\n\n\n        // Path Params\n        const localVarPath = '/api/v1/app/{app_id}/stats'\n            .replace('{' + 'app_id' + '}', encodeURIComponent(String(appId)));\n\n        // Make Request Context\n        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.GET);\n        requestContext.setHeaderParam(\"Accept\", \"application/json, */*;q=0.8\")\n        const randomId = Math.floor(Math.random() * Math.pow(2, 32))\n        requestContext.setHeaderParam(\"svix-req-id\", randomId.toString())\n\n        // Query Params\n        if (since !== undefined) {\n            requestContext.setQueryParam(\"since\", ObjectSerializer.serialize(since, \"Date\", \"date-time\"));\n        }\n        if (until !== undefined) {\n            requestContext.setQueryParam(\"until\", ObjectSerializer.serialize(until, \"Date\", \"date-time\"));\n        }\n\n        // Header Params\n\n        // Form Params\n\n\n        // Body Params\n\n        let authMethod = null;\n        // Apply auth methods\n        authMethod = _config.authMethods[\"HTTPBearer\"]\n        if (authMethod) {\n            await authMethod.applySecurityAuthentication(requestContext);\n        }\n\n        return requestContext;\n    }\n\n    /**\n     * List of all the organization's applications.\n     * List Applications\n     * @param limit Limit the number of returned items\n     * @param iterator The iterator returned from a prior invocation\n     * @param order The sorting order of the returned items\n     */\n    public async v1ApplicationList(limit?: number, iterator?: string, order?: Ordering, _options?: Configuration): Promise<RequestContext> {\n        let _config = _options || this.configuration;\n\n\n\n\n        // Path Params\n        const localVarPath = '/api/v1/app';\n\n        // Make Request Context\n        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.GET);\n        requestContext.setHeaderParam(\"Accept\", \"application/json, */*;q=0.8\")\n        const randomId = Math.floor(Math.random() * Math.pow(2, 32))\n        requestContext.setHeaderParam(\"svix-req-id\", randomId.toString())\n\n        // Query Params\n        if (limit !== undefined) {\n            requestContext.setQueryParam(\"limit\", ObjectSerializer.serialize(limit, \"number\", \"uint64\"));\n        }\n        if (iterator !== undefined) {\n            requestContext.setQueryParam(\"iterator\", ObjectSerializer.serialize(iterator, \"string\", \"\"));\n        }\n        if (order !== undefined) {\n            requestContext.setQueryParam(\"order\", ObjectSerializer.serialize(order, \"Ordering\", \"\"));\n        }\n\n        // Header Params\n\n        // Form Params\n\n\n        // Body Params\n\n        let authMethod = null;\n        // Apply auth methods\n        authMethod = _config.authMethods[\"HTTPBearer\"]\n        if (authMethod) {\n            await authMethod.applySecurityAuthentication(requestContext);\n        }\n\n        return requestContext;\n    }\n\n    /**\n     * Partially update an application.\n     * Patch Application\n     * @param appId The app&#39;s ID or UID\n     * @param applicationPatch \n     */\n    public async v1ApplicationPatch(appId: string, applicationPatch: ApplicationPatch, _options?: Configuration): Promise<RequestContext> {\n        let _config = _options || this.configuration;\n\n        // verify required parameter 'appId' is not null or undefined\n        if (appId === null || appId === undefined) {\n            throw new RequiredError('Required parameter appId was null or undefined when calling v1ApplicationPatch.');\n        }\n\n\n        // verify required parameter 'applicationPatch' is not null or undefined\n        if (applicationPatch === null || applicationPatch === undefined) {\n            throw new RequiredError('Required parameter applicationPatch was null or undefined when calling v1ApplicationPatch.');\n        }\n\n\n        // Path Params\n        const localVarPath = '/api/v1/app/{app_id}'\n            .replace('{' + 'app_id' + '}', encodeURIComponent(String(appId)));\n\n        // Make Request Context\n        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.PATCH);\n        requestContext.setHeaderParam(\"Accept\", \"application/json, */*;q=0.8\")\n        const randomId = Math.floor(Math.random() * Math.pow(2, 32))\n        requestContext.setHeaderParam(\"svix-req-id\", randomId.toString())\n\n        // Query Params\n\n        // Header Params\n\n        // Form Params\n\n\n        // Body Params\n        const contentType = ObjectSerializer.getPreferredMediaType([\n            \"application/json\"\n        ]);\n        requestContext.setHeaderParam(\"Content-Type\", contentType);\n        const serializedBody = ObjectSerializer.stringify(\n            ObjectSerializer.serialize(applicationPatch, \"ApplicationPatch\", \"\"),\n            contentType\n        );\n        requestContext.setBody(serializedBody);\n\n        let authMethod = null;\n        // Apply auth methods\n        authMethod = _config.authMethods[\"HTTPBearer\"]\n        if (authMethod) {\n            await authMethod.applySecurityAuthentication(requestContext);\n        }\n\n        return requestContext;\n    }\n\n    /**\n     * Update an application.\n     * Update Application\n     * @param appId The app&#39;s ID or UID\n     * @param applicationIn \n     */\n    public async v1ApplicationUpdate(appId: string, applicationIn: ApplicationIn, _options?: Configuration): Promise<RequestContext> {\n        let _config = _options || this.configuration;\n\n        // verify required parameter 'appId' is not null or undefined\n        if (appId === null || appId === undefined) {\n            throw new RequiredError('Required parameter appId was null or undefined when calling v1ApplicationUpdate.');\n        }\n\n\n        // verify required parameter 'applicationIn' is not null or undefined\n        if (applicationIn === null || applicationIn === undefined) {\n            throw new RequiredError('Required parameter applicationIn was null or undefined when calling v1ApplicationUpdate.');\n        }\n\n\n        // Path Params\n        const localVarPath = '/api/v1/app/{app_id}'\n            .replace('{' + 'app_id' + '}', encodeURIComponent(String(appId)));\n\n        // Make Request Context\n        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.PUT);\n        requestContext.setHeaderParam(\"Accept\", \"application/json, */*;q=0.8\")\n        const randomId = Math.floor(Math.random() * Math.pow(2, 32))\n        requestContext.setHeaderParam(\"svix-req-id\", randomId.toString())\n\n        // Query Params\n\n        // Header Params\n\n        // Form Params\n\n\n        // Body Params\n        const contentType = ObjectSerializer.getPreferredMediaType([\n            \"application/json\"\n        ]);\n        requestContext.setHeaderParam(\"Content-Type\", contentType);\n        const serializedBody = ObjectSerializer.stringify(\n            ObjectSerializer.serialize(applicationIn, \"ApplicationIn\", \"\"),\n            contentType\n        );\n        requestContext.setBody(serializedBody);\n\n        let authMethod = null;\n        // Apply auth methods\n        authMethod = _config.authMethods[\"HTTPBearer\"]\n        if (authMethod) {\n            await authMethod.applySecurityAuthentication(requestContext);\n        }\n\n        return requestContext;\n    }\n\n}\n\nexport class ApplicationApiResponseProcessor {\n\n    /**\n     * Unwraps the actual response sent by the server from the response context and deserializes the response content\n     * to the expected objects\n     *\n     * @params response Response returned by the server for a request to getAppUsageStatsApiV1AppStatsUsageGet\n     * @throws ApiException if the response code was not in [200, 299]\n     */\n     public async getAppUsageStatsApiV1AppStatsUsageGet(response: ResponseContext): Promise<ListResponseApplicationStats > {\n        const contentType = ObjectSerializer.normalizeMediaType(response.headers[\"content-type\"]);\n\n        if (isCodeInRange(\"200\", response.httpStatusCode)) {\n            const body: ListResponseApplicationStats = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"ListResponseApplicationStats\", \"\"\n            ) as ListResponseApplicationStats;\n            return body;\n        }\n        if (isCodeInRange(\"400\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(400, body);\n        }\n        if (isCodeInRange(\"401\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(401, body);\n        }\n        if (isCodeInRange(\"403\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(403, body);\n        }\n        if (isCodeInRange(\"404\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(404, body);\n        }\n        if (isCodeInRange(\"409\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(409, body);\n        }\n        if (isCodeInRange(\"422\", response.httpStatusCode)) {\n            const body: HTTPValidationError = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HTTPValidationError\", \"\"\n            ) as HTTPValidationError;\n            throw new ApiException<HTTPValidationError>(422, body);\n        }\n        if (isCodeInRange(\"429\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(429, body);\n        }\n\n        // Work around for missing responses in specification, e.g. for petstore.yaml\n        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {\n            const body: ListResponseApplicationStats = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"ListResponseApplicationStats\", \"\"\n            ) as ListResponseApplicationStats;\n            return body;\n        }\n\n        let body = await response.body.text();\n        throw new ApiException<string>(response.httpStatusCode, body);\n    }\n\n    /**\n     * Unwraps the actual response sent by the server from the response context and deserializes the response content\n     * to the expected objects\n     *\n     * @params response Response returned by the server for a request to v1ApplicationCreate\n     * @throws ApiException if the response code was not in [200, 299]\n     */\n     public async v1ApplicationCreate(response: ResponseContext): Promise<ApplicationOut > {\n        const contentType = ObjectSerializer.normalizeMediaType(response.headers[\"content-type\"]);\n\n        if (isCodeInRange(\"200\", response.httpStatusCode)) {\n            const body: ApplicationOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"ApplicationOut\", \"\"\n            ) as ApplicationOut;\n            return body;\n        }\n        if (isCodeInRange(\"201\", response.httpStatusCode)) {\n            const body: ApplicationOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"ApplicationOut\", \"\"\n            ) as ApplicationOut;\n            return body;\n        }\n        if (isCodeInRange(\"400\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(400, body);\n        }\n        if (isCodeInRange(\"401\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(401, body);\n        }\n        if (isCodeInRange(\"403\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(403, body);\n        }\n        if (isCodeInRange(\"404\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(404, body);\n        }\n        if (isCodeInRange(\"409\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(409, body);\n        }\n        if (isCodeInRange(\"422\", response.httpStatusCode)) {\n            const body: HTTPValidationError = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HTTPValidationError\", \"\"\n            ) as HTTPValidationError;\n            throw new ApiException<HTTPValidationError>(422, body);\n        }\n        if (isCodeInRange(\"429\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(429, body);\n        }\n\n        // Work around for missing responses in specification, e.g. for petstore.yaml\n        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {\n            const body: ApplicationOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"ApplicationOut\", \"\"\n            ) as ApplicationOut;\n            return body;\n        }\n\n        let body = await response.body.text();\n        throw new ApiException<string>(response.httpStatusCode, body);\n    }\n\n    /**\n     * Unwraps the actual response sent by the server from the response context and deserializes the response content\n     * to the expected objects\n     *\n     * @params response Response returned by the server for a request to v1ApplicationDelete\n     * @throws ApiException if the response code was not in [200, 299]\n     */\n     public async v1ApplicationDelete(response: ResponseContext): Promise<void > {\n        const contentType = ObjectSerializer.normalizeMediaType(response.headers[\"content-type\"]);\n\n        if (isCodeInRange(\"204\", response.httpStatusCode)) {\n            return;\n        }\n        if (isCodeInRange(\"400\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(400, body);\n        }\n        if (isCodeInRange(\"401\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(401, body);\n        }\n        if (isCodeInRange(\"403\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(403, body);\n        }\n        if (isCodeInRange(\"404\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(404, body);\n        }\n        if (isCodeInRange(\"409\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(409, body);\n        }\n        if (isCodeInRange(\"422\", response.httpStatusCode)) {\n            const body: HTTPValidationError = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HTTPValidationError\", \"\"\n            ) as HTTPValidationError;\n            throw new ApiException<HTTPValidationError>(422, body);\n        }\n        if (isCodeInRange(\"429\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(429, body);\n        }\n\n        // Work around for missing responses in specification, e.g. for petstore.yaml\n        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {\n            const body: void = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"void\", \"\"\n            ) as void;\n            return body;\n        }\n\n        let body = await response.body.text();\n        throw new ApiException<string>(response.httpStatusCode, body);\n    }\n\n    /**\n     * Unwraps the actual response sent by the server from the response context and deserializes the response content\n     * to the expected objects\n     *\n     * @params response Response returned by the server for a request to v1ApplicationGet\n     * @throws ApiException if the response code was not in [200, 299]\n     */\n     public async v1ApplicationGet(response: ResponseContext): Promise<ApplicationOut > {\n        const contentType = ObjectSerializer.normalizeMediaType(response.headers[\"content-type\"]);\n\n        if (isCodeInRange(\"200\", response.httpStatusCode)) {\n            const body: ApplicationOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"ApplicationOut\", \"\"\n            ) as ApplicationOut;\n            return body;\n        }\n        if (isCodeInRange(\"400\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(400, body);\n        }\n        if (isCodeInRange(\"401\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(401, body);\n        }\n        if (isCodeInRange(\"403\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(403, body);\n        }\n        if (isCodeInRange(\"404\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(404, body);\n        }\n        if (isCodeInRange(\"409\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(409, body);\n        }\n        if (isCodeInRange(\"422\", response.httpStatusCode)) {\n            const body: HTTPValidationError = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HTTPValidationError\", \"\"\n            ) as HTTPValidationError;\n            throw new ApiException<HTTPValidationError>(422, body);\n        }\n        if (isCodeInRange(\"429\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(429, body);\n        }\n\n        // Work around for missing responses in specification, e.g. for petstore.yaml\n        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {\n            const body: ApplicationOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"ApplicationOut\", \"\"\n            ) as ApplicationOut;\n            return body;\n        }\n\n        let body = await response.body.text();\n        throw new ApiException<string>(response.httpStatusCode, body);\n    }\n\n    /**\n     * Unwraps the actual response sent by the server from the response context and deserializes the response content\n     * to the expected objects\n     *\n     * @params response Response returned by the server for a request to v1ApplicationGetStats\n     * @throws ApiException if the response code was not in [200, 299]\n     */\n     public async v1ApplicationGetStats(response: ResponseContext): Promise<ApplicationStats > {\n        const contentType = ObjectSerializer.normalizeMediaType(response.headers[\"content-type\"]);\n\n        if (isCodeInRange(\"200\", response.httpStatusCode)) {\n            const body: ApplicationStats = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"ApplicationStats\", \"\"\n            ) as ApplicationStats;\n            return body;\n        }\n        if (isCodeInRange(\"400\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(400, body);\n        }\n        if (isCodeInRange(\"401\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(401, body);\n        }\n        if (isCodeInRange(\"403\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(403, body);\n        }\n        if (isCodeInRange(\"404\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(404, body);\n        }\n        if (isCodeInRange(\"409\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(409, body);\n        }\n        if (isCodeInRange(\"422\", response.httpStatusCode)) {\n            const body: HTTPValidationError = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HTTPValidationError\", \"\"\n            ) as HTTPValidationError;\n            throw new ApiException<HTTPValidationError>(422, body);\n        }\n        if (isCodeInRange(\"429\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(429, body);\n        }\n\n        // Work around for missing responses in specification, e.g. for petstore.yaml\n        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {\n            const body: ApplicationStats = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"ApplicationStats\", \"\"\n            ) as ApplicationStats;\n            return body;\n        }\n\n        let body = await response.body.text();\n        throw new ApiException<string>(response.httpStatusCode, body);\n    }\n\n    /**\n     * Unwraps the actual response sent by the server from the response context and deserializes the response content\n     * to the expected objects\n     *\n     * @params response Response returned by the server for a request to v1ApplicationList\n     * @throws ApiException if the response code was not in [200, 299]\n     */\n     public async v1ApplicationList(response: ResponseContext): Promise<ListResponseApplicationOut > {\n        const contentType = ObjectSerializer.normalizeMediaType(response.headers[\"content-type\"]);\n\n        if (isCodeInRange(\"200\", response.httpStatusCode)) {\n            const body: ListResponseApplicationOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"ListResponseApplicationOut\", \"\"\n            ) as ListResponseApplicationOut;\n            return body;\n        }\n        if (isCodeInRange(\"400\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(400, body);\n        }\n        if (isCodeInRange(\"401\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(401, body);\n        }\n        if (isCodeInRange(\"403\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(403, body);\n        }\n        if (isCodeInRange(\"404\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(404, body);\n        }\n        if (isCodeInRange(\"409\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(409, body);\n        }\n        if (isCodeInRange(\"422\", response.httpStatusCode)) {\n            const body: HTTPValidationError = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HTTPValidationError\", \"\"\n            ) as HTTPValidationError;\n            throw new ApiException<HTTPValidationError>(422, body);\n        }\n        if (isCodeInRange(\"429\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(429, body);\n        }\n\n        // Work around for missing responses in specification, e.g. for petstore.yaml\n        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {\n            const body: ListResponseApplicationOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"ListResponseApplicationOut\", \"\"\n            ) as ListResponseApplicationOut;\n            return body;\n        }\n\n        let body = await response.body.text();\n        throw new ApiException<string>(response.httpStatusCode, body);\n    }\n\n    /**\n     * Unwraps the actual response sent by the server from the response context and deserializes the response content\n     * to the expected objects\n     *\n     * @params response Response returned by the server for a request to v1ApplicationPatch\n     * @throws ApiException if the response code was not in [200, 299]\n     */\n     public async v1ApplicationPatch(response: ResponseContext): Promise<ApplicationOut > {\n        const contentType = ObjectSerializer.normalizeMediaType(response.headers[\"content-type\"]);\n\n        if (isCodeInRange(\"200\", response.httpStatusCode)) {\n            const body: ApplicationOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"ApplicationOut\", \"\"\n            ) as ApplicationOut;\n            return body;\n        }\n        if (isCodeInRange(\"400\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(400, body);\n        }\n        if (isCodeInRange(\"401\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(401, body);\n        }\n        if (isCodeInRange(\"403\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(403, body);\n        }\n        if (isCodeInRange(\"404\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(404, body);\n        }\n        if (isCodeInRange(\"409\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(409, body);\n        }\n        if (isCodeInRange(\"422\", response.httpStatusCode)) {\n            const body: HTTPValidationError = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HTTPValidationError\", \"\"\n            ) as HTTPValidationError;\n            throw new ApiException<HTTPValidationError>(422, body);\n        }\n        if (isCodeInRange(\"429\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(429, body);\n        }\n\n        // Work around for missing responses in specification, e.g. for petstore.yaml\n        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {\n            const body: ApplicationOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"ApplicationOut\", \"\"\n            ) as ApplicationOut;\n            return body;\n        }\n\n        let body = await response.body.text();\n        throw new ApiException<string>(response.httpStatusCode, body);\n    }\n\n    /**\n     * Unwraps the actual response sent by the server from the response context and deserializes the response content\n     * to the expected objects\n     *\n     * @params response Response returned by the server for a request to v1ApplicationUpdate\n     * @throws ApiException if the response code was not in [200, 299]\n     */\n     public async v1ApplicationUpdate(response: ResponseContext): Promise<ApplicationOut > {\n        const contentType = ObjectSerializer.normalizeMediaType(response.headers[\"content-type\"]);\n\n        if (isCodeInRange(\"200\", response.httpStatusCode)) {\n            const body: ApplicationOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"ApplicationOut\", \"\"\n            ) as ApplicationOut;\n            return body;\n        }\n        if (isCodeInRange(\"201\", response.httpStatusCode)) {\n            const body: ApplicationOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"ApplicationOut\", \"\"\n            ) as ApplicationOut;\n            return body;\n        }\n        if (isCodeInRange(\"400\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(400, body);\n        }\n        if (isCodeInRange(\"401\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(401, body);\n        }\n        if (isCodeInRange(\"403\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(403, body);\n        }\n        if (isCodeInRange(\"404\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(404, body);\n        }\n        if (isCodeInRange(\"409\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(409, body);\n        }\n        if (isCodeInRange(\"422\", response.httpStatusCode)) {\n            const body: HTTPValidationError = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HTTPValidationError\", \"\"\n            ) as HTTPValidationError;\n            throw new ApiException<HTTPValidationError>(422, body);\n        }\n        if (isCodeInRange(\"429\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(429, body);\n        }\n\n        // Work around for missing responses in specification, e.g. for petstore.yaml\n        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {\n            const body: ApplicationOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"ApplicationOut\", \"\"\n            ) as ApplicationOut;\n            return body;\n        }\n\n        let body = await response.body.text();\n        throw new ApiException<string>(response.httpStatusCode, body);\n    }\n\n}\n"],"names":[],"mappings":"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"}},
    {"offset": {"line": 660, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 664, "column": 0}, "map": {"version":3,"sources":["turbopack://[project]/node_modules/svix/src/openapi/apis/AuthenticationApi.ts"],"sourcesContent":["// TODO: better import syntax?\nimport { BaseAPIRequestFactory, RequiredError } from './baseapi';\nimport {Configuration} from '../configuration';\nimport { RequestContext, HttpMethod, ResponseContext, HttpFile} from '../http/http';\nimport {ObjectSerializer} from '../models/ObjectSerializer';\nimport {ApiException} from './exception';\nimport {isCodeInRange} from '../util';\n\nimport { AppPortalAccessIn } from '../models/AppPortalAccessIn';\nimport { AppPortalAccessOut } from '../models/AppPortalAccessOut';\nimport { ApplicationTokenExpireIn } from '../models/ApplicationTokenExpireIn';\nimport { AuthTokenOut } from '../models/AuthTokenOut';\nimport { CreateMessageTokenIn } from '../models/CreateMessageTokenIn';\nimport { DashboardAccessOut } from '../models/DashboardAccessOut';\nimport { HTTPValidationError } from '../models/HTTPValidationError';\nimport { HttpErrorOut } from '../models/HttpErrorOut';\nimport { OneTimeTokenIn } from '../models/OneTimeTokenIn';\nimport { OneTimeTokenOut } from '../models/OneTimeTokenOut';\n\n/**\n * no description\n */\nexport class AuthenticationApiRequestFactory extends BaseAPIRequestFactory {\n\n    /**\n     * Use this function to get magic links (and authentication codes) for connecting your users to the Consumer Application Portal.\n     * Get Consumer App Portal Access\n     * @param appId The app&#39;s ID or UID\n     * @param appPortalAccessIn \n     * @param idempotencyKey The request&#39;s idempotency key\n     */\n    public async v1AuthenticationAppPortalAccess(appId: string, appPortalAccessIn: AppPortalAccessIn, idempotencyKey?: string, _options?: Configuration): Promise<RequestContext> {\n        let _config = _options || this.configuration;\n\n        // verify required parameter 'appId' is not null or undefined\n        if (appId === null || appId === undefined) {\n            throw new RequiredError('Required parameter appId was null or undefined when calling v1AuthenticationAppPortalAccess.');\n        }\n\n\n        // verify required parameter 'appPortalAccessIn' is not null or undefined\n        if (appPortalAccessIn === null || appPortalAccessIn === undefined) {\n            throw new RequiredError('Required parameter appPortalAccessIn was null or undefined when calling v1AuthenticationAppPortalAccess.');\n        }\n\n\n\n        // Path Params\n        const localVarPath = '/api/v1/auth/app-portal-access/{app_id}'\n            .replace('{' + 'app_id' + '}', encodeURIComponent(String(appId)));\n\n        // Make Request Context\n        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.POST);\n        requestContext.setHeaderParam(\"Accept\", \"application/json, */*;q=0.8\")\n        const randomId = Math.floor(Math.random() * Math.pow(2, 32))\n        requestContext.setHeaderParam(\"svix-req-id\", randomId.toString())\n\n        // Query Params\n\n        // Header Params\n        if (idempotencyKey !== undefined) {\n            requestContext.setHeaderParam(\"idempotency-key\", ObjectSerializer.serialize(idempotencyKey, \"string\", \"\"));\n        }\n\n        // Form Params\n\n\n        // Body Params\n        const contentType = ObjectSerializer.getPreferredMediaType([\n            \"application/json\"\n        ]);\n        requestContext.setHeaderParam(\"Content-Type\", contentType);\n        const serializedBody = ObjectSerializer.stringify(\n            ObjectSerializer.serialize(appPortalAccessIn, \"AppPortalAccessIn\", \"\"),\n            contentType\n        );\n        requestContext.setBody(serializedBody);\n\n        let authMethod = null;\n        // Apply auth methods\n        authMethod = _config.authMethods[\"HTTPBearer\"]\n        if (authMethod) {\n            await authMethod.applySecurityAuthentication(requestContext);\n        }\n\n        return requestContext;\n    }\n\n    /**\n     * Create a new access token that only allows creating messages inside this application.\n     * Create Cmg Token\n     * @param appId The app&#39;s ID or UID\n     * @param createMessageTokenIn \n     * @param idempotencyKey The request&#39;s idempotency key\n     */\n    public async v1AuthenticationCreateMessageToken(appId: string, createMessageTokenIn: CreateMessageTokenIn, idempotencyKey?: string, _options?: Configuration): Promise<RequestContext> {\n        let _config = _options || this.configuration;\n\n        // verify required parameter 'appId' is not null or undefined\n        if (appId === null || appId === undefined) {\n            throw new RequiredError('Required parameter appId was null or undefined when calling v1AuthenticationCreateMessageToken.');\n        }\n\n\n        // verify required parameter 'createMessageTokenIn' is not null or undefined\n        if (createMessageTokenIn === null || createMessageTokenIn === undefined) {\n            throw new RequiredError('Required parameter createMessageTokenIn was null or undefined when calling v1AuthenticationCreateMessageToken.');\n        }\n\n\n\n        // Path Params\n        const localVarPath = '/api/v1/auth/app/{app_id}/create-message-token'\n            .replace('{' + 'app_id' + '}', encodeURIComponent(String(appId)));\n\n        // Make Request Context\n        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.POST);\n        requestContext.setHeaderParam(\"Accept\", \"application/json, */*;q=0.8\")\n        const randomId = Math.floor(Math.random() * Math.pow(2, 32))\n        requestContext.setHeaderParam(\"svix-req-id\", randomId.toString())\n\n        // Query Params\n\n        // Header Params\n        if (idempotencyKey !== undefined) {\n            requestContext.setHeaderParam(\"idempotency-key\", ObjectSerializer.serialize(idempotencyKey, \"string\", \"\"));\n        }\n\n        // Form Params\n\n\n        // Body Params\n        const contentType = ObjectSerializer.getPreferredMediaType([\n            \"application/json\"\n        ]);\n        requestContext.setHeaderParam(\"Content-Type\", contentType);\n        const serializedBody = ObjectSerializer.stringify(\n            ObjectSerializer.serialize(createMessageTokenIn, \"CreateMessageTokenIn\", \"\"),\n            contentType\n        );\n        requestContext.setBody(serializedBody);\n\n        let authMethod = null;\n        // Apply auth methods\n        authMethod = _config.authMethods[\"HTTPBearer\"]\n        if (authMethod) {\n            await authMethod.applySecurityAuthentication(requestContext);\n        }\n\n        return requestContext;\n    }\n\n    /**\n     * DEPRECATED: Please use `app-portal-access` instead.  Use this function to get magic links (and authentication codes) for connecting your users to the Consumer Application Portal.\n     * Dashboard Access\n     * @param appId The app&#39;s ID or UID\n     * @param idempotencyKey The request&#39;s idempotency key\n     */\n    public async v1AuthenticationDashboardAccess(appId: string, idempotencyKey?: string, _options?: Configuration): Promise<RequestContext> {\n        let _config = _options || this.configuration;\n\n        // verify required parameter 'appId' is not null or undefined\n        if (appId === null || appId === undefined) {\n            throw new RequiredError('Required parameter appId was null or undefined when calling v1AuthenticationDashboardAccess.');\n        }\n\n\n\n        // Path Params\n        const localVarPath = '/api/v1/auth/dashboard-access/{app_id}'\n            .replace('{' + 'app_id' + '}', encodeURIComponent(String(appId)));\n\n        // Make Request Context\n        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.POST);\n        requestContext.setHeaderParam(\"Accept\", \"application/json, */*;q=0.8\")\n        const randomId = Math.floor(Math.random() * Math.pow(2, 32))\n        requestContext.setHeaderParam(\"svix-req-id\", randomId.toString())\n\n        // Query Params\n\n        // Header Params\n        if (idempotencyKey !== undefined) {\n            requestContext.setHeaderParam(\"idempotency-key\", ObjectSerializer.serialize(idempotencyKey, \"string\", \"\"));\n        }\n\n        // Form Params\n\n\n        // Body Params\n\n        let authMethod = null;\n        // Apply auth methods\n        authMethod = _config.authMethods[\"HTTPBearer\"]\n        if (authMethod) {\n            await authMethod.applySecurityAuthentication(requestContext);\n        }\n\n        return requestContext;\n    }\n\n    /**\n     * This is a one time token\n     * Exchange One Time Token\n     * @param oneTimeTokenIn \n     * @param idempotencyKey The request&#39;s idempotency key\n     */\n    public async v1AuthenticationExchangeOneTimeToken(oneTimeTokenIn: OneTimeTokenIn, idempotencyKey?: string, _options?: Configuration): Promise<RequestContext> {\n        let _config = _options || this.configuration;\n\n        // verify required parameter 'oneTimeTokenIn' is not null or undefined\n        if (oneTimeTokenIn === null || oneTimeTokenIn === undefined) {\n            throw new RequiredError('Required parameter oneTimeTokenIn was null or undefined when calling v1AuthenticationExchangeOneTimeToken.');\n        }\n\n\n\n        // Path Params\n        const localVarPath = '/api/v1/auth/one-time-token';\n\n        // Make Request Context\n        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.POST);\n        requestContext.setHeaderParam(\"Accept\", \"application/json, */*;q=0.8\")\n        const randomId = Math.floor(Math.random() * Math.pow(2, 32))\n        requestContext.setHeaderParam(\"svix-req-id\", randomId.toString())\n\n        // Query Params\n\n        // Header Params\n        if (idempotencyKey !== undefined) {\n            requestContext.setHeaderParam(\"idempotency-key\", ObjectSerializer.serialize(idempotencyKey, \"string\", \"\"));\n        }\n\n        // Form Params\n\n\n        // Body Params\n        const contentType = ObjectSerializer.getPreferredMediaType([\n            \"application/json\"\n        ]);\n        requestContext.setHeaderParam(\"Content-Type\", contentType);\n        const serializedBody = ObjectSerializer.stringify(\n            ObjectSerializer.serialize(oneTimeTokenIn, \"OneTimeTokenIn\", \"\"),\n            contentType\n        );\n        requestContext.setBody(serializedBody);\n\n        let authMethod = null;\n        // Apply auth methods\n        authMethod = _config.authMethods[\"HTTPBearer\"]\n        if (authMethod) {\n            await authMethod.applySecurityAuthentication(requestContext);\n        }\n\n        return requestContext;\n    }\n\n    /**\n     * Expire all of the tokens associated with a specific Application\n     * Expire All\n     * @param appId The app&#39;s ID or UID\n     * @param applicationTokenExpireIn \n     * @param idempotencyKey The request&#39;s idempotency key\n     */\n    public async v1AuthenticationExpireAll(appId: string, applicationTokenExpireIn: ApplicationTokenExpireIn, idempotencyKey?: string, _options?: Configuration): Promise<RequestContext> {\n        let _config = _options || this.configuration;\n\n        // verify required parameter 'appId' is not null or undefined\n        if (appId === null || appId === undefined) {\n            throw new RequiredError('Required parameter appId was null or undefined when calling v1AuthenticationExpireAll.');\n        }\n\n\n        // verify required parameter 'applicationTokenExpireIn' is not null or undefined\n        if (applicationTokenExpireIn === null || applicationTokenExpireIn === undefined) {\n            throw new RequiredError('Required parameter applicationTokenExpireIn was null or undefined when calling v1AuthenticationExpireAll.');\n        }\n\n\n\n        // Path Params\n        const localVarPath = '/api/v1/auth/app/{app_id}/expire-all'\n            .replace('{' + 'app_id' + '}', encodeURIComponent(String(appId)));\n\n        // Make Request Context\n        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.POST);\n        requestContext.setHeaderParam(\"Accept\", \"application/json, */*;q=0.8\")\n        const randomId = Math.floor(Math.random() * Math.pow(2, 32))\n        requestContext.setHeaderParam(\"svix-req-id\", randomId.toString())\n\n        // Query Params\n\n        // Header Params\n        if (idempotencyKey !== undefined) {\n            requestContext.setHeaderParam(\"idempotency-key\", ObjectSerializer.serialize(idempotencyKey, \"string\", \"\"));\n        }\n\n        // Form Params\n\n\n        // Body Params\n        const contentType = ObjectSerializer.getPreferredMediaType([\n            \"application/json\"\n        ]);\n        requestContext.setHeaderParam(\"Content-Type\", contentType);\n        const serializedBody = ObjectSerializer.stringify(\n            ObjectSerializer.serialize(applicationTokenExpireIn, \"ApplicationTokenExpireIn\", \"\"),\n            contentType\n        );\n        requestContext.setBody(serializedBody);\n\n        let authMethod = null;\n        // Apply auth methods\n        authMethod = _config.authMethods[\"HTTPBearer\"]\n        if (authMethod) {\n            await authMethod.applySecurityAuthentication(requestContext);\n        }\n\n        return requestContext;\n    }\n\n    /**\n     * Logout an app token.  Trying to log out other tokens will fail.\n     * Logout\n     * @param idempotencyKey The request&#39;s idempotency key\n     */\n    public async v1AuthenticationLogout(idempotencyKey?: string, _options?: Configuration): Promise<RequestContext> {\n        let _config = _options || this.configuration;\n\n\n        // Path Params\n        const localVarPath = '/api/v1/auth/logout';\n\n        // Make Request Context\n        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.POST);\n        requestContext.setHeaderParam(\"Accept\", \"application/json, */*;q=0.8\")\n        const randomId = Math.floor(Math.random() * Math.pow(2, 32))\n        requestContext.setHeaderParam(\"svix-req-id\", randomId.toString())\n\n        // Query Params\n\n        // Header Params\n        if (idempotencyKey !== undefined) {\n            requestContext.setHeaderParam(\"idempotency-key\", ObjectSerializer.serialize(idempotencyKey, \"string\", \"\"));\n        }\n\n        // Form Params\n\n\n        // Body Params\n\n        let authMethod = null;\n        // Apply auth methods\n        authMethod = _config.authMethods[\"HTTPBearer\"]\n        if (authMethod) {\n            await authMethod.applySecurityAuthentication(requestContext);\n        }\n\n        return requestContext;\n    }\n\n}\n\nexport class AuthenticationApiResponseProcessor {\n\n    /**\n     * Unwraps the actual response sent by the server from the response context and deserializes the response content\n     * to the expected objects\n     *\n     * @params response Response returned by the server for a request to v1AuthenticationAppPortalAccess\n     * @throws ApiException if the response code was not in [200, 299]\n     */\n     public async v1AuthenticationAppPortalAccess(response: ResponseContext): Promise<AppPortalAccessOut > {\n        const contentType = ObjectSerializer.normalizeMediaType(response.headers[\"content-type\"]);\n\n        if (isCodeInRange(\"200\", response.httpStatusCode)) {\n            const body: AppPortalAccessOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"AppPortalAccessOut\", \"\"\n            ) as AppPortalAccessOut;\n            return body;\n        }\n        if (isCodeInRange(\"400\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(400, body);\n        }\n        if (isCodeInRange(\"401\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(401, body);\n        }\n        if (isCodeInRange(\"403\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(403, body);\n        }\n        if (isCodeInRange(\"404\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(404, body);\n        }\n        if (isCodeInRange(\"409\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(409, body);\n        }\n        if (isCodeInRange(\"422\", response.httpStatusCode)) {\n            const body: HTTPValidationError = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HTTPValidationError\", \"\"\n            ) as HTTPValidationError;\n            throw new ApiException<HTTPValidationError>(422, body);\n        }\n        if (isCodeInRange(\"429\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(429, body);\n        }\n\n        // Work around for missing responses in specification, e.g. for petstore.yaml\n        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {\n            const body: AppPortalAccessOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"AppPortalAccessOut\", \"\"\n            ) as AppPortalAccessOut;\n            return body;\n        }\n\n        let body = await response.body.text();\n        throw new ApiException<string>(response.httpStatusCode, body);\n    }\n\n    /**\n     * Unwraps the actual response sent by the server from the response context and deserializes the response content\n     * to the expected objects\n     *\n     * @params response Response returned by the server for a request to v1AuthenticationCreateMessageToken\n     * @throws ApiException if the response code was not in [200, 299]\n     */\n     public async v1AuthenticationCreateMessageToken(response: ResponseContext): Promise<AuthTokenOut > {\n        const contentType = ObjectSerializer.normalizeMediaType(response.headers[\"content-type\"]);\n\n        if (isCodeInRange(\"200\", response.httpStatusCode)) {\n            const body: AuthTokenOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"AuthTokenOut\", \"\"\n            ) as AuthTokenOut;\n            return body;\n        }\n        if (isCodeInRange(\"400\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(400, body);\n        }\n        if (isCodeInRange(\"401\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(401, body);\n        }\n        if (isCodeInRange(\"403\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(403, body);\n        }\n        if (isCodeInRange(\"404\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(404, body);\n        }\n        if (isCodeInRange(\"409\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(409, body);\n        }\n        if (isCodeInRange(\"422\", response.httpStatusCode)) {\n            const body: HTTPValidationError = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HTTPValidationError\", \"\"\n            ) as HTTPValidationError;\n            throw new ApiException<HTTPValidationError>(422, body);\n        }\n        if (isCodeInRange(\"429\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(429, body);\n        }\n\n        // Work around for missing responses in specification, e.g. for petstore.yaml\n        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {\n            const body: AuthTokenOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"AuthTokenOut\", \"\"\n            ) as AuthTokenOut;\n            return body;\n        }\n\n        let body = await response.body.text();\n        throw new ApiException<string>(response.httpStatusCode, body);\n    }\n\n    /**\n     * Unwraps the actual response sent by the server from the response context and deserializes the response content\n     * to the expected objects\n     *\n     * @params response Response returned by the server for a request to v1AuthenticationDashboardAccess\n     * @throws ApiException if the response code was not in [200, 299]\n     */\n     public async v1AuthenticationDashboardAccess(response: ResponseContext): Promise<DashboardAccessOut > {\n        const contentType = ObjectSerializer.normalizeMediaType(response.headers[\"content-type\"]);\n\n        if (isCodeInRange(\"200\", response.httpStatusCode)) {\n            const body: DashboardAccessOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"DashboardAccessOut\", \"\"\n            ) as DashboardAccessOut;\n            return body;\n        }\n        if (isCodeInRange(\"400\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(400, body);\n        }\n        if (isCodeInRange(\"401\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(401, body);\n        }\n        if (isCodeInRange(\"403\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(403, body);\n        }\n        if (isCodeInRange(\"404\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(404, body);\n        }\n        if (isCodeInRange(\"409\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(409, body);\n        }\n        if (isCodeInRange(\"422\", response.httpStatusCode)) {\n            const body: HTTPValidationError = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HTTPValidationError\", \"\"\n            ) as HTTPValidationError;\n            throw new ApiException<HTTPValidationError>(422, body);\n        }\n        if (isCodeInRange(\"429\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(429, body);\n        }\n\n        // Work around for missing responses in specification, e.g. for petstore.yaml\n        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {\n            const body: DashboardAccessOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"DashboardAccessOut\", \"\"\n            ) as DashboardAccessOut;\n            return body;\n        }\n\n        let body = await response.body.text();\n        throw new ApiException<string>(response.httpStatusCode, body);\n    }\n\n    /**\n     * Unwraps the actual response sent by the server from the response context and deserializes the response content\n     * to the expected objects\n     *\n     * @params response Response returned by the server for a request to v1AuthenticationExchangeOneTimeToken\n     * @throws ApiException if the response code was not in [200, 299]\n     */\n     public async v1AuthenticationExchangeOneTimeToken(response: ResponseContext): Promise<OneTimeTokenOut > {\n        const contentType = ObjectSerializer.normalizeMediaType(response.headers[\"content-type\"]);\n\n        if (isCodeInRange(\"200\", response.httpStatusCode)) {\n            const body: OneTimeTokenOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"OneTimeTokenOut\", \"\"\n            ) as OneTimeTokenOut;\n            return body;\n        }\n        if (isCodeInRange(\"400\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(400, body);\n        }\n        if (isCodeInRange(\"401\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(401, body);\n        }\n        if (isCodeInRange(\"403\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(403, body);\n        }\n        if (isCodeInRange(\"404\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(404, body);\n        }\n        if (isCodeInRange(\"409\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(409, body);\n        }\n        if (isCodeInRange(\"422\", response.httpStatusCode)) {\n            const body: HTTPValidationError = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HTTPValidationError\", \"\"\n            ) as HTTPValidationError;\n            throw new ApiException<HTTPValidationError>(422, body);\n        }\n        if (isCodeInRange(\"429\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(429, body);\n        }\n\n        // Work around for missing responses in specification, e.g. for petstore.yaml\n        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {\n            const body: OneTimeTokenOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"OneTimeTokenOut\", \"\"\n            ) as OneTimeTokenOut;\n            return body;\n        }\n\n        let body = await response.body.text();\n        throw new ApiException<string>(response.httpStatusCode, body);\n    }\n\n    /**\n     * Unwraps the actual response sent by the server from the response context and deserializes the response content\n     * to the expected objects\n     *\n     * @params response Response returned by the server for a request to v1AuthenticationExpireAll\n     * @throws ApiException if the response code was not in [200, 299]\n     */\n     public async v1AuthenticationExpireAll(response: ResponseContext): Promise<void > {\n        const contentType = ObjectSerializer.normalizeMediaType(response.headers[\"content-type\"]);\n\n        if (isCodeInRange(\"204\", response.httpStatusCode)) {\n            return;\n        }\n        if (isCodeInRange(\"400\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(400, body);\n        }\n        if (isCodeInRange(\"401\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(401, body);\n        }\n        if (isCodeInRange(\"403\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(403, body);\n        }\n        if (isCodeInRange(\"404\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(404, body);\n        }\n        if (isCodeInRange(\"409\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(409, body);\n        }\n        if (isCodeInRange(\"422\", response.httpStatusCode)) {\n            const body: HTTPValidationError = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HTTPValidationError\", \"\"\n            ) as HTTPValidationError;\n            throw new ApiException<HTTPValidationError>(422, body);\n        }\n        if (isCodeInRange(\"429\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(429, body);\n        }\n\n        // Work around for missing responses in specification, e.g. for petstore.yaml\n        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {\n            const body: void = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"void\", \"\"\n            ) as void;\n            return body;\n        }\n\n        let body = await response.body.text();\n        throw new ApiException<string>(response.httpStatusCode, body);\n    }\n\n    /**\n     * Unwraps the actual response sent by the server from the response context and deserializes the response content\n     * to the expected objects\n     *\n     * @params response Response returned by the server for a request to v1AuthenticationLogout\n     * @throws ApiException if the response code was not in [200, 299]\n     */\n     public async v1AuthenticationLogout(response: ResponseContext): Promise<void > {\n        const contentType = ObjectSerializer.normalizeMediaType(response.headers[\"content-type\"]);\n\n        if (isCodeInRange(\"204\", response.httpStatusCode)) {\n            return;\n        }\n        if (isCodeInRange(\"400\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(400, body);\n        }\n        if (isCodeInRange(\"401\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(401, body);\n        }\n        if (isCodeInRange(\"403\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(403, body);\n        }\n        if (isCodeInRange(\"404\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(404, body);\n        }\n        if (isCodeInRange(\"409\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(409, body);\n        }\n        if (isCodeInRange(\"422\", response.httpStatusCode)) {\n            const body: HTTPValidationError = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HTTPValidationError\", \"\"\n            ) as HTTPValidationError;\n            throw new ApiException<HTTPValidationError>(422, body);\n        }\n        if (isCodeInRange(\"429\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(429, body);\n        }\n\n        // Work around for missing responses in specification, e.g. for petstore.yaml\n        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {\n            const body: void = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"void\", \"\"\n            ) as void;\n            return body;\n        }\n\n        let body = await response.body.text();\n        throw new ApiException<string>(response.httpStatusCode, body);\n    }\n\n}\n"],"names":[],"mappings":"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"}},
    {"offset": {"line": 1125, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1129, "column": 0}, "map": {"version":3,"sources":["turbopack://[project]/node_modules/svix/src/openapi/apis/BackgroundTasksApi.ts"],"sourcesContent":["// TODO: better import syntax?\nimport { BaseAPIRequestFactory, RequiredError } from './baseapi';\nimport {Configuration} from '../configuration';\nimport { RequestContext, HttpMethod, ResponseContext, HttpFile} from '../http/http';\nimport {ObjectSerializer} from '../models/ObjectSerializer';\nimport {ApiException} from './exception';\nimport {isCodeInRange} from '../util';\n\nimport { BackgroundTaskOut } from '../models/BackgroundTaskOut';\nimport { BackgroundTaskStatus } from '../models/BackgroundTaskStatus';\nimport { BackgroundTaskType } from '../models/BackgroundTaskType';\nimport { HTTPValidationError } from '../models/HTTPValidationError';\nimport { HttpErrorOut } from '../models/HttpErrorOut';\nimport { ListResponseBackgroundTaskOut } from '../models/ListResponseBackgroundTaskOut';\nimport { Ordering } from '../models/Ordering';\n\n/**\n * no description\n */\nexport class BackgroundTasksApiRequestFactory extends BaseAPIRequestFactory {\n\n    /**\n     * Get a background task by ID.\n     * Get Background Task\n     * @param taskId \n     */\n    public async getBackgroundTask(taskId: string, _options?: Configuration): Promise<RequestContext> {\n        let _config = _options || this.configuration;\n\n        // verify required parameter 'taskId' is not null or undefined\n        if (taskId === null || taskId === undefined) {\n            throw new RequiredError('Required parameter taskId was null or undefined when calling getBackgroundTask.');\n        }\n\n\n        // Path Params\n        const localVarPath = '/api/v1/background-task/{task_id}'\n            .replace('{' + 'task_id' + '}', encodeURIComponent(String(taskId)));\n\n        // Make Request Context\n        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.GET);\n        requestContext.setHeaderParam(\"Accept\", \"application/json, */*;q=0.8\")\n        const randomId = Math.floor(Math.random() * Math.pow(2, 32))\n        requestContext.setHeaderParam(\"svix-req-id\", randomId.toString())\n\n        // Query Params\n\n        // Header Params\n\n        // Form Params\n\n\n        // Body Params\n\n        let authMethod = null;\n        // Apply auth methods\n        authMethod = _config.authMethods[\"HTTPBearer\"]\n        if (authMethod) {\n            await authMethod.applySecurityAuthentication(requestContext);\n        }\n\n        return requestContext;\n    }\n\n    /**\n     * List background tasks executed in the past 90 days.\n     * List Background Tasks\n     * @param status Filter the response based on the status\n     * @param task Filter the response based on the type\n     * @param limit Limit the number of returned items\n     * @param iterator The iterator returned from a prior invocation\n     * @param order The sorting order of the returned items\n     */\n    public async listBackgroundTasks(status?: BackgroundTaskStatus, task?: BackgroundTaskType, limit?: number, iterator?: string, order?: Ordering, _options?: Configuration): Promise<RequestContext> {\n        let _config = _options || this.configuration;\n\n\n\n\n\n\n        // Path Params\n        const localVarPath = '/api/v1/background-task';\n\n        // Make Request Context\n        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.GET);\n        requestContext.setHeaderParam(\"Accept\", \"application/json, */*;q=0.8\")\n        const randomId = Math.floor(Math.random() * Math.pow(2, 32))\n        requestContext.setHeaderParam(\"svix-req-id\", randomId.toString())\n\n        // Query Params\n        if (status !== undefined) {\n            requestContext.setQueryParam(\"status\", ObjectSerializer.serialize(status, \"BackgroundTaskStatus\", \"\"));\n        }\n        if (task !== undefined) {\n            requestContext.setQueryParam(\"task\", ObjectSerializer.serialize(task, \"BackgroundTaskType\", \"\"));\n        }\n        if (limit !== undefined) {\n            requestContext.setQueryParam(\"limit\", ObjectSerializer.serialize(limit, \"number\", \"uint64\"));\n        }\n        if (iterator !== undefined) {\n            requestContext.setQueryParam(\"iterator\", ObjectSerializer.serialize(iterator, \"string\", \"\"));\n        }\n        if (order !== undefined) {\n            requestContext.setQueryParam(\"order\", ObjectSerializer.serialize(order, \"Ordering\", \"\"));\n        }\n\n        // Header Params\n\n        // Form Params\n\n\n        // Body Params\n\n        let authMethod = null;\n        // Apply auth methods\n        authMethod = _config.authMethods[\"HTTPBearer\"]\n        if (authMethod) {\n            await authMethod.applySecurityAuthentication(requestContext);\n        }\n\n        return requestContext;\n    }\n\n}\n\nexport class BackgroundTasksApiResponseProcessor {\n\n    /**\n     * Unwraps the actual response sent by the server from the response context and deserializes the response content\n     * to the expected objects\n     *\n     * @params response Response returned by the server for a request to getBackgroundTask\n     * @throws ApiException if the response code was not in [200, 299]\n     */\n     public async getBackgroundTask(response: ResponseContext): Promise<BackgroundTaskOut > {\n        const contentType = ObjectSerializer.normalizeMediaType(response.headers[\"content-type\"]);\n\n        if (isCodeInRange(\"200\", response.httpStatusCode)) {\n            const body: BackgroundTaskOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"BackgroundTaskOut\", \"\"\n            ) as BackgroundTaskOut;\n            return body;\n        }\n        if (isCodeInRange(\"400\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(400, body);\n        }\n        if (isCodeInRange(\"401\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(401, body);\n        }\n        if (isCodeInRange(\"403\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(403, body);\n        }\n        if (isCodeInRange(\"404\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(404, body);\n        }\n        if (isCodeInRange(\"409\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(409, body);\n        }\n        if (isCodeInRange(\"422\", response.httpStatusCode)) {\n            const body: HTTPValidationError = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HTTPValidationError\", \"\"\n            ) as HTTPValidationError;\n            throw new ApiException<HTTPValidationError>(422, body);\n        }\n        if (isCodeInRange(\"429\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(429, body);\n        }\n\n        // Work around for missing responses in specification, e.g. for petstore.yaml\n        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {\n            const body: BackgroundTaskOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"BackgroundTaskOut\", \"\"\n            ) as BackgroundTaskOut;\n            return body;\n        }\n\n        let body = await response.body.text();\n        throw new ApiException<string>(response.httpStatusCode, body);\n    }\n\n    /**\n     * Unwraps the actual response sent by the server from the response context and deserializes the response content\n     * to the expected objects\n     *\n     * @params response Response returned by the server for a request to listBackgroundTasks\n     * @throws ApiException if the response code was not in [200, 299]\n     */\n     public async listBackgroundTasks(response: ResponseContext): Promise<ListResponseBackgroundTaskOut > {\n        const contentType = ObjectSerializer.normalizeMediaType(response.headers[\"content-type\"]);\n\n        if (isCodeInRange(\"200\", response.httpStatusCode)) {\n            const body: ListResponseBackgroundTaskOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"ListResponseBackgroundTaskOut\", \"\"\n            ) as ListResponseBackgroundTaskOut;\n            return body;\n        }\n        if (isCodeInRange(\"400\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(400, body);\n        }\n        if (isCodeInRange(\"401\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(401, body);\n        }\n        if (isCodeInRange(\"403\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(403, body);\n        }\n        if (isCodeInRange(\"404\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(404, body);\n        }\n        if (isCodeInRange(\"409\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(409, body);\n        }\n        if (isCodeInRange(\"422\", response.httpStatusCode)) {\n            const body: HTTPValidationError = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HTTPValidationError\", \"\"\n            ) as HTTPValidationError;\n            throw new ApiException<HTTPValidationError>(422, body);\n        }\n        if (isCodeInRange(\"429\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(429, body);\n        }\n\n        // Work around for missing responses in specification, e.g. for petstore.yaml\n        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {\n            const body: ListResponseBackgroundTaskOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"ListResponseBackgroundTaskOut\", \"\"\n            ) as ListResponseBackgroundTaskOut;\n            return body;\n        }\n\n        let body = await response.body.text();\n        throw new ApiException<string>(response.httpStatusCode, body);\n    }\n\n}\n"],"names":[],"mappings":"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"}},
    {"offset": {"line": 1308, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1312, "column": 0}, "map": {"version":3,"sources":["turbopack://[project]/node_modules/svix/src/openapi/apis/BroadcastApi.ts"],"sourcesContent":["// TODO: better import syntax?\nimport { BaseAPIRequestFactory, RequiredError } from './baseapi';\nimport {Configuration} from '../configuration';\nimport { RequestContext, HttpMethod, ResponseContext, HttpFile} from '../http/http';\nimport {ObjectSerializer} from '../models/ObjectSerializer';\nimport {ApiException} from './exception';\nimport {isCodeInRange} from '../util';\n\nimport { HTTPValidationError } from '../models/HTTPValidationError';\nimport { HttpErrorOut } from '../models/HttpErrorOut';\nimport { MessageBroadcastIn } from '../models/MessageBroadcastIn';\nimport { MessageBroadcastOut } from '../models/MessageBroadcastOut';\n\n/**\n * no description\n */\nexport class BroadcastApiRequestFactory extends BaseAPIRequestFactory {\n\n    /**\n     * Creates a background task to send the same message to each application in your organization\n     * Create Broadcast Message\n     * @param messageBroadcastIn \n     * @param idempotencyKey The request&#39;s idempotency key\n     */\n    public async createBroadcastMessage(messageBroadcastIn: MessageBroadcastIn, idempotencyKey?: string, _options?: Configuration): Promise<RequestContext> {\n        let _config = _options || this.configuration;\n\n        // verify required parameter 'messageBroadcastIn' is not null or undefined\n        if (messageBroadcastIn === null || messageBroadcastIn === undefined) {\n            throw new RequiredError('Required parameter messageBroadcastIn was null or undefined when calling createBroadcastMessage.');\n        }\n\n\n\n        // Path Params\n        const localVarPath = '/api/v1/msg/broadcast';\n\n        // Make Request Context\n        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.POST);\n        requestContext.setHeaderParam(\"Accept\", \"application/json, */*;q=0.8\")\n        const randomId = Math.floor(Math.random() * Math.pow(2, 32))\n        requestContext.setHeaderParam(\"svix-req-id\", randomId.toString())\n\n        // Query Params\n\n        // Header Params\n        if (idempotencyKey !== undefined) {\n            requestContext.setHeaderParam(\"idempotency-key\", ObjectSerializer.serialize(idempotencyKey, \"string\", \"\"));\n        }\n\n        // Form Params\n\n\n        // Body Params\n        const contentType = ObjectSerializer.getPreferredMediaType([\n            \"application/json\"\n        ]);\n        requestContext.setHeaderParam(\"Content-Type\", contentType);\n        const serializedBody = ObjectSerializer.stringify(\n            ObjectSerializer.serialize(messageBroadcastIn, \"MessageBroadcastIn\", \"\"),\n            contentType\n        );\n        requestContext.setBody(serializedBody);\n\n        let authMethod = null;\n        // Apply auth methods\n        authMethod = _config.authMethods[\"HTTPBearer\"]\n        if (authMethod) {\n            await authMethod.applySecurityAuthentication(requestContext);\n        }\n\n        return requestContext;\n    }\n\n}\n\nexport class BroadcastApiResponseProcessor {\n\n    /**\n     * Unwraps the actual response sent by the server from the response context and deserializes the response content\n     * to the expected objects\n     *\n     * @params response Response returned by the server for a request to createBroadcastMessage\n     * @throws ApiException if the response code was not in [200, 299]\n     */\n     public async createBroadcastMessage(response: ResponseContext): Promise<MessageBroadcastOut > {\n        const contentType = ObjectSerializer.normalizeMediaType(response.headers[\"content-type\"]);\n\n        if (isCodeInRange(\"202\", response.httpStatusCode)) {\n            const body: MessageBroadcastOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"MessageBroadcastOut\", \"\"\n            ) as MessageBroadcastOut;\n            return body;\n        }\n        if (isCodeInRange(\"400\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(400, body);\n        }\n        if (isCodeInRange(\"401\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(401, body);\n        }\n        if (isCodeInRange(\"403\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(403, body);\n        }\n        if (isCodeInRange(\"404\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(404, body);\n        }\n        if (isCodeInRange(\"409\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(409, body);\n        }\n        if (isCodeInRange(\"422\", response.httpStatusCode)) {\n            const body: HTTPValidationError = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HTTPValidationError\", \"\"\n            ) as HTTPValidationError;\n            throw new ApiException<HTTPValidationError>(422, body);\n        }\n        if (isCodeInRange(\"429\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(429, body);\n        }\n\n        // Work around for missing responses in specification, e.g. for petstore.yaml\n        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {\n            const body: MessageBroadcastOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"MessageBroadcastOut\", \"\"\n            ) as MessageBroadcastOut;\n            return body;\n        }\n\n        let body = await response.body.text();\n        throw new ApiException<string>(response.httpStatusCode, body);\n    }\n\n}\n"],"names":[],"mappings":"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"}},
    {"offset": {"line": 1426, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1430, "column": 0}, "map": {"version":3,"sources":["turbopack://[project]/node_modules/svix/src/openapi/apis/EndpointApi.ts"],"sourcesContent":["// TODO: better import syntax?\nimport { BaseAPIRequestFactory, RequiredError } from './baseapi';\nimport {Configuration} from '../configuration';\nimport { RequestContext, HttpMethod, ResponseContext, HttpFile} from '../http/http';\nimport {ObjectSerializer} from '../models/ObjectSerializer';\nimport {ApiException} from './exception';\nimport {isCodeInRange} from '../util';\n\nimport { EndpointHeadersIn } from '../models/EndpointHeadersIn';\nimport { EndpointHeadersOut } from '../models/EndpointHeadersOut';\nimport { EndpointHeadersPatchIn } from '../models/EndpointHeadersPatchIn';\nimport { EndpointIn } from '../models/EndpointIn';\nimport { EndpointMtlsConfigIn } from '../models/EndpointMtlsConfigIn';\nimport { EndpointOauthConfigIn } from '../models/EndpointOauthConfigIn';\nimport { EndpointOut } from '../models/EndpointOut';\nimport { EndpointPatch } from '../models/EndpointPatch';\nimport { EndpointSecretOut } from '../models/EndpointSecretOut';\nimport { EndpointSecretRotateIn } from '../models/EndpointSecretRotateIn';\nimport { EndpointStats } from '../models/EndpointStats';\nimport { EndpointTransformationIn } from '../models/EndpointTransformationIn';\nimport { EndpointTransformationOut } from '../models/EndpointTransformationOut';\nimport { EndpointTransformationSimulateIn } from '../models/EndpointTransformationSimulateIn';\nimport { EndpointTransformationSimulateOut } from '../models/EndpointTransformationSimulateOut';\nimport { EndpointUpdate } from '../models/EndpointUpdate';\nimport { EventExampleIn } from '../models/EventExampleIn';\nimport { HTTPValidationError } from '../models/HTTPValidationError';\nimport { HttpErrorOut } from '../models/HttpErrorOut';\nimport { ListResponseEndpointOut } from '../models/ListResponseEndpointOut';\nimport { ListResponseSinkOut } from '../models/ListResponseSinkOut';\nimport { MessageOut } from '../models/MessageOut';\nimport { Ordering } from '../models/Ordering';\nimport { RecoverIn } from '../models/RecoverIn';\nimport { RecoverOut } from '../models/RecoverOut';\nimport { ReplayIn } from '../models/ReplayIn';\nimport { ReplayOut } from '../models/ReplayOut';\nimport { SinkIn } from '../models/SinkIn';\nimport { SinkOut } from '../models/SinkOut';\n\n/**\n * no description\n */\nexport class EndpointApiRequestFactory extends BaseAPIRequestFactory {\n\n    /**\n     * Create a new endpoint for the application.  When `secret` is `null` the secret is automatically generated (recommended)\n     * Create Endpoint\n     * @param appId The app&#39;s ID or UID\n     * @param endpointIn \n     * @param idempotencyKey The request&#39;s idempotency key\n     */\n    public async v1EndpointCreate(appId: string, endpointIn: EndpointIn, idempotencyKey?: string, _options?: Configuration): Promise<RequestContext> {\n        let _config = _options || this.configuration;\n\n        // verify required parameter 'appId' is not null or undefined\n        if (appId === null || appId === undefined) {\n            throw new RequiredError('Required parameter appId was null or undefined when calling v1EndpointCreate.');\n        }\n\n\n        // verify required parameter 'endpointIn' is not null or undefined\n        if (endpointIn === null || endpointIn === undefined) {\n            throw new RequiredError('Required parameter endpointIn was null or undefined when calling v1EndpointCreate.');\n        }\n\n\n\n        // Path Params\n        const localVarPath = '/api/v1/app/{app_id}/endpoint'\n            .replace('{' + 'app_id' + '}', encodeURIComponent(String(appId)));\n\n        // Make Request Context\n        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.POST);\n        requestContext.setHeaderParam(\"Accept\", \"application/json, */*;q=0.8\")\n        const randomId = Math.floor(Math.random() * Math.pow(2, 32))\n        requestContext.setHeaderParam(\"svix-req-id\", randomId.toString())\n\n        // Query Params\n\n        // Header Params\n        if (idempotencyKey !== undefined) {\n            requestContext.setHeaderParam(\"idempotency-key\", ObjectSerializer.serialize(idempotencyKey, \"string\", \"\"));\n        }\n\n        // Form Params\n\n\n        // Body Params\n        const contentType = ObjectSerializer.getPreferredMediaType([\n            \"application/json\"\n        ]);\n        requestContext.setHeaderParam(\"Content-Type\", contentType);\n        const serializedBody = ObjectSerializer.stringify(\n            ObjectSerializer.serialize(endpointIn, \"EndpointIn\", \"\"),\n            contentType\n        );\n        requestContext.setBody(serializedBody);\n\n        let authMethod = null;\n        // Apply auth methods\n        authMethod = _config.authMethods[\"HTTPBearer\"]\n        if (authMethod) {\n            await authMethod.applySecurityAuthentication(requestContext);\n        }\n\n        return requestContext;\n    }\n\n    /**\n     * Delete an endpoint.\n     * Delete Endpoint\n     * @param appId The app&#39;s ID or UID\n     * @param endpointId The ep&#39;s ID or UID\n     */\n    public async v1EndpointDelete(appId: string, endpointId: string, _options?: Configuration): Promise<RequestContext> {\n        let _config = _options || this.configuration;\n\n        // verify required parameter 'appId' is not null or undefined\n        if (appId === null || appId === undefined) {\n            throw new RequiredError('Required parameter appId was null or undefined when calling v1EndpointDelete.');\n        }\n\n\n        // verify required parameter 'endpointId' is not null or undefined\n        if (endpointId === null || endpointId === undefined) {\n            throw new RequiredError('Required parameter endpointId was null or undefined when calling v1EndpointDelete.');\n        }\n\n\n        // Path Params\n        const localVarPath = '/api/v1/app/{app_id}/endpoint/{endpoint_id}'\n            .replace('{' + 'app_id' + '}', encodeURIComponent(String(appId)))\n            .replace('{' + 'endpoint_id' + '}', encodeURIComponent(String(endpointId)));\n\n        // Make Request Context\n        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.DELETE);\n        requestContext.setHeaderParam(\"Accept\", \"application/json, */*;q=0.8\")\n        const randomId = Math.floor(Math.random() * Math.pow(2, 32))\n        requestContext.setHeaderParam(\"svix-req-id\", randomId.toString())\n\n        // Query Params\n\n        // Header Params\n\n        // Form Params\n\n\n        // Body Params\n\n        let authMethod = null;\n        // Apply auth methods\n        authMethod = _config.authMethods[\"HTTPBearer\"]\n        if (authMethod) {\n            await authMethod.applySecurityAuthentication(requestContext);\n        }\n\n        return requestContext;\n    }\n\n    /**\n     * Delete endpoint mTLS configuration\n     * Delete Endpoint Mtls Config\n     * @param appId The app&#39;s ID or UID\n     * @param endpointId The ep&#39;s ID or UID\n     */\n    public async v1EndpointDeleteMtlsConfig(appId: string, endpointId: string, _options?: Configuration): Promise<RequestContext> {\n        let _config = _options || this.configuration;\n\n        // verify required parameter 'appId' is not null or undefined\n        if (appId === null || appId === undefined) {\n            throw new RequiredError('Required parameter appId was null or undefined when calling v1EndpointDeleteMtlsConfig.');\n        }\n\n\n        // verify required parameter 'endpointId' is not null or undefined\n        if (endpointId === null || endpointId === undefined) {\n            throw new RequiredError('Required parameter endpointId was null or undefined when calling v1EndpointDeleteMtlsConfig.');\n        }\n\n\n        // Path Params\n        const localVarPath = '/api/v1/app/{app_id}/endpoint/{endpoint_id}/mtls'\n            .replace('{' + 'app_id' + '}', encodeURIComponent(String(appId)))\n            .replace('{' + 'endpoint_id' + '}', encodeURIComponent(String(endpointId)));\n\n        // Make Request Context\n        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.DELETE);\n        requestContext.setHeaderParam(\"Accept\", \"application/json, */*;q=0.8\")\n        const randomId = Math.floor(Math.random() * Math.pow(2, 32))\n        requestContext.setHeaderParam(\"svix-req-id\", randomId.toString())\n\n        // Query Params\n\n        // Header Params\n\n        // Form Params\n\n\n        // Body Params\n\n        let authMethod = null;\n        // Apply auth methods\n        authMethod = _config.authMethods[\"HTTPBearer\"]\n        if (authMethod) {\n            await authMethod.applySecurityAuthentication(requestContext);\n        }\n\n        return requestContext;\n    }\n\n    /**\n     * Delete endpoint OAuth configuration\n     * Delete Endpoint Oauth Config\n     * @param appId The app&#39;s ID or UID\n     * @param endpointId The ep&#39;s ID or UID\n     */\n    public async v1EndpointDeleteOauthConfig(appId: string, endpointId: string, _options?: Configuration): Promise<RequestContext> {\n        let _config = _options || this.configuration;\n\n        // verify required parameter 'appId' is not null or undefined\n        if (appId === null || appId === undefined) {\n            throw new RequiredError('Required parameter appId was null or undefined when calling v1EndpointDeleteOauthConfig.');\n        }\n\n\n        // verify required parameter 'endpointId' is not null or undefined\n        if (endpointId === null || endpointId === undefined) {\n            throw new RequiredError('Required parameter endpointId was null or undefined when calling v1EndpointDeleteOauthConfig.');\n        }\n\n\n        // Path Params\n        const localVarPath = '/api/v1/app/{app_id}/endpoint/{endpoint_id}/oauth'\n            .replace('{' + 'app_id' + '}', encodeURIComponent(String(appId)))\n            .replace('{' + 'endpoint_id' + '}', encodeURIComponent(String(endpointId)));\n\n        // Make Request Context\n        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.DELETE);\n        requestContext.setHeaderParam(\"Accept\", \"application/json, */*;q=0.8\")\n        const randomId = Math.floor(Math.random() * Math.pow(2, 32))\n        requestContext.setHeaderParam(\"svix-req-id\", randomId.toString())\n\n        // Query Params\n\n        // Header Params\n\n        // Form Params\n\n\n        // Body Params\n\n        let authMethod = null;\n        // Apply auth methods\n        authMethod = _config.authMethods[\"HTTPBearer\"]\n        if (authMethod) {\n            await authMethod.applySecurityAuthentication(requestContext);\n        }\n\n        return requestContext;\n    }\n\n    /**\n     * Get an endpoint.\n     * Get Endpoint\n     * @param appId The app&#39;s ID or UID\n     * @param endpointId The ep&#39;s ID or UID\n     */\n    public async v1EndpointGet(appId: string, endpointId: string, _options?: Configuration): Promise<RequestContext> {\n        let _config = _options || this.configuration;\n\n        // verify required parameter 'appId' is not null or undefined\n        if (appId === null || appId === undefined) {\n            throw new RequiredError('Required parameter appId was null or undefined when calling v1EndpointGet.');\n        }\n\n\n        // verify required parameter 'endpointId' is not null or undefined\n        if (endpointId === null || endpointId === undefined) {\n            throw new RequiredError('Required parameter endpointId was null or undefined when calling v1EndpointGet.');\n        }\n\n\n        // Path Params\n        const localVarPath = '/api/v1/app/{app_id}/endpoint/{endpoint_id}'\n            .replace('{' + 'app_id' + '}', encodeURIComponent(String(appId)))\n            .replace('{' + 'endpoint_id' + '}', encodeURIComponent(String(endpointId)));\n\n        // Make Request Context\n        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.GET);\n        requestContext.setHeaderParam(\"Accept\", \"application/json, */*;q=0.8\")\n        const randomId = Math.floor(Math.random() * Math.pow(2, 32))\n        requestContext.setHeaderParam(\"svix-req-id\", randomId.toString())\n\n        // Query Params\n\n        // Header Params\n\n        // Form Params\n\n\n        // Body Params\n\n        let authMethod = null;\n        // Apply auth methods\n        authMethod = _config.authMethods[\"HTTPBearer\"]\n        if (authMethod) {\n            await authMethod.applySecurityAuthentication(requestContext);\n        }\n\n        return requestContext;\n    }\n\n    /**\n     * Get the additional headers to be sent with the webhook\n     * Get Endpoint Headers\n     * @param appId The app&#39;s ID or UID\n     * @param endpointId The ep&#39;s ID or UID\n     */\n    public async v1EndpointGetHeaders(appId: string, endpointId: string, _options?: Configuration): Promise<RequestContext> {\n        let _config = _options || this.configuration;\n\n        // verify required parameter 'appId' is not null or undefined\n        if (appId === null || appId === undefined) {\n            throw new RequiredError('Required parameter appId was null or undefined when calling v1EndpointGetHeaders.');\n        }\n\n\n        // verify required parameter 'endpointId' is not null or undefined\n        if (endpointId === null || endpointId === undefined) {\n            throw new RequiredError('Required parameter endpointId was null or undefined when calling v1EndpointGetHeaders.');\n        }\n\n\n        // Path Params\n        const localVarPath = '/api/v1/app/{app_id}/endpoint/{endpoint_id}/headers'\n            .replace('{' + 'app_id' + '}', encodeURIComponent(String(appId)))\n            .replace('{' + 'endpoint_id' + '}', encodeURIComponent(String(endpointId)));\n\n        // Make Request Context\n        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.GET);\n        requestContext.setHeaderParam(\"Accept\", \"application/json, */*;q=0.8\")\n        const randomId = Math.floor(Math.random() * Math.pow(2, 32))\n        requestContext.setHeaderParam(\"svix-req-id\", randomId.toString())\n\n        // Query Params\n\n        // Header Params\n\n        // Form Params\n\n\n        // Body Params\n\n        let authMethod = null;\n        // Apply auth methods\n        authMethod = _config.authMethods[\"HTTPBearer\"]\n        if (authMethod) {\n            await authMethod.applySecurityAuthentication(requestContext);\n        }\n\n        return requestContext;\n    }\n\n    /**\n     * Get the endpoint's signing secret.  This is used to verify the authenticity of the webhook. For more information please refer to [the consuming webhooks docs](https://docs.svix.com/consuming-webhooks/).\n     * Get Endpoint Secret\n     * @param appId The app&#39;s ID or UID\n     * @param endpointId The ep&#39;s ID or UID\n     */\n    public async v1EndpointGetSecret(appId: string, endpointId: string, _options?: Configuration): Promise<RequestContext> {\n        let _config = _options || this.configuration;\n\n        // verify required parameter 'appId' is not null or undefined\n        if (appId === null || appId === undefined) {\n            throw new RequiredError('Required parameter appId was null or undefined when calling v1EndpointGetSecret.');\n        }\n\n\n        // verify required parameter 'endpointId' is not null or undefined\n        if (endpointId === null || endpointId === undefined) {\n            throw new RequiredError('Required parameter endpointId was null or undefined when calling v1EndpointGetSecret.');\n        }\n\n\n        // Path Params\n        const localVarPath = '/api/v1/app/{app_id}/endpoint/{endpoint_id}/secret'\n            .replace('{' + 'app_id' + '}', encodeURIComponent(String(appId)))\n            .replace('{' + 'endpoint_id' + '}', encodeURIComponent(String(endpointId)));\n\n        // Make Request Context\n        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.GET);\n        requestContext.setHeaderParam(\"Accept\", \"application/json, */*;q=0.8\")\n        const randomId = Math.floor(Math.random() * Math.pow(2, 32))\n        requestContext.setHeaderParam(\"svix-req-id\", randomId.toString())\n\n        // Query Params\n\n        // Header Params\n\n        // Form Params\n\n\n        // Body Params\n\n        let authMethod = null;\n        // Apply auth methods\n        authMethod = _config.authMethods[\"HTTPBearer\"]\n        if (authMethod) {\n            await authMethod.applySecurityAuthentication(requestContext);\n        }\n\n        return requestContext;\n    }\n\n    /**\n     * Get basic statistics for the endpoint.\n     * Endpoint Stats\n     * @param appId The app&#39;s ID or UID\n     * @param endpointId The ep&#39;s ID or UID\n     * @param since Filter the range to data starting from this date\n     * @param until Filter the range to data ending by this date\n     */\n    public async v1EndpointGetStats(appId: string, endpointId: string, since?: Date, until?: Date, _options?: Configuration): Promise<RequestContext> {\n        let _config = _options || this.configuration;\n\n        // verify required parameter 'appId' is not null or undefined\n        if (appId === null || appId === undefined) {\n            throw new RequiredError('Required parameter appId was null or undefined when calling v1EndpointGetStats.');\n        }\n\n\n        // verify required parameter 'endpointId' is not null or undefined\n        if (endpointId === null || endpointId === undefined) {\n            throw new RequiredError('Required parameter endpointId was null or undefined when calling v1EndpointGetStats.');\n        }\n\n\n\n\n        // Path Params\n        const localVarPath = '/api/v1/app/{app_id}/endpoint/{endpoint_id}/stats'\n            .replace('{' + 'app_id' + '}', encodeURIComponent(String(appId)))\n            .replace('{' + 'endpoint_id' + '}', encodeURIComponent(String(endpointId)));\n\n        // Make Request Context\n        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.GET);\n        requestContext.setHeaderParam(\"Accept\", \"application/json, */*;q=0.8\")\n        const randomId = Math.floor(Math.random() * Math.pow(2, 32))\n        requestContext.setHeaderParam(\"svix-req-id\", randomId.toString())\n\n        // Query Params\n        if (since !== undefined) {\n            requestContext.setQueryParam(\"since\", ObjectSerializer.serialize(since, \"Date\", \"date-time\"));\n        }\n        if (until !== undefined) {\n            requestContext.setQueryParam(\"until\", ObjectSerializer.serialize(until, \"Date\", \"date-time\"));\n        }\n\n        // Header Params\n\n        // Form Params\n\n\n        // Body Params\n\n        let authMethod = null;\n        // Apply auth methods\n        authMethod = _config.authMethods[\"HTTPBearer\"]\n        if (authMethod) {\n            await authMethod.applySecurityAuthentication(requestContext);\n        }\n\n        return requestContext;\n    }\n\n    /**\n     * List the application's endpoints.\n     * List Endpoints\n     * @param appId The app&#39;s ID or UID\n     * @param limit Limit the number of returned items\n     * @param iterator The iterator returned from a prior invocation\n     * @param order The sorting order of the returned items\n     */\n    public async v1EndpointList(appId: string, limit?: number, iterator?: string, order?: Ordering, _options?: Configuration): Promise<RequestContext> {\n        let _config = _options || this.configuration;\n\n        // verify required parameter 'appId' is not null or undefined\n        if (appId === null || appId === undefined) {\n            throw new RequiredError('Required parameter appId was null or undefined when calling v1EndpointList.');\n        }\n\n\n\n\n\n        // Path Params\n        const localVarPath = '/api/v1/app/{app_id}/endpoint'\n            .replace('{' + 'app_id' + '}', encodeURIComponent(String(appId)));\n\n        // Make Request Context\n        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.GET);\n        requestContext.setHeaderParam(\"Accept\", \"application/json, */*;q=0.8\")\n        const randomId = Math.floor(Math.random() * Math.pow(2, 32))\n        requestContext.setHeaderParam(\"svix-req-id\", randomId.toString())\n\n        // Query Params\n        if (limit !== undefined) {\n            requestContext.setQueryParam(\"limit\", ObjectSerializer.serialize(limit, \"number\", \"uint64\"));\n        }\n        if (iterator !== undefined) {\n            requestContext.setQueryParam(\"iterator\", ObjectSerializer.serialize(iterator, \"string\", \"\"));\n        }\n        if (order !== undefined) {\n            requestContext.setQueryParam(\"order\", ObjectSerializer.serialize(order, \"Ordering\", \"\"));\n        }\n\n        // Header Params\n\n        // Form Params\n\n\n        // Body Params\n\n        let authMethod = null;\n        // Apply auth methods\n        authMethod = _config.authMethods[\"HTTPBearer\"]\n        if (authMethod) {\n            await authMethod.applySecurityAuthentication(requestContext);\n        }\n\n        return requestContext;\n    }\n\n    /**\n     * Partially update an endpoint.\n     * Patch Endpoint\n     * @param appId The app&#39;s ID or UID\n     * @param endpointId The ep&#39;s ID or UID\n     * @param endpointPatch \n     */\n    public async v1EndpointPatch(appId: string, endpointId: string, endpointPatch: EndpointPatch, _options?: Configuration): Promise<RequestContext> {\n        let _config = _options || this.configuration;\n\n        // verify required parameter 'appId' is not null or undefined\n        if (appId === null || appId === undefined) {\n            throw new RequiredError('Required parameter appId was null or undefined when calling v1EndpointPatch.');\n        }\n\n\n        // verify required parameter 'endpointId' is not null or undefined\n        if (endpointId === null || endpointId === undefined) {\n            throw new RequiredError('Required parameter endpointId was null or undefined when calling v1EndpointPatch.');\n        }\n\n\n        // verify required parameter 'endpointPatch' is not null or undefined\n        if (endpointPatch === null || endpointPatch === undefined) {\n            throw new RequiredError('Required parameter endpointPatch was null or undefined when calling v1EndpointPatch.');\n        }\n\n\n        // Path Params\n        const localVarPath = '/api/v1/app/{app_id}/endpoint/{endpoint_id}'\n            .replace('{' + 'app_id' + '}', encodeURIComponent(String(appId)))\n            .replace('{' + 'endpoint_id' + '}', encodeURIComponent(String(endpointId)));\n\n        // Make Request Context\n        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.PATCH);\n        requestContext.setHeaderParam(\"Accept\", \"application/json, */*;q=0.8\")\n        const randomId = Math.floor(Math.random() * Math.pow(2, 32))\n        requestContext.setHeaderParam(\"svix-req-id\", randomId.toString())\n\n        // Query Params\n\n        // Header Params\n\n        // Form Params\n\n\n        // Body Params\n        const contentType = ObjectSerializer.getPreferredMediaType([\n            \"application/json\"\n        ]);\n        requestContext.setHeaderParam(\"Content-Type\", contentType);\n        const serializedBody = ObjectSerializer.stringify(\n            ObjectSerializer.serialize(endpointPatch, \"EndpointPatch\", \"\"),\n            contentType\n        );\n        requestContext.setBody(serializedBody);\n\n        let authMethod = null;\n        // Apply auth methods\n        authMethod = _config.authMethods[\"HTTPBearer\"]\n        if (authMethod) {\n            await authMethod.applySecurityAuthentication(requestContext);\n        }\n\n        return requestContext;\n    }\n\n    /**\n     * Partially set the additional headers to be sent with the webhook\n     * Patch Endpoint Headers\n     * @param appId The app&#39;s ID or UID\n     * @param endpointId The ep&#39;s ID or UID\n     * @param endpointHeadersPatchIn \n     */\n    public async v1EndpointPatchHeaders(appId: string, endpointId: string, endpointHeadersPatchIn: EndpointHeadersPatchIn, _options?: Configuration): Promise<RequestContext> {\n        let _config = _options || this.configuration;\n\n        // verify required parameter 'appId' is not null or undefined\n        if (appId === null || appId === undefined) {\n            throw new RequiredError('Required parameter appId was null or undefined when calling v1EndpointPatchHeaders.');\n        }\n\n\n        // verify required parameter 'endpointId' is not null or undefined\n        if (endpointId === null || endpointId === undefined) {\n            throw new RequiredError('Required parameter endpointId was null or undefined when calling v1EndpointPatchHeaders.');\n        }\n\n\n        // verify required parameter 'endpointHeadersPatchIn' is not null or undefined\n        if (endpointHeadersPatchIn === null || endpointHeadersPatchIn === undefined) {\n            throw new RequiredError('Required parameter endpointHeadersPatchIn was null or undefined when calling v1EndpointPatchHeaders.');\n        }\n\n\n        // Path Params\n        const localVarPath = '/api/v1/app/{app_id}/endpoint/{endpoint_id}/headers'\n            .replace('{' + 'app_id' + '}', encodeURIComponent(String(appId)))\n            .replace('{' + 'endpoint_id' + '}', encodeURIComponent(String(endpointId)));\n\n        // Make Request Context\n        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.PATCH);\n        requestContext.setHeaderParam(\"Accept\", \"application/json, */*;q=0.8\")\n        const randomId = Math.floor(Math.random() * Math.pow(2, 32))\n        requestContext.setHeaderParam(\"svix-req-id\", randomId.toString())\n\n        // Query Params\n\n        // Header Params\n\n        // Form Params\n\n\n        // Body Params\n        const contentType = ObjectSerializer.getPreferredMediaType([\n            \"application/json\"\n        ]);\n        requestContext.setHeaderParam(\"Content-Type\", contentType);\n        const serializedBody = ObjectSerializer.stringify(\n            ObjectSerializer.serialize(endpointHeadersPatchIn, \"EndpointHeadersPatchIn\", \"\"),\n            contentType\n        );\n        requestContext.setBody(serializedBody);\n\n        let authMethod = null;\n        // Apply auth methods\n        authMethod = _config.authMethods[\"HTTPBearer\"]\n        if (authMethod) {\n            await authMethod.applySecurityAuthentication(requestContext);\n        }\n\n        return requestContext;\n    }\n\n    /**\n     * Resend all failed messages since a given time.\n     * Recover Failed Webhooks\n     * @param appId The app&#39;s ID or UID\n     * @param endpointId The ep&#39;s ID or UID\n     * @param recoverIn \n     * @param idempotencyKey The request&#39;s idempotency key\n     */\n    public async v1EndpointRecover(appId: string, endpointId: string, recoverIn: RecoverIn, idempotencyKey?: string, _options?: Configuration): Promise<RequestContext> {\n        let _config = _options || this.configuration;\n\n        // verify required parameter 'appId' is not null or undefined\n        if (appId === null || appId === undefined) {\n            throw new RequiredError('Required parameter appId was null or undefined when calling v1EndpointRecover.');\n        }\n\n\n        // verify required parameter 'endpointId' is not null or undefined\n        if (endpointId === null || endpointId === undefined) {\n            throw new RequiredError('Required parameter endpointId was null or undefined when calling v1EndpointRecover.');\n        }\n\n\n        // verify required parameter 'recoverIn' is not null or undefined\n        if (recoverIn === null || recoverIn === undefined) {\n            throw new RequiredError('Required parameter recoverIn was null or undefined when calling v1EndpointRecover.');\n        }\n\n\n\n        // Path Params\n        const localVarPath = '/api/v1/app/{app_id}/endpoint/{endpoint_id}/recover'\n            .replace('{' + 'app_id' + '}', encodeURIComponent(String(appId)))\n            .replace('{' + 'endpoint_id' + '}', encodeURIComponent(String(endpointId)));\n\n        // Make Request Context\n        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.POST);\n        requestContext.setHeaderParam(\"Accept\", \"application/json, */*;q=0.8\")\n        const randomId = Math.floor(Math.random() * Math.pow(2, 32))\n        requestContext.setHeaderParam(\"svix-req-id\", randomId.toString())\n\n        // Query Params\n\n        // Header Params\n        if (idempotencyKey !== undefined) {\n            requestContext.setHeaderParam(\"idempotency-key\", ObjectSerializer.serialize(idempotencyKey, \"string\", \"\"));\n        }\n\n        // Form Params\n\n\n        // Body Params\n        const contentType = ObjectSerializer.getPreferredMediaType([\n            \"application/json\"\n        ]);\n        requestContext.setHeaderParam(\"Content-Type\", contentType);\n        const serializedBody = ObjectSerializer.stringify(\n            ObjectSerializer.serialize(recoverIn, \"RecoverIn\", \"\"),\n            contentType\n        );\n        requestContext.setBody(serializedBody);\n\n        let authMethod = null;\n        // Apply auth methods\n        authMethod = _config.authMethods[\"HTTPBearer\"]\n        if (authMethod) {\n            await authMethod.applySecurityAuthentication(requestContext);\n        }\n\n        return requestContext;\n    }\n\n    /**\n     * Replays messages to the endpoint. Only messages that were created after `since` will be sent. Messages that were previously sent to the endpoint are not resent.\n     * Replay Missing Webhooks\n     * @param appId The app&#39;s ID or UID\n     * @param endpointId The ep&#39;s ID or UID\n     * @param replayIn \n     * @param idempotencyKey The request&#39;s idempotency key\n     */\n    public async v1EndpointReplay(appId: string, endpointId: string, replayIn: ReplayIn, idempotencyKey?: string, _options?: Configuration): Promise<RequestContext> {\n        let _config = _options || this.configuration;\n\n        // verify required parameter 'appId' is not null or undefined\n        if (appId === null || appId === undefined) {\n            throw new RequiredError('Required parameter appId was null or undefined when calling v1EndpointReplay.');\n        }\n\n\n        // verify required parameter 'endpointId' is not null or undefined\n        if (endpointId === null || endpointId === undefined) {\n            throw new RequiredError('Required parameter endpointId was null or undefined when calling v1EndpointReplay.');\n        }\n\n\n        // verify required parameter 'replayIn' is not null or undefined\n        if (replayIn === null || replayIn === undefined) {\n            throw new RequiredError('Required parameter replayIn was null or undefined when calling v1EndpointReplay.');\n        }\n\n\n\n        // Path Params\n        const localVarPath = '/api/v1/app/{app_id}/endpoint/{endpoint_id}/replay-missing'\n            .replace('{' + 'app_id' + '}', encodeURIComponent(String(appId)))\n            .replace('{' + 'endpoint_id' + '}', encodeURIComponent(String(endpointId)));\n\n        // Make Request Context\n        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.POST);\n        requestContext.setHeaderParam(\"Accept\", \"application/json, */*;q=0.8\")\n        const randomId = Math.floor(Math.random() * Math.pow(2, 32))\n        requestContext.setHeaderParam(\"svix-req-id\", randomId.toString())\n\n        // Query Params\n\n        // Header Params\n        if (idempotencyKey !== undefined) {\n            requestContext.setHeaderParam(\"idempotency-key\", ObjectSerializer.serialize(idempotencyKey, \"string\", \"\"));\n        }\n\n        // Form Params\n\n\n        // Body Params\n        const contentType = ObjectSerializer.getPreferredMediaType([\n            \"application/json\"\n        ]);\n        requestContext.setHeaderParam(\"Content-Type\", contentType);\n        const serializedBody = ObjectSerializer.stringify(\n            ObjectSerializer.serialize(replayIn, \"ReplayIn\", \"\"),\n            contentType\n        );\n        requestContext.setBody(serializedBody);\n\n        let authMethod = null;\n        // Apply auth methods\n        authMethod = _config.authMethods[\"HTTPBearer\"]\n        if (authMethod) {\n            await authMethod.applySecurityAuthentication(requestContext);\n        }\n\n        return requestContext;\n    }\n\n    /**\n     * Rotates the endpoint's signing secret.  The previous secret will be valid for the next 24 hours.\n     * Rotate Endpoint Secret\n     * @param appId The app&#39;s ID or UID\n     * @param endpointId The ep&#39;s ID or UID\n     * @param endpointSecretRotateIn \n     * @param idempotencyKey The request&#39;s idempotency key\n     */\n    public async v1EndpointRotateSecret(appId: string, endpointId: string, endpointSecretRotateIn: EndpointSecretRotateIn, idempotencyKey?: string, _options?: Configuration): Promise<RequestContext> {\n        let _config = _options || this.configuration;\n\n        // verify required parameter 'appId' is not null or undefined\n        if (appId === null || appId === undefined) {\n            throw new RequiredError('Required parameter appId was null or undefined when calling v1EndpointRotateSecret.');\n        }\n\n\n        // verify required parameter 'endpointId' is not null or undefined\n        if (endpointId === null || endpointId === undefined) {\n            throw new RequiredError('Required parameter endpointId was null or undefined when calling v1EndpointRotateSecret.');\n        }\n\n\n        // verify required parameter 'endpointSecretRotateIn' is not null or undefined\n        if (endpointSecretRotateIn === null || endpointSecretRotateIn === undefined) {\n            throw new RequiredError('Required parameter endpointSecretRotateIn was null or undefined when calling v1EndpointRotateSecret.');\n        }\n\n\n\n        // Path Params\n        const localVarPath = '/api/v1/app/{app_id}/endpoint/{endpoint_id}/secret/rotate'\n            .replace('{' + 'app_id' + '}', encodeURIComponent(String(appId)))\n            .replace('{' + 'endpoint_id' + '}', encodeURIComponent(String(endpointId)));\n\n        // Make Request Context\n        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.POST);\n        requestContext.setHeaderParam(\"Accept\", \"application/json, */*;q=0.8\")\n        const randomId = Math.floor(Math.random() * Math.pow(2, 32))\n        requestContext.setHeaderParam(\"svix-req-id\", randomId.toString())\n\n        // Query Params\n\n        // Header Params\n        if (idempotencyKey !== undefined) {\n            requestContext.setHeaderParam(\"idempotency-key\", ObjectSerializer.serialize(idempotencyKey, \"string\", \"\"));\n        }\n\n        // Form Params\n\n\n        // Body Params\n        const contentType = ObjectSerializer.getPreferredMediaType([\n            \"application/json\"\n        ]);\n        requestContext.setHeaderParam(\"Content-Type\", contentType);\n        const serializedBody = ObjectSerializer.stringify(\n            ObjectSerializer.serialize(endpointSecretRotateIn, \"EndpointSecretRotateIn\", \"\"),\n            contentType\n        );\n        requestContext.setBody(serializedBody);\n\n        let authMethod = null;\n        // Apply auth methods\n        authMethod = _config.authMethods[\"HTTPBearer\"]\n        if (authMethod) {\n            await authMethod.applySecurityAuthentication(requestContext);\n        }\n\n        return requestContext;\n    }\n\n    /**\n     * Send an example message for an event\n     * Send Event Type Example Message\n     * @param appId The app&#39;s ID or UID\n     * @param endpointId The ep&#39;s ID or UID\n     * @param eventExampleIn \n     * @param idempotencyKey The request&#39;s idempotency key\n     */\n    public async v1EndpointSendExample(appId: string, endpointId: string, eventExampleIn: EventExampleIn, idempotencyKey?: string, _options?: Configuration): Promise<RequestContext> {\n        let _config = _options || this.configuration;\n\n        // verify required parameter 'appId' is not null or undefined\n        if (appId === null || appId === undefined) {\n            throw new RequiredError('Required parameter appId was null or undefined when calling v1EndpointSendExample.');\n        }\n\n\n        // verify required parameter 'endpointId' is not null or undefined\n        if (endpointId === null || endpointId === undefined) {\n            throw new RequiredError('Required parameter endpointId was null or undefined when calling v1EndpointSendExample.');\n        }\n\n\n        // verify required parameter 'eventExampleIn' is not null or undefined\n        if (eventExampleIn === null || eventExampleIn === undefined) {\n            throw new RequiredError('Required parameter eventExampleIn was null or undefined when calling v1EndpointSendExample.');\n        }\n\n\n\n        // Path Params\n        const localVarPath = '/api/v1/app/{app_id}/endpoint/{endpoint_id}/send-example'\n            .replace('{' + 'app_id' + '}', encodeURIComponent(String(appId)))\n            .replace('{' + 'endpoint_id' + '}', encodeURIComponent(String(endpointId)));\n\n        // Make Request Context\n        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.POST);\n        requestContext.setHeaderParam(\"Accept\", \"application/json, */*;q=0.8\")\n        const randomId = Math.floor(Math.random() * Math.pow(2, 32))\n        requestContext.setHeaderParam(\"svix-req-id\", randomId.toString())\n\n        // Query Params\n\n        // Header Params\n        if (idempotencyKey !== undefined) {\n            requestContext.setHeaderParam(\"idempotency-key\", ObjectSerializer.serialize(idempotencyKey, \"string\", \"\"));\n        }\n\n        // Form Params\n\n\n        // Body Params\n        const contentType = ObjectSerializer.getPreferredMediaType([\n            \"application/json\"\n        ]);\n        requestContext.setHeaderParam(\"Content-Type\", contentType);\n        const serializedBody = ObjectSerializer.stringify(\n            ObjectSerializer.serialize(eventExampleIn, \"EventExampleIn\", \"\"),\n            contentType\n        );\n        requestContext.setBody(serializedBody);\n\n        let authMethod = null;\n        // Apply auth methods\n        authMethod = _config.authMethods[\"HTTPBearer\"]\n        if (authMethod) {\n            await authMethod.applySecurityAuthentication(requestContext);\n        }\n\n        return requestContext;\n    }\n\n    /**\n     * Get the transformation code associated with this endpoint\n     * Get Endpoint Transformation\n     * @param appId The app&#39;s ID or UID\n     * @param endpointId The ep&#39;s ID or UID\n     */\n    public async v1EndpointTransformationGet(appId: string, endpointId: string, _options?: Configuration): Promise<RequestContext> {\n        let _config = _options || this.configuration;\n\n        // verify required parameter 'appId' is not null or undefined\n        if (appId === null || appId === undefined) {\n            throw new RequiredError('Required parameter appId was null or undefined when calling v1EndpointTransformationGet.');\n        }\n\n\n        // verify required parameter 'endpointId' is not null or undefined\n        if (endpointId === null || endpointId === undefined) {\n            throw new RequiredError('Required parameter endpointId was null or undefined when calling v1EndpointTransformationGet.');\n        }\n\n\n        // Path Params\n        const localVarPath = '/api/v1/app/{app_id}/endpoint/{endpoint_id}/transformation'\n            .replace('{' + 'app_id' + '}', encodeURIComponent(String(appId)))\n            .replace('{' + 'endpoint_id' + '}', encodeURIComponent(String(endpointId)));\n\n        // Make Request Context\n        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.GET);\n        requestContext.setHeaderParam(\"Accept\", \"application/json, */*;q=0.8\")\n        const randomId = Math.floor(Math.random() * Math.pow(2, 32))\n        requestContext.setHeaderParam(\"svix-req-id\", randomId.toString())\n\n        // Query Params\n\n        // Header Params\n\n        // Form Params\n\n\n        // Body Params\n\n        let authMethod = null;\n        // Apply auth methods\n        authMethod = _config.authMethods[\"HTTPBearer\"]\n        if (authMethod) {\n            await authMethod.applySecurityAuthentication(requestContext);\n        }\n\n        return requestContext;\n    }\n\n    /**\n     * Set or unset the transformation code associated with this endpoint\n     * Set Endpoint Transformation\n     * @param appId The app&#39;s ID or UID\n     * @param endpointId The ep&#39;s ID or UID\n     * @param endpointTransformationIn \n     */\n    public async v1EndpointTransformationPartialUpdate(appId: string, endpointId: string, endpointTransformationIn: EndpointTransformationIn, _options?: Configuration): Promise<RequestContext> {\n        let _config = _options || this.configuration;\n\n        // verify required parameter 'appId' is not null or undefined\n        if (appId === null || appId === undefined) {\n            throw new RequiredError('Required parameter appId was null or undefined when calling v1EndpointTransformationPartialUpdate.');\n        }\n\n\n        // verify required parameter 'endpointId' is not null or undefined\n        if (endpointId === null || endpointId === undefined) {\n            throw new RequiredError('Required parameter endpointId was null or undefined when calling v1EndpointTransformationPartialUpdate.');\n        }\n\n\n        // verify required parameter 'endpointTransformationIn' is not null or undefined\n        if (endpointTransformationIn === null || endpointTransformationIn === undefined) {\n            throw new RequiredError('Required parameter endpointTransformationIn was null or undefined when calling v1EndpointTransformationPartialUpdate.');\n        }\n\n\n        // Path Params\n        const localVarPath = '/api/v1/app/{app_id}/endpoint/{endpoint_id}/transformation'\n            .replace('{' + 'app_id' + '}', encodeURIComponent(String(appId)))\n            .replace('{' + 'endpoint_id' + '}', encodeURIComponent(String(endpointId)));\n\n        // Make Request Context\n        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.PATCH);\n        requestContext.setHeaderParam(\"Accept\", \"application/json, */*;q=0.8\")\n        const randomId = Math.floor(Math.random() * Math.pow(2, 32))\n        requestContext.setHeaderParam(\"svix-req-id\", randomId.toString())\n\n        // Query Params\n\n        // Header Params\n\n        // Form Params\n\n\n        // Body Params\n        const contentType = ObjectSerializer.getPreferredMediaType([\n            \"application/json\"\n        ]);\n        requestContext.setHeaderParam(\"Content-Type\", contentType);\n        const serializedBody = ObjectSerializer.stringify(\n            ObjectSerializer.serialize(endpointTransformationIn, \"EndpointTransformationIn\", \"\"),\n            contentType\n        );\n        requestContext.setBody(serializedBody);\n\n        let authMethod = null;\n        // Apply auth methods\n        authMethod = _config.authMethods[\"HTTPBearer\"]\n        if (authMethod) {\n            await authMethod.applySecurityAuthentication(requestContext);\n        }\n\n        return requestContext;\n    }\n\n    /**\n     * Simulate running the transformation on the payload and code\n     * Simulate\n     * @param appId The app&#39;s ID or UID\n     * @param endpointId The ep&#39;s ID or UID\n     * @param endpointTransformationSimulateIn \n     * @param idempotencyKey The request&#39;s idempotency key\n     */\n    public async v1EndpointTransformationSimulate(appId: string, endpointId: string, endpointTransformationSimulateIn: EndpointTransformationSimulateIn, idempotencyKey?: string, _options?: Configuration): Promise<RequestContext> {\n        let _config = _options || this.configuration;\n\n        // verify required parameter 'appId' is not null or undefined\n        if (appId === null || appId === undefined) {\n            throw new RequiredError('Required parameter appId was null or undefined when calling v1EndpointTransformationSimulate.');\n        }\n\n\n        // verify required parameter 'endpointId' is not null or undefined\n        if (endpointId === null || endpointId === undefined) {\n            throw new RequiredError('Required parameter endpointId was null or undefined when calling v1EndpointTransformationSimulate.');\n        }\n\n\n        // verify required parameter 'endpointTransformationSimulateIn' is not null or undefined\n        if (endpointTransformationSimulateIn === null || endpointTransformationSimulateIn === undefined) {\n            throw new RequiredError('Required parameter endpointTransformationSimulateIn was null or undefined when calling v1EndpointTransformationSimulate.');\n        }\n\n\n\n        // Path Params\n        const localVarPath = '/api/v1/app/{app_id}/endpoint/{endpoint_id}/transformation/simulate'\n            .replace('{' + 'app_id' + '}', encodeURIComponent(String(appId)))\n            .replace('{' + 'endpoint_id' + '}', encodeURIComponent(String(endpointId)));\n\n        // Make Request Context\n        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.POST);\n        requestContext.setHeaderParam(\"Accept\", \"application/json, */*;q=0.8\")\n        const randomId = Math.floor(Math.random() * Math.pow(2, 32))\n        requestContext.setHeaderParam(\"svix-req-id\", randomId.toString())\n\n        // Query Params\n\n        // Header Params\n        if (idempotencyKey !== undefined) {\n            requestContext.setHeaderParam(\"idempotency-key\", ObjectSerializer.serialize(idempotencyKey, \"string\", \"\"));\n        }\n\n        // Form Params\n\n\n        // Body Params\n        const contentType = ObjectSerializer.getPreferredMediaType([\n            \"application/json\"\n        ]);\n        requestContext.setHeaderParam(\"Content-Type\", contentType);\n        const serializedBody = ObjectSerializer.stringify(\n            ObjectSerializer.serialize(endpointTransformationSimulateIn, \"EndpointTransformationSimulateIn\", \"\"),\n            contentType\n        );\n        requestContext.setBody(serializedBody);\n\n        let authMethod = null;\n        // Apply auth methods\n        authMethod = _config.authMethods[\"HTTPBearer\"]\n        if (authMethod) {\n            await authMethod.applySecurityAuthentication(requestContext);\n        }\n\n        return requestContext;\n    }\n\n    /**\n     * Update an endpoint.\n     * Update Endpoint\n     * @param appId The app&#39;s ID or UID\n     * @param endpointId The ep&#39;s ID or UID\n     * @param endpointUpdate \n     */\n    public async v1EndpointUpdate(appId: string, endpointId: string, endpointUpdate: EndpointUpdate, _options?: Configuration): Promise<RequestContext> {\n        let _config = _options || this.configuration;\n\n        // verify required parameter 'appId' is not null or undefined\n        if (appId === null || appId === undefined) {\n            throw new RequiredError('Required parameter appId was null or undefined when calling v1EndpointUpdate.');\n        }\n\n\n        // verify required parameter 'endpointId' is not null or undefined\n        if (endpointId === null || endpointId === undefined) {\n            throw new RequiredError('Required parameter endpointId was null or undefined when calling v1EndpointUpdate.');\n        }\n\n\n        // verify required parameter 'endpointUpdate' is not null or undefined\n        if (endpointUpdate === null || endpointUpdate === undefined) {\n            throw new RequiredError('Required parameter endpointUpdate was null or undefined when calling v1EndpointUpdate.');\n        }\n\n\n        // Path Params\n        const localVarPath = '/api/v1/app/{app_id}/endpoint/{endpoint_id}'\n            .replace('{' + 'app_id' + '}', encodeURIComponent(String(appId)))\n            .replace('{' + 'endpoint_id' + '}', encodeURIComponent(String(endpointId)));\n\n        // Make Request Context\n        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.PUT);\n        requestContext.setHeaderParam(\"Accept\", \"application/json, */*;q=0.8\")\n        const randomId = Math.floor(Math.random() * Math.pow(2, 32))\n        requestContext.setHeaderParam(\"svix-req-id\", randomId.toString())\n\n        // Query Params\n\n        // Header Params\n\n        // Form Params\n\n\n        // Body Params\n        const contentType = ObjectSerializer.getPreferredMediaType([\n            \"application/json\"\n        ]);\n        requestContext.setHeaderParam(\"Content-Type\", contentType);\n        const serializedBody = ObjectSerializer.stringify(\n            ObjectSerializer.serialize(endpointUpdate, \"EndpointUpdate\", \"\"),\n            contentType\n        );\n        requestContext.setBody(serializedBody);\n\n        let authMethod = null;\n        // Apply auth methods\n        authMethod = _config.authMethods[\"HTTPBearer\"]\n        if (authMethod) {\n            await authMethod.applySecurityAuthentication(requestContext);\n        }\n\n        return requestContext;\n    }\n\n    /**\n     * Set the additional headers to be sent with the webhook\n     * Update Endpoint Headers\n     * @param appId The app&#39;s ID or UID\n     * @param endpointId The ep&#39;s ID or UID\n     * @param endpointHeadersIn \n     */\n    public async v1EndpointUpdateHeaders(appId: string, endpointId: string, endpointHeadersIn: EndpointHeadersIn, _options?: Configuration): Promise<RequestContext> {\n        let _config = _options || this.configuration;\n\n        // verify required parameter 'appId' is not null or undefined\n        if (appId === null || appId === undefined) {\n            throw new RequiredError('Required parameter appId was null or undefined when calling v1EndpointUpdateHeaders.');\n        }\n\n\n        // verify required parameter 'endpointId' is not null or undefined\n        if (endpointId === null || endpointId === undefined) {\n            throw new RequiredError('Required parameter endpointId was null or undefined when calling v1EndpointUpdateHeaders.');\n        }\n\n\n        // verify required parameter 'endpointHeadersIn' is not null or undefined\n        if (endpointHeadersIn === null || endpointHeadersIn === undefined) {\n            throw new RequiredError('Required parameter endpointHeadersIn was null or undefined when calling v1EndpointUpdateHeaders.');\n        }\n\n\n        // Path Params\n        const localVarPath = '/api/v1/app/{app_id}/endpoint/{endpoint_id}/headers'\n            .replace('{' + 'app_id' + '}', encodeURIComponent(String(appId)))\n            .replace('{' + 'endpoint_id' + '}', encodeURIComponent(String(endpointId)));\n\n        // Make Request Context\n        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.PUT);\n        requestContext.setHeaderParam(\"Accept\", \"application/json, */*;q=0.8\")\n        const randomId = Math.floor(Math.random() * Math.pow(2, 32))\n        requestContext.setHeaderParam(\"svix-req-id\", randomId.toString())\n\n        // Query Params\n\n        // Header Params\n\n        // Form Params\n\n\n        // Body Params\n        const contentType = ObjectSerializer.getPreferredMediaType([\n            \"application/json\"\n        ]);\n        requestContext.setHeaderParam(\"Content-Type\", contentType);\n        const serializedBody = ObjectSerializer.stringify(\n            ObjectSerializer.serialize(endpointHeadersIn, \"EndpointHeadersIn\", \"\"),\n            contentType\n        );\n        requestContext.setBody(serializedBody);\n\n        let authMethod = null;\n        // Apply auth methods\n        authMethod = _config.authMethods[\"HTTPBearer\"]\n        if (authMethod) {\n            await authMethod.applySecurityAuthentication(requestContext);\n        }\n\n        return requestContext;\n    }\n\n    /**\n     * Create/update endpoint mTLS configuration\n     * Update Endpoint Mtls Config\n     * @param appId The app&#39;s ID or UID\n     * @param endpointId The ep&#39;s ID or UID\n     * @param endpointMtlsConfigIn \n     */\n    public async v1EndpointUpdateMtlsConfig(appId: string, endpointId: string, endpointMtlsConfigIn: EndpointMtlsConfigIn, _options?: Configuration): Promise<RequestContext> {\n        let _config = _options || this.configuration;\n\n        // verify required parameter 'appId' is not null or undefined\n        if (appId === null || appId === undefined) {\n            throw new RequiredError('Required parameter appId was null or undefined when calling v1EndpointUpdateMtlsConfig.');\n        }\n\n\n        // verify required parameter 'endpointId' is not null or undefined\n        if (endpointId === null || endpointId === undefined) {\n            throw new RequiredError('Required parameter endpointId was null or undefined when calling v1EndpointUpdateMtlsConfig.');\n        }\n\n\n        // verify required parameter 'endpointMtlsConfigIn' is not null or undefined\n        if (endpointMtlsConfigIn === null || endpointMtlsConfigIn === undefined) {\n            throw new RequiredError('Required parameter endpointMtlsConfigIn was null or undefined when calling v1EndpointUpdateMtlsConfig.');\n        }\n\n\n        // Path Params\n        const localVarPath = '/api/v1/app/{app_id}/endpoint/{endpoint_id}/mtls'\n            .replace('{' + 'app_id' + '}', encodeURIComponent(String(appId)))\n            .replace('{' + 'endpoint_id' + '}', encodeURIComponent(String(endpointId)));\n\n        // Make Request Context\n        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.PUT);\n        requestContext.setHeaderParam(\"Accept\", \"application/json, */*;q=0.8\")\n        const randomId = Math.floor(Math.random() * Math.pow(2, 32))\n        requestContext.setHeaderParam(\"svix-req-id\", randomId.toString())\n\n        // Query Params\n\n        // Header Params\n\n        // Form Params\n\n\n        // Body Params\n        const contentType = ObjectSerializer.getPreferredMediaType([\n            \"application/json\"\n        ]);\n        requestContext.setHeaderParam(\"Content-Type\", contentType);\n        const serializedBody = ObjectSerializer.stringify(\n            ObjectSerializer.serialize(endpointMtlsConfigIn, \"EndpointMtlsConfigIn\", \"\"),\n            contentType\n        );\n        requestContext.setBody(serializedBody);\n\n        let authMethod = null;\n        // Apply auth methods\n        authMethod = _config.authMethods[\"HTTPBearer\"]\n        if (authMethod) {\n            await authMethod.applySecurityAuthentication(requestContext);\n        }\n\n        return requestContext;\n    }\n\n    /**\n     * Create/update endpoint OAuth configuration\n     * Update Endpoint Oauth Config\n     * @param appId The app&#39;s ID or UID\n     * @param endpointId The ep&#39;s ID or UID\n     * @param endpointOauthConfigIn \n     */\n    public async v1EndpointUpdateOauthConfig(appId: string, endpointId: string, endpointOauthConfigIn: EndpointOauthConfigIn, _options?: Configuration): Promise<RequestContext> {\n        let _config = _options || this.configuration;\n\n        // verify required parameter 'appId' is not null or undefined\n        if (appId === null || appId === undefined) {\n            throw new RequiredError('Required parameter appId was null or undefined when calling v1EndpointUpdateOauthConfig.');\n        }\n\n\n        // verify required parameter 'endpointId' is not null or undefined\n        if (endpointId === null || endpointId === undefined) {\n            throw new RequiredError('Required parameter endpointId was null or undefined when calling v1EndpointUpdateOauthConfig.');\n        }\n\n\n        // verify required parameter 'endpointOauthConfigIn' is not null or undefined\n        if (endpointOauthConfigIn === null || endpointOauthConfigIn === undefined) {\n            throw new RequiredError('Required parameter endpointOauthConfigIn was null or undefined when calling v1EndpointUpdateOauthConfig.');\n        }\n\n\n        // Path Params\n        const localVarPath = '/api/v1/app/{app_id}/endpoint/{endpoint_id}/oauth'\n            .replace('{' + 'app_id' + '}', encodeURIComponent(String(appId)))\n            .replace('{' + 'endpoint_id' + '}', encodeURIComponent(String(endpointId)));\n\n        // Make Request Context\n        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.PUT);\n        requestContext.setHeaderParam(\"Accept\", \"application/json, */*;q=0.8\")\n        const randomId = Math.floor(Math.random() * Math.pow(2, 32))\n        requestContext.setHeaderParam(\"svix-req-id\", randomId.toString())\n\n        // Query Params\n\n        // Header Params\n\n        // Form Params\n\n\n        // Body Params\n        const contentType = ObjectSerializer.getPreferredMediaType([\n            \"application/json\"\n        ]);\n        requestContext.setHeaderParam(\"Content-Type\", contentType);\n        const serializedBody = ObjectSerializer.stringify(\n            ObjectSerializer.serialize(endpointOauthConfigIn, \"EndpointOauthConfigIn\", \"\"),\n            contentType\n        );\n        requestContext.setBody(serializedBody);\n\n        let authMethod = null;\n        // Apply auth methods\n        authMethod = _config.authMethods[\"HTTPBearer\"]\n        if (authMethod) {\n            await authMethod.applySecurityAuthentication(requestContext);\n        }\n\n        return requestContext;\n    }\n\n    /**\n     * Create a new sink for the application.\n     * Create Sink\n     * @param appId The app&#39;s ID or UID\n     * @param sinkIn \n     * @param idempotencyKey The request&#39;s idempotency key\n     */\n    public async v1SinkCreate(appId: string, sinkIn: SinkIn, idempotencyKey?: string, _options?: Configuration): Promise<RequestContext> {\n        let _config = _options || this.configuration;\n\n        // verify required parameter 'appId' is not null or undefined\n        if (appId === null || appId === undefined) {\n            throw new RequiredError('Required parameter appId was null or undefined when calling v1SinkCreate.');\n        }\n\n\n        // verify required parameter 'sinkIn' is not null or undefined\n        if (sinkIn === null || sinkIn === undefined) {\n            throw new RequiredError('Required parameter sinkIn was null or undefined when calling v1SinkCreate.');\n        }\n\n\n\n        // Path Params\n        const localVarPath = '/api/v1/app/{app_id}/sink'\n            .replace('{' + 'app_id' + '}', encodeURIComponent(String(appId)));\n\n        // Make Request Context\n        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.POST);\n        requestContext.setHeaderParam(\"Accept\", \"application/json, */*;q=0.8\")\n        const randomId = Math.floor(Math.random() * Math.pow(2, 32))\n        requestContext.setHeaderParam(\"svix-req-id\", randomId.toString())\n\n        // Query Params\n\n        // Header Params\n        if (idempotencyKey !== undefined) {\n            requestContext.setHeaderParam(\"idempotency-key\", ObjectSerializer.serialize(idempotencyKey, \"string\", \"\"));\n        }\n\n        // Form Params\n\n\n        // Body Params\n        const contentType = ObjectSerializer.getPreferredMediaType([\n            \"application/json\"\n        ]);\n        requestContext.setHeaderParam(\"Content-Type\", contentType);\n        const serializedBody = ObjectSerializer.stringify(\n            ObjectSerializer.serialize(sinkIn, \"SinkIn\", \"\"),\n            contentType\n        );\n        requestContext.setBody(serializedBody);\n\n        let authMethod = null;\n        // Apply auth methods\n        authMethod = _config.authMethods[\"HTTPBearer\"]\n        if (authMethod) {\n            await authMethod.applySecurityAuthentication(requestContext);\n        }\n\n        return requestContext;\n    }\n\n    /**\n     * Get a sink.\n     * Get Sink\n     * @param appId The app&#39;s ID or UID\n     * @param sinkId The ep&#39;s ID or UID\n     */\n    public async v1SinkGet(appId: string, sinkId: string, _options?: Configuration): Promise<RequestContext> {\n        let _config = _options || this.configuration;\n\n        // verify required parameter 'appId' is not null or undefined\n        if (appId === null || appId === undefined) {\n            throw new RequiredError('Required parameter appId was null or undefined when calling v1SinkGet.');\n        }\n\n\n        // verify required parameter 'sinkId' is not null or undefined\n        if (sinkId === null || sinkId === undefined) {\n            throw new RequiredError('Required parameter sinkId was null or undefined when calling v1SinkGet.');\n        }\n\n\n        // Path Params\n        const localVarPath = '/api/v1/app/{app_id}/sink/{sink_id}'\n            .replace('{' + 'app_id' + '}', encodeURIComponent(String(appId)))\n            .replace('{' + 'sink_id' + '}', encodeURIComponent(String(sinkId)));\n\n        // Make Request Context\n        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.GET);\n        requestContext.setHeaderParam(\"Accept\", \"application/json, */*;q=0.8\")\n        const randomId = Math.floor(Math.random() * Math.pow(2, 32))\n        requestContext.setHeaderParam(\"svix-req-id\", randomId.toString())\n\n        // Query Params\n\n        // Header Params\n\n        // Form Params\n\n\n        // Body Params\n\n        let authMethod = null;\n        // Apply auth methods\n        authMethod = _config.authMethods[\"HTTPBearer\"]\n        if (authMethod) {\n            await authMethod.applySecurityAuthentication(requestContext);\n        }\n\n        return requestContext;\n    }\n\n    /**\n     * List the application's sinks.\n     * List Sinks\n     * @param appId The app&#39;s ID or UID\n     * @param limit Limit the number of returned items\n     * @param iterator The iterator returned from a prior invocation\n     * @param order The sorting order of the returned items\n     */\n    public async v1SinkList(appId: string, limit?: number, iterator?: string, order?: Ordering, _options?: Configuration): Promise<RequestContext> {\n        let _config = _options || this.configuration;\n\n        // verify required parameter 'appId' is not null or undefined\n        if (appId === null || appId === undefined) {\n            throw new RequiredError('Required parameter appId was null or undefined when calling v1SinkList.');\n        }\n\n\n\n\n\n        // Path Params\n        const localVarPath = '/api/v1/app/{app_id}/sink'\n            .replace('{' + 'app_id' + '}', encodeURIComponent(String(appId)));\n\n        // Make Request Context\n        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.GET);\n        requestContext.setHeaderParam(\"Accept\", \"application/json, */*;q=0.8\")\n        const randomId = Math.floor(Math.random() * Math.pow(2, 32))\n        requestContext.setHeaderParam(\"svix-req-id\", randomId.toString())\n\n        // Query Params\n        if (limit !== undefined) {\n            requestContext.setQueryParam(\"limit\", ObjectSerializer.serialize(limit, \"number\", \"uint64\"));\n        }\n        if (iterator !== undefined) {\n            requestContext.setQueryParam(\"iterator\", ObjectSerializer.serialize(iterator, \"string\", \"\"));\n        }\n        if (order !== undefined) {\n            requestContext.setQueryParam(\"order\", ObjectSerializer.serialize(order, \"Ordering\", \"\"));\n        }\n\n        // Header Params\n\n        // Form Params\n\n\n        // Body Params\n\n        let authMethod = null;\n        // Apply auth methods\n        authMethod = _config.authMethods[\"HTTPBearer\"]\n        if (authMethod) {\n            await authMethod.applySecurityAuthentication(requestContext);\n        }\n\n        return requestContext;\n    }\n\n}\n\nexport class EndpointApiResponseProcessor {\n\n    /**\n     * Unwraps the actual response sent by the server from the response context and deserializes the response content\n     * to the expected objects\n     *\n     * @params response Response returned by the server for a request to v1EndpointCreate\n     * @throws ApiException if the response code was not in [200, 299]\n     */\n     public async v1EndpointCreate(response: ResponseContext): Promise<EndpointOut > {\n        const contentType = ObjectSerializer.normalizeMediaType(response.headers[\"content-type\"]);\n\n        if (isCodeInRange(\"201\", response.httpStatusCode)) {\n            const body: EndpointOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"EndpointOut\", \"\"\n            ) as EndpointOut;\n            return body;\n        }\n        if (isCodeInRange(\"400\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(400, body);\n        }\n        if (isCodeInRange(\"401\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(401, body);\n        }\n        if (isCodeInRange(\"403\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(403, body);\n        }\n        if (isCodeInRange(\"404\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(404, body);\n        }\n        if (isCodeInRange(\"409\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(409, body);\n        }\n        if (isCodeInRange(\"422\", response.httpStatusCode)) {\n            const body: HTTPValidationError = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HTTPValidationError\", \"\"\n            ) as HTTPValidationError;\n            throw new ApiException<HTTPValidationError>(422, body);\n        }\n        if (isCodeInRange(\"429\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(429, body);\n        }\n\n        // Work around for missing responses in specification, e.g. for petstore.yaml\n        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {\n            const body: EndpointOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"EndpointOut\", \"\"\n            ) as EndpointOut;\n            return body;\n        }\n\n        let body = await response.body.text();\n        throw new ApiException<string>(response.httpStatusCode, body);\n    }\n\n    /**\n     * Unwraps the actual response sent by the server from the response context and deserializes the response content\n     * to the expected objects\n     *\n     * @params response Response returned by the server for a request to v1EndpointDelete\n     * @throws ApiException if the response code was not in [200, 299]\n     */\n     public async v1EndpointDelete(response: ResponseContext): Promise<void > {\n        const contentType = ObjectSerializer.normalizeMediaType(response.headers[\"content-type\"]);\n\n        if (isCodeInRange(\"204\", response.httpStatusCode)) {\n            return;\n        }\n        if (isCodeInRange(\"400\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(400, body);\n        }\n        if (isCodeInRange(\"401\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(401, body);\n        }\n        if (isCodeInRange(\"403\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(403, body);\n        }\n        if (isCodeInRange(\"404\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(404, body);\n        }\n        if (isCodeInRange(\"409\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(409, body);\n        }\n        if (isCodeInRange(\"422\", response.httpStatusCode)) {\n            const body: HTTPValidationError = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HTTPValidationError\", \"\"\n            ) as HTTPValidationError;\n            throw new ApiException<HTTPValidationError>(422, body);\n        }\n        if (isCodeInRange(\"429\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(429, body);\n        }\n\n        // Work around for missing responses in specification, e.g. for petstore.yaml\n        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {\n            const body: void = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"void\", \"\"\n            ) as void;\n            return body;\n        }\n\n        let body = await response.body.text();\n        throw new ApiException<string>(response.httpStatusCode, body);\n    }\n\n    /**\n     * Unwraps the actual response sent by the server from the response context and deserializes the response content\n     * to the expected objects\n     *\n     * @params response Response returned by the server for a request to v1EndpointDeleteMtlsConfig\n     * @throws ApiException if the response code was not in [200, 299]\n     */\n     public async v1EndpointDeleteMtlsConfig(response: ResponseContext): Promise<void > {\n        const contentType = ObjectSerializer.normalizeMediaType(response.headers[\"content-type\"]);\n\n        if (isCodeInRange(\"204\", response.httpStatusCode)) {\n            return;\n        }\n        if (isCodeInRange(\"400\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(400, body);\n        }\n        if (isCodeInRange(\"401\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(401, body);\n        }\n        if (isCodeInRange(\"403\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(403, body);\n        }\n        if (isCodeInRange(\"404\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(404, body);\n        }\n        if (isCodeInRange(\"409\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(409, body);\n        }\n        if (isCodeInRange(\"422\", response.httpStatusCode)) {\n            const body: HTTPValidationError = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HTTPValidationError\", \"\"\n            ) as HTTPValidationError;\n            throw new ApiException<HTTPValidationError>(422, body);\n        }\n        if (isCodeInRange(\"429\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(429, body);\n        }\n\n        // Work around for missing responses in specification, e.g. for petstore.yaml\n        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {\n            const body: void = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"void\", \"\"\n            ) as void;\n            return body;\n        }\n\n        let body = await response.body.text();\n        throw new ApiException<string>(response.httpStatusCode, body);\n    }\n\n    /**\n     * Unwraps the actual response sent by the server from the response context and deserializes the response content\n     * to the expected objects\n     *\n     * @params response Response returned by the server for a request to v1EndpointDeleteOauthConfig\n     * @throws ApiException if the response code was not in [200, 299]\n     */\n     public async v1EndpointDeleteOauthConfig(response: ResponseContext): Promise<void > {\n        const contentType = ObjectSerializer.normalizeMediaType(response.headers[\"content-type\"]);\n\n        if (isCodeInRange(\"204\", response.httpStatusCode)) {\n            return;\n        }\n        if (isCodeInRange(\"400\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(400, body);\n        }\n        if (isCodeInRange(\"401\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(401, body);\n        }\n        if (isCodeInRange(\"403\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(403, body);\n        }\n        if (isCodeInRange(\"404\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(404, body);\n        }\n        if (isCodeInRange(\"409\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(409, body);\n        }\n        if (isCodeInRange(\"422\", response.httpStatusCode)) {\n            const body: HTTPValidationError = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HTTPValidationError\", \"\"\n            ) as HTTPValidationError;\n            throw new ApiException<HTTPValidationError>(422, body);\n        }\n        if (isCodeInRange(\"429\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(429, body);\n        }\n\n        // Work around for missing responses in specification, e.g. for petstore.yaml\n        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {\n            const body: void = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"void\", \"\"\n            ) as void;\n            return body;\n        }\n\n        let body = await response.body.text();\n        throw new ApiException<string>(response.httpStatusCode, body);\n    }\n\n    /**\n     * Unwraps the actual response sent by the server from the response context and deserializes the response content\n     * to the expected objects\n     *\n     * @params response Response returned by the server for a request to v1EndpointGet\n     * @throws ApiException if the response code was not in [200, 299]\n     */\n     public async v1EndpointGet(response: ResponseContext): Promise<EndpointOut > {\n        const contentType = ObjectSerializer.normalizeMediaType(response.headers[\"content-type\"]);\n\n        if (isCodeInRange(\"200\", response.httpStatusCode)) {\n            const body: EndpointOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"EndpointOut\", \"\"\n            ) as EndpointOut;\n            return body;\n        }\n        if (isCodeInRange(\"400\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(400, body);\n        }\n        if (isCodeInRange(\"401\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(401, body);\n        }\n        if (isCodeInRange(\"403\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(403, body);\n        }\n        if (isCodeInRange(\"404\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(404, body);\n        }\n        if (isCodeInRange(\"409\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(409, body);\n        }\n        if (isCodeInRange(\"422\", response.httpStatusCode)) {\n            const body: HTTPValidationError = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HTTPValidationError\", \"\"\n            ) as HTTPValidationError;\n            throw new ApiException<HTTPValidationError>(422, body);\n        }\n        if (isCodeInRange(\"429\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(429, body);\n        }\n\n        // Work around for missing responses in specification, e.g. for petstore.yaml\n        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {\n            const body: EndpointOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"EndpointOut\", \"\"\n            ) as EndpointOut;\n            return body;\n        }\n\n        let body = await response.body.text();\n        throw new ApiException<string>(response.httpStatusCode, body);\n    }\n\n    /**\n     * Unwraps the actual response sent by the server from the response context and deserializes the response content\n     * to the expected objects\n     *\n     * @params response Response returned by the server for a request to v1EndpointGetHeaders\n     * @throws ApiException if the response code was not in [200, 299]\n     */\n     public async v1EndpointGetHeaders(response: ResponseContext): Promise<EndpointHeadersOut > {\n        const contentType = ObjectSerializer.normalizeMediaType(response.headers[\"content-type\"]);\n\n        if (isCodeInRange(\"200\", response.httpStatusCode)) {\n            const body: EndpointHeadersOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"EndpointHeadersOut\", \"\"\n            ) as EndpointHeadersOut;\n            return body;\n        }\n        if (isCodeInRange(\"400\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(400, body);\n        }\n        if (isCodeInRange(\"401\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(401, body);\n        }\n        if (isCodeInRange(\"403\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(403, body);\n        }\n        if (isCodeInRange(\"404\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(404, body);\n        }\n        if (isCodeInRange(\"409\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(409, body);\n        }\n        if (isCodeInRange(\"422\", response.httpStatusCode)) {\n            const body: HTTPValidationError = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HTTPValidationError\", \"\"\n            ) as HTTPValidationError;\n            throw new ApiException<HTTPValidationError>(422, body);\n        }\n        if (isCodeInRange(\"429\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(429, body);\n        }\n\n        // Work around for missing responses in specification, e.g. for petstore.yaml\n        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {\n            const body: EndpointHeadersOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"EndpointHeadersOut\", \"\"\n            ) as EndpointHeadersOut;\n            return body;\n        }\n\n        let body = await response.body.text();\n        throw new ApiException<string>(response.httpStatusCode, body);\n    }\n\n    /**\n     * Unwraps the actual response sent by the server from the response context and deserializes the response content\n     * to the expected objects\n     *\n     * @params response Response returned by the server for a request to v1EndpointGetSecret\n     * @throws ApiException if the response code was not in [200, 299]\n     */\n     public async v1EndpointGetSecret(response: ResponseContext): Promise<EndpointSecretOut > {\n        const contentType = ObjectSerializer.normalizeMediaType(response.headers[\"content-type\"]);\n\n        if (isCodeInRange(\"200\", response.httpStatusCode)) {\n            const body: EndpointSecretOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"EndpointSecretOut\", \"\"\n            ) as EndpointSecretOut;\n            return body;\n        }\n        if (isCodeInRange(\"400\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(400, body);\n        }\n        if (isCodeInRange(\"401\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(401, body);\n        }\n        if (isCodeInRange(\"403\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(403, body);\n        }\n        if (isCodeInRange(\"404\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(404, body);\n        }\n        if (isCodeInRange(\"409\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(409, body);\n        }\n        if (isCodeInRange(\"422\", response.httpStatusCode)) {\n            const body: HTTPValidationError = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HTTPValidationError\", \"\"\n            ) as HTTPValidationError;\n            throw new ApiException<HTTPValidationError>(422, body);\n        }\n        if (isCodeInRange(\"429\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(429, body);\n        }\n\n        // Work around for missing responses in specification, e.g. for petstore.yaml\n        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {\n            const body: EndpointSecretOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"EndpointSecretOut\", \"\"\n            ) as EndpointSecretOut;\n            return body;\n        }\n\n        let body = await response.body.text();\n        throw new ApiException<string>(response.httpStatusCode, body);\n    }\n\n    /**\n     * Unwraps the actual response sent by the server from the response context and deserializes the response content\n     * to the expected objects\n     *\n     * @params response Response returned by the server for a request to v1EndpointGetStats\n     * @throws ApiException if the response code was not in [200, 299]\n     */\n     public async v1EndpointGetStats(response: ResponseContext): Promise<EndpointStats > {\n        const contentType = ObjectSerializer.normalizeMediaType(response.headers[\"content-type\"]);\n\n        if (isCodeInRange(\"200\", response.httpStatusCode)) {\n            const body: EndpointStats = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"EndpointStats\", \"\"\n            ) as EndpointStats;\n            return body;\n        }\n        if (isCodeInRange(\"400\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(400, body);\n        }\n        if (isCodeInRange(\"401\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(401, body);\n        }\n        if (isCodeInRange(\"403\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(403, body);\n        }\n        if (isCodeInRange(\"404\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(404, body);\n        }\n        if (isCodeInRange(\"409\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(409, body);\n        }\n        if (isCodeInRange(\"422\", response.httpStatusCode)) {\n            const body: HTTPValidationError = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HTTPValidationError\", \"\"\n            ) as HTTPValidationError;\n            throw new ApiException<HTTPValidationError>(422, body);\n        }\n        if (isCodeInRange(\"429\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(429, body);\n        }\n\n        // Work around for missing responses in specification, e.g. for petstore.yaml\n        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {\n            const body: EndpointStats = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"EndpointStats\", \"\"\n            ) as EndpointStats;\n            return body;\n        }\n\n        let body = await response.body.text();\n        throw new ApiException<string>(response.httpStatusCode, body);\n    }\n\n    /**\n     * Unwraps the actual response sent by the server from the response context and deserializes the response content\n     * to the expected objects\n     *\n     * @params response Response returned by the server for a request to v1EndpointList\n     * @throws ApiException if the response code was not in [200, 299]\n     */\n     public async v1EndpointList(response: ResponseContext): Promise<ListResponseEndpointOut > {\n        const contentType = ObjectSerializer.normalizeMediaType(response.headers[\"content-type\"]);\n\n        if (isCodeInRange(\"200\", response.httpStatusCode)) {\n            const body: ListResponseEndpointOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"ListResponseEndpointOut\", \"\"\n            ) as ListResponseEndpointOut;\n            return body;\n        }\n        if (isCodeInRange(\"400\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(400, body);\n        }\n        if (isCodeInRange(\"401\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(401, body);\n        }\n        if (isCodeInRange(\"403\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(403, body);\n        }\n        if (isCodeInRange(\"404\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(404, body);\n        }\n        if (isCodeInRange(\"409\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(409, body);\n        }\n        if (isCodeInRange(\"422\", response.httpStatusCode)) {\n            const body: HTTPValidationError = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HTTPValidationError\", \"\"\n            ) as HTTPValidationError;\n            throw new ApiException<HTTPValidationError>(422, body);\n        }\n        if (isCodeInRange(\"429\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(429, body);\n        }\n\n        // Work around for missing responses in specification, e.g. for petstore.yaml\n        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {\n            const body: ListResponseEndpointOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"ListResponseEndpointOut\", \"\"\n            ) as ListResponseEndpointOut;\n            return body;\n        }\n\n        let body = await response.body.text();\n        throw new ApiException<string>(response.httpStatusCode, body);\n    }\n\n    /**\n     * Unwraps the actual response sent by the server from the response context and deserializes the response content\n     * to the expected objects\n     *\n     * @params response Response returned by the server for a request to v1EndpointPatch\n     * @throws ApiException if the response code was not in [200, 299]\n     */\n     public async v1EndpointPatch(response: ResponseContext): Promise<EndpointOut > {\n        const contentType = ObjectSerializer.normalizeMediaType(response.headers[\"content-type\"]);\n\n        if (isCodeInRange(\"200\", response.httpStatusCode)) {\n            const body: EndpointOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"EndpointOut\", \"\"\n            ) as EndpointOut;\n            return body;\n        }\n        if (isCodeInRange(\"400\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(400, body);\n        }\n        if (isCodeInRange(\"401\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(401, body);\n        }\n        if (isCodeInRange(\"403\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(403, body);\n        }\n        if (isCodeInRange(\"404\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(404, body);\n        }\n        if (isCodeInRange(\"409\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(409, body);\n        }\n        if (isCodeInRange(\"422\", response.httpStatusCode)) {\n            const body: HTTPValidationError = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HTTPValidationError\", \"\"\n            ) as HTTPValidationError;\n            throw new ApiException<HTTPValidationError>(422, body);\n        }\n        if (isCodeInRange(\"429\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(429, body);\n        }\n\n        // Work around for missing responses in specification, e.g. for petstore.yaml\n        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {\n            const body: EndpointOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"EndpointOut\", \"\"\n            ) as EndpointOut;\n            return body;\n        }\n\n        let body = await response.body.text();\n        throw new ApiException<string>(response.httpStatusCode, body);\n    }\n\n    /**\n     * Unwraps the actual response sent by the server from the response context and deserializes the response content\n     * to the expected objects\n     *\n     * @params response Response returned by the server for a request to v1EndpointPatchHeaders\n     * @throws ApiException if the response code was not in [200, 299]\n     */\n     public async v1EndpointPatchHeaders(response: ResponseContext): Promise<void > {\n        const contentType = ObjectSerializer.normalizeMediaType(response.headers[\"content-type\"]);\n\n        if (isCodeInRange(\"204\", response.httpStatusCode)) {\n            return;\n        }\n        if (isCodeInRange(\"400\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(400, body);\n        }\n        if (isCodeInRange(\"401\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(401, body);\n        }\n        if (isCodeInRange(\"403\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(403, body);\n        }\n        if (isCodeInRange(\"404\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(404, body);\n        }\n        if (isCodeInRange(\"409\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(409, body);\n        }\n        if (isCodeInRange(\"422\", response.httpStatusCode)) {\n            const body: HTTPValidationError = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HTTPValidationError\", \"\"\n            ) as HTTPValidationError;\n            throw new ApiException<HTTPValidationError>(422, body);\n        }\n        if (isCodeInRange(\"429\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(429, body);\n        }\n\n        // Work around for missing responses in specification, e.g. for petstore.yaml\n        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {\n            const body: void = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"void\", \"\"\n            ) as void;\n            return body;\n        }\n\n        let body = await response.body.text();\n        throw new ApiException<string>(response.httpStatusCode, body);\n    }\n\n    /**\n     * Unwraps the actual response sent by the server from the response context and deserializes the response content\n     * to the expected objects\n     *\n     * @params response Response returned by the server for a request to v1EndpointRecover\n     * @throws ApiException if the response code was not in [200, 299]\n     */\n     public async v1EndpointRecover(response: ResponseContext): Promise<RecoverOut > {\n        const contentType = ObjectSerializer.normalizeMediaType(response.headers[\"content-type\"]);\n\n        if (isCodeInRange(\"202\", response.httpStatusCode)) {\n            const body: RecoverOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"RecoverOut\", \"\"\n            ) as RecoverOut;\n            return body;\n        }\n        if (isCodeInRange(\"400\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(400, body);\n        }\n        if (isCodeInRange(\"401\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(401, body);\n        }\n        if (isCodeInRange(\"403\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(403, body);\n        }\n        if (isCodeInRange(\"404\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(404, body);\n        }\n        if (isCodeInRange(\"409\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(409, body);\n        }\n        if (isCodeInRange(\"422\", response.httpStatusCode)) {\n            const body: HTTPValidationError = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HTTPValidationError\", \"\"\n            ) as HTTPValidationError;\n            throw new ApiException<HTTPValidationError>(422, body);\n        }\n        if (isCodeInRange(\"429\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(429, body);\n        }\n\n        // Work around for missing responses in specification, e.g. for petstore.yaml\n        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {\n            const body: RecoverOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"RecoverOut\", \"\"\n            ) as RecoverOut;\n            return body;\n        }\n\n        let body = await response.body.text();\n        throw new ApiException<string>(response.httpStatusCode, body);\n    }\n\n    /**\n     * Unwraps the actual response sent by the server from the response context and deserializes the response content\n     * to the expected objects\n     *\n     * @params response Response returned by the server for a request to v1EndpointReplay\n     * @throws ApiException if the response code was not in [200, 299]\n     */\n     public async v1EndpointReplay(response: ResponseContext): Promise<ReplayOut > {\n        const contentType = ObjectSerializer.normalizeMediaType(response.headers[\"content-type\"]);\n\n        if (isCodeInRange(\"202\", response.httpStatusCode)) {\n            const body: ReplayOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"ReplayOut\", \"\"\n            ) as ReplayOut;\n            return body;\n        }\n        if (isCodeInRange(\"400\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(400, body);\n        }\n        if (isCodeInRange(\"401\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(401, body);\n        }\n        if (isCodeInRange(\"403\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(403, body);\n        }\n        if (isCodeInRange(\"404\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(404, body);\n        }\n        if (isCodeInRange(\"409\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(409, body);\n        }\n        if (isCodeInRange(\"422\", response.httpStatusCode)) {\n            const body: HTTPValidationError = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HTTPValidationError\", \"\"\n            ) as HTTPValidationError;\n            throw new ApiException<HTTPValidationError>(422, body);\n        }\n        if (isCodeInRange(\"429\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(429, body);\n        }\n\n        // Work around for missing responses in specification, e.g. for petstore.yaml\n        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {\n            const body: ReplayOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"ReplayOut\", \"\"\n            ) as ReplayOut;\n            return body;\n        }\n\n        let body = await response.body.text();\n        throw new ApiException<string>(response.httpStatusCode, body);\n    }\n\n    /**\n     * Unwraps the actual response sent by the server from the response context and deserializes the response content\n     * to the expected objects\n     *\n     * @params response Response returned by the server for a request to v1EndpointRotateSecret\n     * @throws ApiException if the response code was not in [200, 299]\n     */\n     public async v1EndpointRotateSecret(response: ResponseContext): Promise<void > {\n        const contentType = ObjectSerializer.normalizeMediaType(response.headers[\"content-type\"]);\n\n        if (isCodeInRange(\"204\", response.httpStatusCode)) {\n            return;\n        }\n        if (isCodeInRange(\"400\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(400, body);\n        }\n        if (isCodeInRange(\"401\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(401, body);\n        }\n        if (isCodeInRange(\"403\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(403, body);\n        }\n        if (isCodeInRange(\"404\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(404, body);\n        }\n        if (isCodeInRange(\"409\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(409, body);\n        }\n        if (isCodeInRange(\"422\", response.httpStatusCode)) {\n            const body: HTTPValidationError = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HTTPValidationError\", \"\"\n            ) as HTTPValidationError;\n            throw new ApiException<HTTPValidationError>(422, body);\n        }\n        if (isCodeInRange(\"429\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(429, body);\n        }\n\n        // Work around for missing responses in specification, e.g. for petstore.yaml\n        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {\n            const body: void = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"void\", \"\"\n            ) as void;\n            return body;\n        }\n\n        let body = await response.body.text();\n        throw new ApiException<string>(response.httpStatusCode, body);\n    }\n\n    /**\n     * Unwraps the actual response sent by the server from the response context and deserializes the response content\n     * to the expected objects\n     *\n     * @params response Response returned by the server for a request to v1EndpointSendExample\n     * @throws ApiException if the response code was not in [200, 299]\n     */\n     public async v1EndpointSendExample(response: ResponseContext): Promise<MessageOut > {\n        const contentType = ObjectSerializer.normalizeMediaType(response.headers[\"content-type\"]);\n\n        if (isCodeInRange(\"202\", response.httpStatusCode)) {\n            const body: MessageOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"MessageOut\", \"\"\n            ) as MessageOut;\n            return body;\n        }\n        if (isCodeInRange(\"400\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(400, body);\n        }\n        if (isCodeInRange(\"401\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(401, body);\n        }\n        if (isCodeInRange(\"403\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(403, body);\n        }\n        if (isCodeInRange(\"404\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(404, body);\n        }\n        if (isCodeInRange(\"409\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(409, body);\n        }\n        if (isCodeInRange(\"422\", response.httpStatusCode)) {\n            const body: HTTPValidationError = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HTTPValidationError\", \"\"\n            ) as HTTPValidationError;\n            throw new ApiException<HTTPValidationError>(422, body);\n        }\n        if (isCodeInRange(\"429\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(429, body);\n        }\n\n        // Work around for missing responses in specification, e.g. for petstore.yaml\n        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {\n            const body: MessageOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"MessageOut\", \"\"\n            ) as MessageOut;\n            return body;\n        }\n\n        let body = await response.body.text();\n        throw new ApiException<string>(response.httpStatusCode, body);\n    }\n\n    /**\n     * Unwraps the actual response sent by the server from the response context and deserializes the response content\n     * to the expected objects\n     *\n     * @params response Response returned by the server for a request to v1EndpointTransformationGet\n     * @throws ApiException if the response code was not in [200, 299]\n     */\n     public async v1EndpointTransformationGet(response: ResponseContext): Promise<EndpointTransformationOut > {\n        const contentType = ObjectSerializer.normalizeMediaType(response.headers[\"content-type\"]);\n\n        if (isCodeInRange(\"200\", response.httpStatusCode)) {\n            const body: EndpointTransformationOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"EndpointTransformationOut\", \"\"\n            ) as EndpointTransformationOut;\n            return body;\n        }\n        if (isCodeInRange(\"400\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(400, body);\n        }\n        if (isCodeInRange(\"401\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(401, body);\n        }\n        if (isCodeInRange(\"403\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(403, body);\n        }\n        if (isCodeInRange(\"404\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(404, body);\n        }\n        if (isCodeInRange(\"409\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(409, body);\n        }\n        if (isCodeInRange(\"422\", response.httpStatusCode)) {\n            const body: HTTPValidationError = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HTTPValidationError\", \"\"\n            ) as HTTPValidationError;\n            throw new ApiException<HTTPValidationError>(422, body);\n        }\n        if (isCodeInRange(\"429\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(429, body);\n        }\n\n        // Work around for missing responses in specification, e.g. for petstore.yaml\n        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {\n            const body: EndpointTransformationOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"EndpointTransformationOut\", \"\"\n            ) as EndpointTransformationOut;\n            return body;\n        }\n\n        let body = await response.body.text();\n        throw new ApiException<string>(response.httpStatusCode, body);\n    }\n\n    /**\n     * Unwraps the actual response sent by the server from the response context and deserializes the response content\n     * to the expected objects\n     *\n     * @params response Response returned by the server for a request to v1EndpointTransformationPartialUpdate\n     * @throws ApiException if the response code was not in [200, 299]\n     */\n     public async v1EndpointTransformationPartialUpdate(response: ResponseContext): Promise<void > {\n        const contentType = ObjectSerializer.normalizeMediaType(response.headers[\"content-type\"]);\n\n        if (isCodeInRange(\"204\", response.httpStatusCode)) {\n            return;\n        }\n        if (isCodeInRange(\"400\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(400, body);\n        }\n        if (isCodeInRange(\"401\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(401, body);\n        }\n        if (isCodeInRange(\"403\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(403, body);\n        }\n        if (isCodeInRange(\"404\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(404, body);\n        }\n        if (isCodeInRange(\"409\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(409, body);\n        }\n        if (isCodeInRange(\"422\", response.httpStatusCode)) {\n            const body: HTTPValidationError = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HTTPValidationError\", \"\"\n            ) as HTTPValidationError;\n            throw new ApiException<HTTPValidationError>(422, body);\n        }\n        if (isCodeInRange(\"429\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(429, body);\n        }\n\n        // Work around for missing responses in specification, e.g. for petstore.yaml\n        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {\n            const body: void = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"void\", \"\"\n            ) as void;\n            return body;\n        }\n\n        let body = await response.body.text();\n        throw new ApiException<string>(response.httpStatusCode, body);\n    }\n\n    /**\n     * Unwraps the actual response sent by the server from the response context and deserializes the response content\n     * to the expected objects\n     *\n     * @params response Response returned by the server for a request to v1EndpointTransformationSimulate\n     * @throws ApiException if the response code was not in [200, 299]\n     */\n     public async v1EndpointTransformationSimulate(response: ResponseContext): Promise<EndpointTransformationSimulateOut > {\n        const contentType = ObjectSerializer.normalizeMediaType(response.headers[\"content-type\"]);\n\n        if (isCodeInRange(\"200\", response.httpStatusCode)) {\n            const body: EndpointTransformationSimulateOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"EndpointTransformationSimulateOut\", \"\"\n            ) as EndpointTransformationSimulateOut;\n            return body;\n        }\n        if (isCodeInRange(\"400\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(400, body);\n        }\n        if (isCodeInRange(\"401\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(401, body);\n        }\n        if (isCodeInRange(\"403\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(403, body);\n        }\n        if (isCodeInRange(\"404\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(404, body);\n        }\n        if (isCodeInRange(\"409\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(409, body);\n        }\n        if (isCodeInRange(\"422\", response.httpStatusCode)) {\n            const body: HTTPValidationError = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HTTPValidationError\", \"\"\n            ) as HTTPValidationError;\n            throw new ApiException<HTTPValidationError>(422, body);\n        }\n        if (isCodeInRange(\"429\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(429, body);\n        }\n\n        // Work around for missing responses in specification, e.g. for petstore.yaml\n        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {\n            const body: EndpointTransformationSimulateOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"EndpointTransformationSimulateOut\", \"\"\n            ) as EndpointTransformationSimulateOut;\n            return body;\n        }\n\n        let body = await response.body.text();\n        throw new ApiException<string>(response.httpStatusCode, body);\n    }\n\n    /**\n     * Unwraps the actual response sent by the server from the response context and deserializes the response content\n     * to the expected objects\n     *\n     * @params response Response returned by the server for a request to v1EndpointUpdate\n     * @throws ApiException if the response code was not in [200, 299]\n     */\n     public async v1EndpointUpdate(response: ResponseContext): Promise<EndpointOut > {\n        const contentType = ObjectSerializer.normalizeMediaType(response.headers[\"content-type\"]);\n\n        if (isCodeInRange(\"200\", response.httpStatusCode)) {\n            const body: EndpointOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"EndpointOut\", \"\"\n            ) as EndpointOut;\n            return body;\n        }\n        if (isCodeInRange(\"201\", response.httpStatusCode)) {\n            const body: EndpointOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"EndpointOut\", \"\"\n            ) as EndpointOut;\n            return body;\n        }\n        if (isCodeInRange(\"400\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(400, body);\n        }\n        if (isCodeInRange(\"401\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(401, body);\n        }\n        if (isCodeInRange(\"403\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(403, body);\n        }\n        if (isCodeInRange(\"404\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(404, body);\n        }\n        if (isCodeInRange(\"409\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(409, body);\n        }\n        if (isCodeInRange(\"422\", response.httpStatusCode)) {\n            const body: HTTPValidationError = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HTTPValidationError\", \"\"\n            ) as HTTPValidationError;\n            throw new ApiException<HTTPValidationError>(422, body);\n        }\n        if (isCodeInRange(\"429\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(429, body);\n        }\n\n        // Work around for missing responses in specification, e.g. for petstore.yaml\n        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {\n            const body: EndpointOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"EndpointOut\", \"\"\n            ) as EndpointOut;\n            return body;\n        }\n\n        let body = await response.body.text();\n        throw new ApiException<string>(response.httpStatusCode, body);\n    }\n\n    /**\n     * Unwraps the actual response sent by the server from the response context and deserializes the response content\n     * to the expected objects\n     *\n     * @params response Response returned by the server for a request to v1EndpointUpdateHeaders\n     * @throws ApiException if the response code was not in [200, 299]\n     */\n     public async v1EndpointUpdateHeaders(response: ResponseContext): Promise<void > {\n        const contentType = ObjectSerializer.normalizeMediaType(response.headers[\"content-type\"]);\n\n        if (isCodeInRange(\"204\", response.httpStatusCode)) {\n            return;\n        }\n        if (isCodeInRange(\"400\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(400, body);\n        }\n        if (isCodeInRange(\"401\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(401, body);\n        }\n        if (isCodeInRange(\"403\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(403, body);\n        }\n        if (isCodeInRange(\"404\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(404, body);\n        }\n        if (isCodeInRange(\"409\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(409, body);\n        }\n        if (isCodeInRange(\"422\", response.httpStatusCode)) {\n            const body: HTTPValidationError = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HTTPValidationError\", \"\"\n            ) as HTTPValidationError;\n            throw new ApiException<HTTPValidationError>(422, body);\n        }\n        if (isCodeInRange(\"429\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(429, body);\n        }\n\n        // Work around for missing responses in specification, e.g. for petstore.yaml\n        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {\n            const body: void = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"void\", \"\"\n            ) as void;\n            return body;\n        }\n\n        let body = await response.body.text();\n        throw new ApiException<string>(response.httpStatusCode, body);\n    }\n\n    /**\n     * Unwraps the actual response sent by the server from the response context and deserializes the response content\n     * to the expected objects\n     *\n     * @params response Response returned by the server for a request to v1EndpointUpdateMtlsConfig\n     * @throws ApiException if the response code was not in [200, 299]\n     */\n     public async v1EndpointUpdateMtlsConfig(response: ResponseContext): Promise<void > {\n        const contentType = ObjectSerializer.normalizeMediaType(response.headers[\"content-type\"]);\n\n        if (isCodeInRange(\"204\", response.httpStatusCode)) {\n            return;\n        }\n        if (isCodeInRange(\"400\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(400, body);\n        }\n        if (isCodeInRange(\"401\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(401, body);\n        }\n        if (isCodeInRange(\"403\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(403, body);\n        }\n        if (isCodeInRange(\"404\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(404, body);\n        }\n        if (isCodeInRange(\"409\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(409, body);\n        }\n        if (isCodeInRange(\"422\", response.httpStatusCode)) {\n            const body: HTTPValidationError = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HTTPValidationError\", \"\"\n            ) as HTTPValidationError;\n            throw new ApiException<HTTPValidationError>(422, body);\n        }\n        if (isCodeInRange(\"429\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(429, body);\n        }\n\n        // Work around for missing responses in specification, e.g. for petstore.yaml\n        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {\n            const body: void = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"void\", \"\"\n            ) as void;\n            return body;\n        }\n\n        let body = await response.body.text();\n        throw new ApiException<string>(response.httpStatusCode, body);\n    }\n\n    /**\n     * Unwraps the actual response sent by the server from the response context and deserializes the response content\n     * to the expected objects\n     *\n     * @params response Response returned by the server for a request to v1EndpointUpdateOauthConfig\n     * @throws ApiException if the response code was not in [200, 299]\n     */\n     public async v1EndpointUpdateOauthConfig(response: ResponseContext): Promise<void > {\n        const contentType = ObjectSerializer.normalizeMediaType(response.headers[\"content-type\"]);\n\n        if (isCodeInRange(\"204\", response.httpStatusCode)) {\n            return;\n        }\n        if (isCodeInRange(\"400\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(400, body);\n        }\n        if (isCodeInRange(\"401\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(401, body);\n        }\n        if (isCodeInRange(\"403\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(403, body);\n        }\n        if (isCodeInRange(\"404\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(404, body);\n        }\n        if (isCodeInRange(\"409\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(409, body);\n        }\n        if (isCodeInRange(\"422\", response.httpStatusCode)) {\n            const body: HTTPValidationError = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HTTPValidationError\", \"\"\n            ) as HTTPValidationError;\n            throw new ApiException<HTTPValidationError>(422, body);\n        }\n        if (isCodeInRange(\"429\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(429, body);\n        }\n\n        // Work around for missing responses in specification, e.g. for petstore.yaml\n        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {\n            const body: void = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"void\", \"\"\n            ) as void;\n            return body;\n        }\n\n        let body = await response.body.text();\n        throw new ApiException<string>(response.httpStatusCode, body);\n    }\n\n    /**\n     * Unwraps the actual response sent by the server from the response context and deserializes the response content\n     * to the expected objects\n     *\n     * @params response Response returned by the server for a request to v1SinkCreate\n     * @throws ApiException if the response code was not in [200, 299]\n     */\n     public async v1SinkCreate(response: ResponseContext): Promise<SinkOut > {\n        const contentType = ObjectSerializer.normalizeMediaType(response.headers[\"content-type\"]);\n\n        if (isCodeInRange(\"201\", response.httpStatusCode)) {\n            const body: SinkOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"SinkOut\", \"\"\n            ) as SinkOut;\n            return body;\n        }\n        if (isCodeInRange(\"400\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(400, body);\n        }\n        if (isCodeInRange(\"401\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(401, body);\n        }\n        if (isCodeInRange(\"403\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(403, body);\n        }\n        if (isCodeInRange(\"404\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(404, body);\n        }\n        if (isCodeInRange(\"409\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(409, body);\n        }\n        if (isCodeInRange(\"422\", response.httpStatusCode)) {\n            const body: HTTPValidationError = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HTTPValidationError\", \"\"\n            ) as HTTPValidationError;\n            throw new ApiException<HTTPValidationError>(422, body);\n        }\n        if (isCodeInRange(\"429\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(429, body);\n        }\n\n        // Work around for missing responses in specification, e.g. for petstore.yaml\n        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {\n            const body: SinkOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"SinkOut\", \"\"\n            ) as SinkOut;\n            return body;\n        }\n\n        let body = await response.body.text();\n        throw new ApiException<string>(response.httpStatusCode, body);\n    }\n\n    /**\n     * Unwraps the actual response sent by the server from the response context and deserializes the response content\n     * to the expected objects\n     *\n     * @params response Response returned by the server for a request to v1SinkGet\n     * @throws ApiException if the response code was not in [200, 299]\n     */\n     public async v1SinkGet(response: ResponseContext): Promise<SinkOut > {\n        const contentType = ObjectSerializer.normalizeMediaType(response.headers[\"content-type\"]);\n\n        if (isCodeInRange(\"200\", response.httpStatusCode)) {\n            const body: SinkOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"SinkOut\", \"\"\n            ) as SinkOut;\n            return body;\n        }\n        if (isCodeInRange(\"400\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(400, body);\n        }\n        if (isCodeInRange(\"401\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(401, body);\n        }\n        if (isCodeInRange(\"403\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(403, body);\n        }\n        if (isCodeInRange(\"404\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(404, body);\n        }\n        if (isCodeInRange(\"409\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(409, body);\n        }\n        if (isCodeInRange(\"422\", response.httpStatusCode)) {\n            const body: HTTPValidationError = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HTTPValidationError\", \"\"\n            ) as HTTPValidationError;\n            throw new ApiException<HTTPValidationError>(422, body);\n        }\n        if (isCodeInRange(\"429\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(429, body);\n        }\n\n        // Work around for missing responses in specification, e.g. for petstore.yaml\n        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {\n            const body: SinkOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"SinkOut\", \"\"\n            ) as SinkOut;\n            return body;\n        }\n\n        let body = await response.body.text();\n        throw new ApiException<string>(response.httpStatusCode, body);\n    }\n\n    /**\n     * Unwraps the actual response sent by the server from the response context and deserializes the response content\n     * to the expected objects\n     *\n     * @params response Response returned by the server for a request to v1SinkList\n     * @throws ApiException if the response code was not in [200, 299]\n     */\n     public async v1SinkList(response: ResponseContext): Promise<ListResponseSinkOut > {\n        const contentType = ObjectSerializer.normalizeMediaType(response.headers[\"content-type\"]);\n\n        if (isCodeInRange(\"200\", response.httpStatusCode)) {\n            const body: ListResponseSinkOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"ListResponseSinkOut\", \"\"\n            ) as ListResponseSinkOut;\n            return body;\n        }\n        if (isCodeInRange(\"400\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(400, body);\n        }\n        if (isCodeInRange(\"401\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(401, body);\n        }\n        if (isCodeInRange(\"403\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(403, body);\n        }\n        if (isCodeInRange(\"404\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(404, body);\n        }\n        if (isCodeInRange(\"409\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(409, body);\n        }\n        if (isCodeInRange(\"422\", response.httpStatusCode)) {\n            const body: HTTPValidationError = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HTTPValidationError\", \"\"\n            ) as HTTPValidationError;\n            throw new ApiException<HTTPValidationError>(422, body);\n        }\n        if (isCodeInRange(\"429\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(429, body);\n        }\n\n        // Work around for missing responses in specification, e.g. for petstore.yaml\n        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {\n            const body: ListResponseSinkOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"ListResponseSinkOut\", \"\"\n            ) as ListResponseSinkOut;\n            return body;\n        }\n\n        let body = await response.body.text();\n        throw new ApiException<string>(response.httpStatusCode, body);\n    }\n\n}\n"],"names":[],"mappings":"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"}},
    {"offset": {"line": 3252, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 3256, "column": 0}, "map": {"version":3,"sources":["turbopack://[project]/node_modules/svix/src/openapi/apis/EnvironmentApi.ts"],"sourcesContent":["// TODO: better import syntax?\nimport { BaseAPIRequestFactory, RequiredError } from './baseapi';\nimport {Configuration} from '../configuration';\nimport { RequestContext, HttpMethod, ResponseContext, HttpFile} from '../http/http';\nimport {ObjectSerializer} from '../models/ObjectSerializer';\nimport {ApiException} from './exception';\nimport {isCodeInRange} from '../util';\n\nimport { EnvironmentIn } from '../models/EnvironmentIn';\nimport { EnvironmentOut } from '../models/EnvironmentOut';\nimport { HTTPValidationError } from '../models/HTTPValidationError';\nimport { HttpErrorOut } from '../models/HttpErrorOut';\n\n/**\n * no description\n */\nexport class EnvironmentApiRequestFactory extends BaseAPIRequestFactory {\n\n    /**\n     * Download a JSON file containing all org-settings and event types\n     * Export Environment Configuration\n     * @param idempotencyKey The request&#39;s idempotency key\n     */\n    public async v1EnvironmentExport(idempotencyKey?: string, _options?: Configuration): Promise<RequestContext> {\n        let _config = _options || this.configuration;\n\n\n        // Path Params\n        const localVarPath = '/api/v1/environment/export';\n\n        // Make Request Context\n        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.POST);\n        requestContext.setHeaderParam(\"Accept\", \"application/json, */*;q=0.8\")\n        const randomId = Math.floor(Math.random() * Math.pow(2, 32))\n        requestContext.setHeaderParam(\"svix-req-id\", randomId.toString())\n\n        // Query Params\n\n        // Header Params\n        if (idempotencyKey !== undefined) {\n            requestContext.setHeaderParam(\"idempotency-key\", ObjectSerializer.serialize(idempotencyKey, \"string\", \"\"));\n        }\n\n        // Form Params\n\n\n        // Body Params\n\n        let authMethod = null;\n        // Apply auth methods\n        authMethod = _config.authMethods[\"HTTPBearer\"]\n        if (authMethod) {\n            await authMethod.applySecurityAuthentication(requestContext);\n        }\n\n        return requestContext;\n    }\n\n    /**\n     * Download a JSON file containing all org-settings and event types\n     * Export Environment Configuration\n     */\n    public async v1EnvironmentExportGet(_options?: Configuration): Promise<RequestContext> {\n        let _config = _options || this.configuration;\n\n        // Path Params\n        const localVarPath = '/api/v1/environment/export';\n\n        // Make Request Context\n        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.GET);\n        requestContext.setHeaderParam(\"Accept\", \"application/json, */*;q=0.8\")\n        const randomId = Math.floor(Math.random() * Math.pow(2, 32))\n        requestContext.setHeaderParam(\"svix-req-id\", randomId.toString())\n\n        // Query Params\n\n        // Header Params\n\n        // Form Params\n\n\n        // Body Params\n\n        let authMethod = null;\n        // Apply auth methods\n        authMethod = _config.authMethods[\"HTTPBearer\"]\n        if (authMethod) {\n            await authMethod.applySecurityAuthentication(requestContext);\n        }\n\n        return requestContext;\n    }\n\n    /**\n     * Import a configuration into the active organization. It doesn't delete anything, only adds/updates what was passed to it.\n     * Import Environment Configuration\n     * @param environmentIn \n     * @param idempotencyKey The request&#39;s idempotency key\n     */\n    public async v1EnvironmentImport(environmentIn: EnvironmentIn, idempotencyKey?: string, _options?: Configuration): Promise<RequestContext> {\n        let _config = _options || this.configuration;\n\n        // verify required parameter 'environmentIn' is not null or undefined\n        if (environmentIn === null || environmentIn === undefined) {\n            throw new RequiredError('Required parameter environmentIn was null or undefined when calling v1EnvironmentImport.');\n        }\n\n\n\n        // Path Params\n        const localVarPath = '/api/v1/environment/import';\n\n        // Make Request Context\n        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.POST);\n        requestContext.setHeaderParam(\"Accept\", \"application/json, */*;q=0.8\")\n        const randomId = Math.floor(Math.random() * Math.pow(2, 32))\n        requestContext.setHeaderParam(\"svix-req-id\", randomId.toString())\n\n        // Query Params\n\n        // Header Params\n        if (idempotencyKey !== undefined) {\n            requestContext.setHeaderParam(\"idempotency-key\", ObjectSerializer.serialize(idempotencyKey, \"string\", \"\"));\n        }\n\n        // Form Params\n\n\n        // Body Params\n        const contentType = ObjectSerializer.getPreferredMediaType([\n            \"application/json\"\n        ]);\n        requestContext.setHeaderParam(\"Content-Type\", contentType);\n        const serializedBody = ObjectSerializer.stringify(\n            ObjectSerializer.serialize(environmentIn, \"EnvironmentIn\", \"\"),\n            contentType\n        );\n        requestContext.setBody(serializedBody);\n\n        let authMethod = null;\n        // Apply auth methods\n        authMethod = _config.authMethods[\"HTTPBearer\"]\n        if (authMethod) {\n            await authMethod.applySecurityAuthentication(requestContext);\n        }\n\n        return requestContext;\n    }\n\n}\n\nexport class EnvironmentApiResponseProcessor {\n\n    /**\n     * Unwraps the actual response sent by the server from the response context and deserializes the response content\n     * to the expected objects\n     *\n     * @params response Response returned by the server for a request to v1EnvironmentExport\n     * @throws ApiException if the response code was not in [200, 299]\n     */\n     public async v1EnvironmentExport(response: ResponseContext): Promise<EnvironmentOut > {\n        const contentType = ObjectSerializer.normalizeMediaType(response.headers[\"content-type\"]);\n\n        if (isCodeInRange(\"200\", response.httpStatusCode)) {\n            const body: EnvironmentOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"EnvironmentOut\", \"\"\n            ) as EnvironmentOut;\n            return body;\n        }\n        if (isCodeInRange(\"400\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(400, body);\n        }\n        if (isCodeInRange(\"401\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(401, body);\n        }\n        if (isCodeInRange(\"403\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(403, body);\n        }\n        if (isCodeInRange(\"404\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(404, body);\n        }\n        if (isCodeInRange(\"409\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(409, body);\n        }\n        if (isCodeInRange(\"422\", response.httpStatusCode)) {\n            const body: HTTPValidationError = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HTTPValidationError\", \"\"\n            ) as HTTPValidationError;\n            throw new ApiException<HTTPValidationError>(422, body);\n        }\n        if (isCodeInRange(\"429\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(429, body);\n        }\n\n        // Work around for missing responses in specification, e.g. for petstore.yaml\n        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {\n            const body: EnvironmentOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"EnvironmentOut\", \"\"\n            ) as EnvironmentOut;\n            return body;\n        }\n\n        let body = await response.body.text();\n        throw new ApiException<string>(response.httpStatusCode, body);\n    }\n\n    /**\n     * Unwraps the actual response sent by the server from the response context and deserializes the response content\n     * to the expected objects\n     *\n     * @params response Response returned by the server for a request to v1EnvironmentExportGet\n     * @throws ApiException if the response code was not in [200, 299]\n     */\n     public async v1EnvironmentExportGet(response: ResponseContext): Promise<EnvironmentOut > {\n        const contentType = ObjectSerializer.normalizeMediaType(response.headers[\"content-type\"]);\n\n        if (isCodeInRange(\"200\", response.httpStatusCode)) {\n            const body: EnvironmentOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"EnvironmentOut\", \"\"\n            ) as EnvironmentOut;\n            return body;\n        }\n        if (isCodeInRange(\"400\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(400, body);\n        }\n        if (isCodeInRange(\"401\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(401, body);\n        }\n        if (isCodeInRange(\"403\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(403, body);\n        }\n        if (isCodeInRange(\"404\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(404, body);\n        }\n        if (isCodeInRange(\"409\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(409, body);\n        }\n        if (isCodeInRange(\"422\", response.httpStatusCode)) {\n            const body: HTTPValidationError = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HTTPValidationError\", \"\"\n            ) as HTTPValidationError;\n            throw new ApiException<HTTPValidationError>(422, body);\n        }\n        if (isCodeInRange(\"429\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(429, body);\n        }\n\n        // Work around for missing responses in specification, e.g. for petstore.yaml\n        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {\n            const body: EnvironmentOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"EnvironmentOut\", \"\"\n            ) as EnvironmentOut;\n            return body;\n        }\n\n        let body = await response.body.text();\n        throw new ApiException<string>(response.httpStatusCode, body);\n    }\n\n    /**\n     * Unwraps the actual response sent by the server from the response context and deserializes the response content\n     * to the expected objects\n     *\n     * @params response Response returned by the server for a request to v1EnvironmentImport\n     * @throws ApiException if the response code was not in [200, 299]\n     */\n     public async v1EnvironmentImport(response: ResponseContext): Promise<void > {\n        const contentType = ObjectSerializer.normalizeMediaType(response.headers[\"content-type\"]);\n\n        if (isCodeInRange(\"204\", response.httpStatusCode)) {\n            return;\n        }\n        if (isCodeInRange(\"400\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(400, body);\n        }\n        if (isCodeInRange(\"401\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(401, body);\n        }\n        if (isCodeInRange(\"403\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(403, body);\n        }\n        if (isCodeInRange(\"404\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(404, body);\n        }\n        if (isCodeInRange(\"409\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(409, body);\n        }\n        if (isCodeInRange(\"422\", response.httpStatusCode)) {\n            const body: HTTPValidationError = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HTTPValidationError\", \"\"\n            ) as HTTPValidationError;\n            throw new ApiException<HTTPValidationError>(422, body);\n        }\n        if (isCodeInRange(\"429\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(429, body);\n        }\n\n        // Work around for missing responses in specification, e.g. for petstore.yaml\n        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {\n            const body: void = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"void\", \"\"\n            ) as void;\n            return body;\n        }\n\n        let body = await response.body.text();\n        throw new ApiException<string>(response.httpStatusCode, body);\n    }\n\n}\n"],"names":[],"mappings":"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"}},
    {"offset": {"line": 3490, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 3494, "column": 0}, "map": {"version":3,"sources":["turbopack://[project]/node_modules/svix/src/openapi/apis/EnvironmentSettingsApi.ts"],"sourcesContent":["// TODO: better import syntax?\nimport { BaseAPIRequestFactory, RequiredError } from './baseapi';\nimport {Configuration} from '../configuration';\nimport { RequestContext, HttpMethod, ResponseContext, HttpFile} from '../http/http';\nimport {ObjectSerializer} from '../models/ObjectSerializer';\nimport {ApiException} from './exception';\nimport {isCodeInRange} from '../util';\n\nimport { EnvironmentSettingsOut } from '../models/EnvironmentSettingsOut';\nimport { HTTPValidationError } from '../models/HTTPValidationError';\nimport { HttpErrorOut } from '../models/HttpErrorOut';\n\n/**\n * no description\n */\nexport class EnvironmentSettingsApiRequestFactory extends BaseAPIRequestFactory {\n\n    /**\n     * Get the environment's settings\n     * Get Org Settings\n     */\n    public async v1EnvironmentGetSettings(_options?: Configuration): Promise<RequestContext> {\n        let _config = _options || this.configuration;\n\n        // Path Params\n        const localVarPath = '/api/v1/environment/settings';\n\n        // Make Request Context\n        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.GET);\n        requestContext.setHeaderParam(\"Accept\", \"application/json, */*;q=0.8\")\n        const randomId = Math.floor(Math.random() * Math.pow(2, 32))\n        requestContext.setHeaderParam(\"svix-req-id\", randomId.toString())\n\n        // Query Params\n\n        // Header Params\n\n        // Form Params\n\n\n        // Body Params\n\n        let authMethod = null;\n        // Apply auth methods\n        authMethod = _config.authMethods[\"HTTPBearer\"]\n        if (authMethod) {\n            await authMethod.applySecurityAuthentication(requestContext);\n        }\n\n        return requestContext;\n    }\n\n}\n\nexport class EnvironmentSettingsApiResponseProcessor {\n\n    /**\n     * Unwraps the actual response sent by the server from the response context and deserializes the response content\n     * to the expected objects\n     *\n     * @params response Response returned by the server for a request to v1EnvironmentGetSettings\n     * @throws ApiException if the response code was not in [200, 299]\n     */\n     public async v1EnvironmentGetSettings(response: ResponseContext): Promise<EnvironmentSettingsOut > {\n        const contentType = ObjectSerializer.normalizeMediaType(response.headers[\"content-type\"]);\n\n        if (isCodeInRange(\"200\", response.httpStatusCode)) {\n            const body: EnvironmentSettingsOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"EnvironmentSettingsOut\", \"\"\n            ) as EnvironmentSettingsOut;\n            return body;\n        }\n        if (isCodeInRange(\"400\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(400, body);\n        }\n        if (isCodeInRange(\"401\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(401, body);\n        }\n        if (isCodeInRange(\"403\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(403, body);\n        }\n        if (isCodeInRange(\"404\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(404, body);\n        }\n        if (isCodeInRange(\"409\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(409, body);\n        }\n        if (isCodeInRange(\"422\", response.httpStatusCode)) {\n            const body: HTTPValidationError = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HTTPValidationError\", \"\"\n            ) as HTTPValidationError;\n            throw new ApiException<HTTPValidationError>(422, body);\n        }\n        if (isCodeInRange(\"429\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(429, body);\n        }\n\n        // Work around for missing responses in specification, e.g. for petstore.yaml\n        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {\n            const body: EnvironmentSettingsOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"EnvironmentSettingsOut\", \"\"\n            ) as EnvironmentSettingsOut;\n            return body;\n        }\n\n        let body = await response.body.text();\n        throw new ApiException<string>(response.httpStatusCode, body);\n    }\n\n}\n"],"names":[],"mappings":"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"}},
    {"offset": {"line": 3596, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 3600, "column": 0}, "map": {"version":3,"sources":["turbopack://[project]/node_modules/svix/src/openapi/apis/EventTypeApi.ts"],"sourcesContent":["// TODO: better import syntax?\nimport { BaseAPIRequestFactory, RequiredError } from './baseapi';\nimport {Configuration} from '../configuration';\nimport { RequestContext, HttpMethod, ResponseContext, HttpFile} from '../http/http';\nimport {ObjectSerializer} from '../models/ObjectSerializer';\nimport {ApiException} from './exception';\nimport {isCodeInRange} from '../util';\n\nimport { EventTypeExampleOut } from '../models/EventTypeExampleOut';\nimport { EventTypeImportOpenApiIn } from '../models/EventTypeImportOpenApiIn';\nimport { EventTypeImportOpenApiOut } from '../models/EventTypeImportOpenApiOut';\nimport { EventTypeIn } from '../models/EventTypeIn';\nimport { EventTypeOut } from '../models/EventTypeOut';\nimport { EventTypePatch } from '../models/EventTypePatch';\nimport { EventTypeSchemaIn } from '../models/EventTypeSchemaIn';\nimport { EventTypeUpdate } from '../models/EventTypeUpdate';\nimport { ExportEventTypeOut } from '../models/ExportEventTypeOut';\nimport { HTTPValidationError } from '../models/HTTPValidationError';\nimport { HttpErrorOut } from '../models/HttpErrorOut';\nimport { ListResponseEventTypeOut } from '../models/ListResponseEventTypeOut';\nimport { Ordering } from '../models/Ordering';\nimport { RetryScheduleInOut } from '../models/RetryScheduleInOut';\n\n/**\n * no description\n */\nexport class EventTypeApiRequestFactory extends BaseAPIRequestFactory {\n\n    /**\n     * Create new or unarchive existing event type.  Unarchiving an event type will allow endpoints to filter on it and messages to be sent with it. Endpoints filtering on the event type before archival will continue to filter on it. This operation does not preserve the description and schemas.\n     * Create Event Type\n     * @param eventTypeIn \n     * @param idempotencyKey The request&#39;s idempotency key\n     */\n    public async v1EventTypeCreate(eventTypeIn: EventTypeIn, idempotencyKey?: string, _options?: Configuration): Promise<RequestContext> {\n        let _config = _options || this.configuration;\n\n        // verify required parameter 'eventTypeIn' is not null or undefined\n        if (eventTypeIn === null || eventTypeIn === undefined) {\n            throw new RequiredError('Required parameter eventTypeIn was null or undefined when calling v1EventTypeCreate.');\n        }\n\n\n\n        // Path Params\n        const localVarPath = '/api/v1/event-type';\n\n        // Make Request Context\n        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.POST);\n        requestContext.setHeaderParam(\"Accept\", \"application/json, */*;q=0.8\")\n        const randomId = Math.floor(Math.random() * Math.pow(2, 32))\n        requestContext.setHeaderParam(\"svix-req-id\", randomId.toString())\n\n        // Query Params\n\n        // Header Params\n        if (idempotencyKey !== undefined) {\n            requestContext.setHeaderParam(\"idempotency-key\", ObjectSerializer.serialize(idempotencyKey, \"string\", \"\"));\n        }\n\n        // Form Params\n\n\n        // Body Params\n        const contentType = ObjectSerializer.getPreferredMediaType([\n            \"application/json\"\n        ]);\n        requestContext.setHeaderParam(\"Content-Type\", contentType);\n        const serializedBody = ObjectSerializer.stringify(\n            ObjectSerializer.serialize(eventTypeIn, \"EventTypeIn\", \"\"),\n            contentType\n        );\n        requestContext.setBody(serializedBody);\n\n        let authMethod = null;\n        // Apply auth methods\n        authMethod = _config.authMethods[\"HTTPBearer\"]\n        if (authMethod) {\n            await authMethod.applySecurityAuthentication(requestContext);\n        }\n\n        return requestContext;\n    }\n\n    /**\n     * Archive an event type.  Endpoints already configured to filter on an event type will continue to do so after archival. However, new messages can not be sent with it and endpoints can not filter on it. An event type can be unarchived with the [create operation](#operation/create_event_type_api_v1_event_type__post).\n     * Delete Event Type\n     * @param eventTypeName The event type&#39;s name\n     * @param expunge By default event types are archived when \\&quot;deleted\\&quot;. Passing this to &#x60;true&#x60; deletes them entirely.\n     */\n    public async v1EventTypeDelete(eventTypeName: string, expunge?: boolean, _options?: Configuration): Promise<RequestContext> {\n        let _config = _options || this.configuration;\n\n        // verify required parameter 'eventTypeName' is not null or undefined\n        if (eventTypeName === null || eventTypeName === undefined) {\n            throw new RequiredError('Required parameter eventTypeName was null or undefined when calling v1EventTypeDelete.');\n        }\n\n\n\n        // Path Params\n        const localVarPath = '/api/v1/event-type/{event_type_name}'\n            .replace('{' + 'event_type_name' + '}', encodeURIComponent(String(eventTypeName)));\n\n        // Make Request Context\n        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.DELETE);\n        requestContext.setHeaderParam(\"Accept\", \"application/json, */*;q=0.8\")\n        const randomId = Math.floor(Math.random() * Math.pow(2, 32))\n        requestContext.setHeaderParam(\"svix-req-id\", randomId.toString())\n\n        // Query Params\n        if (expunge !== undefined) {\n            requestContext.setQueryParam(\"expunge\", ObjectSerializer.serialize(expunge, \"boolean\", \"\"));\n        }\n\n        // Header Params\n\n        // Form Params\n\n\n        // Body Params\n\n        let authMethod = null;\n        // Apply auth methods\n        authMethod = _config.authMethods[\"HTTPBearer\"]\n        if (authMethod) {\n            await authMethod.applySecurityAuthentication(requestContext);\n        }\n\n        return requestContext;\n    }\n\n    /**\n     * Exports event type definitions based on the OpenAPI schemas associated with each existing event type\n     * Event Type Export From Openapi\n     * @param idempotencyKey The request&#39;s idempotency key\n     */\n    public async v1EventTypeExportOpenapi(idempotencyKey?: string, _options?: Configuration): Promise<RequestContext> {\n        let _config = _options || this.configuration;\n\n\n        // Path Params\n        const localVarPath = '/api/v1/event-type/export/openapi';\n\n        // Make Request Context\n        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.POST);\n        requestContext.setHeaderParam(\"Accept\", \"application/json, */*;q=0.8\")\n        const randomId = Math.floor(Math.random() * Math.pow(2, 32))\n        requestContext.setHeaderParam(\"svix-req-id\", randomId.toString())\n\n        // Query Params\n\n        // Header Params\n        if (idempotencyKey !== undefined) {\n            requestContext.setHeaderParam(\"idempotency-key\", ObjectSerializer.serialize(idempotencyKey, \"string\", \"\"));\n        }\n\n        // Form Params\n\n\n        // Body Params\n\n        let authMethod = null;\n        // Apply auth methods\n        authMethod = _config.authMethods[\"HTTPBearer\"]\n        if (authMethod) {\n            await authMethod.applySecurityAuthentication(requestContext);\n        }\n\n        return requestContext;\n    }\n\n    /**\n     * Generates a fake example from the given JSONSchema\n     * Generate Schema Example\n     * @param eventTypeSchemaIn \n     * @param idempotencyKey The request&#39;s idempotency key\n     */\n    public async v1EventTypeGenerateExample(eventTypeSchemaIn: EventTypeSchemaIn, idempotencyKey?: string, _options?: Configuration): Promise<RequestContext> {\n        let _config = _options || this.configuration;\n\n        // verify required parameter 'eventTypeSchemaIn' is not null or undefined\n        if (eventTypeSchemaIn === null || eventTypeSchemaIn === undefined) {\n            throw new RequiredError('Required parameter eventTypeSchemaIn was null or undefined when calling v1EventTypeGenerateExample.');\n        }\n\n\n\n        // Path Params\n        const localVarPath = '/api/v1/event-type/schema/generate-example';\n\n        // Make Request Context\n        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.POST);\n        requestContext.setHeaderParam(\"Accept\", \"application/json, */*;q=0.8\")\n        const randomId = Math.floor(Math.random() * Math.pow(2, 32))\n        requestContext.setHeaderParam(\"svix-req-id\", randomId.toString())\n\n        // Query Params\n\n        // Header Params\n        if (idempotencyKey !== undefined) {\n            requestContext.setHeaderParam(\"idempotency-key\", ObjectSerializer.serialize(idempotencyKey, \"string\", \"\"));\n        }\n\n        // Form Params\n\n\n        // Body Params\n        const contentType = ObjectSerializer.getPreferredMediaType([\n            \"application/json\"\n        ]);\n        requestContext.setHeaderParam(\"Content-Type\", contentType);\n        const serializedBody = ObjectSerializer.stringify(\n            ObjectSerializer.serialize(eventTypeSchemaIn, \"EventTypeSchemaIn\", \"\"),\n            contentType\n        );\n        requestContext.setBody(serializedBody);\n\n        let authMethod = null;\n        // Apply auth methods\n        authMethod = _config.authMethods[\"HTTPBearer\"]\n        if (authMethod) {\n            await authMethod.applySecurityAuthentication(requestContext);\n        }\n\n        return requestContext;\n    }\n\n    /**\n     * Get an event type.\n     * Get Event Type\n     * @param eventTypeName The event type&#39;s name\n     */\n    public async v1EventTypeGet(eventTypeName: string, _options?: Configuration): Promise<RequestContext> {\n        let _config = _options || this.configuration;\n\n        // verify required parameter 'eventTypeName' is not null or undefined\n        if (eventTypeName === null || eventTypeName === undefined) {\n            throw new RequiredError('Required parameter eventTypeName was null or undefined when calling v1EventTypeGet.');\n        }\n\n\n        // Path Params\n        const localVarPath = '/api/v1/event-type/{event_type_name}'\n            .replace('{' + 'event_type_name' + '}', encodeURIComponent(String(eventTypeName)));\n\n        // Make Request Context\n        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.GET);\n        requestContext.setHeaderParam(\"Accept\", \"application/json, */*;q=0.8\")\n        const randomId = Math.floor(Math.random() * Math.pow(2, 32))\n        requestContext.setHeaderParam(\"svix-req-id\", randomId.toString())\n\n        // Query Params\n\n        // Header Params\n\n        // Form Params\n\n\n        // Body Params\n\n        let authMethod = null;\n        // Apply auth methods\n        authMethod = _config.authMethods[\"HTTPBearer\"]\n        if (authMethod) {\n            await authMethod.applySecurityAuthentication(requestContext);\n        }\n\n        return requestContext;\n    }\n\n    /**\n     * Gets the retry schedule for messages using the given event type\n     * Get Retry Schedule\n     * @param eventTypeName The event type&#39;s name\n     */\n    public async v1EventTypeGetRetrySchedule(eventTypeName: string, _options?: Configuration): Promise<RequestContext> {\n        let _config = _options || this.configuration;\n\n        // verify required parameter 'eventTypeName' is not null or undefined\n        if (eventTypeName === null || eventTypeName === undefined) {\n            throw new RequiredError('Required parameter eventTypeName was null or undefined when calling v1EventTypeGetRetrySchedule.');\n        }\n\n\n        // Path Params\n        const localVarPath = '/api/v1/event-type/{event_type_name}/retry-schedule'\n            .replace('{' + 'event_type_name' + '}', encodeURIComponent(String(eventTypeName)));\n\n        // Make Request Context\n        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.GET);\n        requestContext.setHeaderParam(\"Accept\", \"application/json, */*;q=0.8\")\n        const randomId = Math.floor(Math.random() * Math.pow(2, 32))\n        requestContext.setHeaderParam(\"svix-req-id\", randomId.toString())\n\n        // Query Params\n\n        // Header Params\n\n        // Form Params\n\n\n        // Body Params\n\n        let authMethod = null;\n        // Apply auth methods\n        authMethod = _config.authMethods[\"HTTPBearer\"]\n        if (authMethod) {\n            await authMethod.applySecurityAuthentication(requestContext);\n        }\n\n        return requestContext;\n    }\n\n    /**\n     * Given an OpenAPI spec, create new or update existing event types. If an existing `archived` event type is updated, it will be unarchived.  The importer will convert all webhooks found in the either the `webhooks` or `x-webhooks` top-level.\n     * Event Type Import From Openapi\n     * @param eventTypeImportOpenApiIn Import a list of event types from webhooks defined in an OpenAPI spec.  The OpenAPI spec can be specified as either &#x60;spec&#x60; given the spec as a JSON object, or as &#x60;specRaw&#x60; (a &#x60;string&#x60;) which will be parsed as YAML or JSON by the server. Sending neither or both is invalid, resulting in a &#x60;400&#x60; **Bad Request**.\n     * @param idempotencyKey The request&#39;s idempotency key\n     */\n    public async v1EventTypeImportOpenapi(eventTypeImportOpenApiIn: EventTypeImportOpenApiIn, idempotencyKey?: string, _options?: Configuration): Promise<RequestContext> {\n        let _config = _options || this.configuration;\n\n        // verify required parameter 'eventTypeImportOpenApiIn' is not null or undefined\n        if (eventTypeImportOpenApiIn === null || eventTypeImportOpenApiIn === undefined) {\n            throw new RequiredError('Required parameter eventTypeImportOpenApiIn was null or undefined when calling v1EventTypeImportOpenapi.');\n        }\n\n\n\n        // Path Params\n        const localVarPath = '/api/v1/event-type/import/openapi';\n\n        // Make Request Context\n        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.POST);\n        requestContext.setHeaderParam(\"Accept\", \"application/json, */*;q=0.8\")\n        const randomId = Math.floor(Math.random() * Math.pow(2, 32))\n        requestContext.setHeaderParam(\"svix-req-id\", randomId.toString())\n\n        // Query Params\n\n        // Header Params\n        if (idempotencyKey !== undefined) {\n            requestContext.setHeaderParam(\"idempotency-key\", ObjectSerializer.serialize(idempotencyKey, \"string\", \"\"));\n        }\n\n        // Form Params\n\n\n        // Body Params\n        const contentType = ObjectSerializer.getPreferredMediaType([\n            \"application/json\"\n        ]);\n        requestContext.setHeaderParam(\"Content-Type\", contentType);\n        const serializedBody = ObjectSerializer.stringify(\n            ObjectSerializer.serialize(eventTypeImportOpenApiIn, \"EventTypeImportOpenApiIn\", \"\"),\n            contentType\n        );\n        requestContext.setBody(serializedBody);\n\n        let authMethod = null;\n        // Apply auth methods\n        authMethod = _config.authMethods[\"HTTPBearer\"]\n        if (authMethod) {\n            await authMethod.applySecurityAuthentication(requestContext);\n        }\n\n        return requestContext;\n    }\n\n    /**\n     * Return the list of event types.\n     * List Event Types\n     * @param limit Limit the number of returned items\n     * @param iterator The iterator returned from a prior invocation\n     * @param order The sorting order of the returned items\n     * @param includeArchived When &#x60;true&#x60; archived (deleted but not expunged) items are included in the response\n     * @param withContent When &#x60;true&#x60; the full item (including the schema) is included in the response\n     */\n    public async v1EventTypeList(limit?: number, iterator?: string, order?: Ordering, includeArchived?: boolean, withContent?: boolean, _options?: Configuration): Promise<RequestContext> {\n        let _config = _options || this.configuration;\n\n\n\n\n\n\n        // Path Params\n        const localVarPath = '/api/v1/event-type';\n\n        // Make Request Context\n        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.GET);\n        requestContext.setHeaderParam(\"Accept\", \"application/json, */*;q=0.8\")\n        const randomId = Math.floor(Math.random() * Math.pow(2, 32))\n        requestContext.setHeaderParam(\"svix-req-id\", randomId.toString())\n\n        // Query Params\n        if (limit !== undefined) {\n            requestContext.setQueryParam(\"limit\", ObjectSerializer.serialize(limit, \"number\", \"uint64\"));\n        }\n        if (iterator !== undefined) {\n            requestContext.setQueryParam(\"iterator\", ObjectSerializer.serialize(iterator, \"string\", \"\"));\n        }\n        if (order !== undefined) {\n            requestContext.setQueryParam(\"order\", ObjectSerializer.serialize(order, \"Ordering\", \"\"));\n        }\n        if (includeArchived !== undefined) {\n            requestContext.setQueryParam(\"include_archived\", ObjectSerializer.serialize(includeArchived, \"boolean\", \"\"));\n        }\n        if (withContent !== undefined) {\n            requestContext.setQueryParam(\"with_content\", ObjectSerializer.serialize(withContent, \"boolean\", \"\"));\n        }\n\n        // Header Params\n\n        // Form Params\n\n\n        // Body Params\n\n        let authMethod = null;\n        // Apply auth methods\n        authMethod = _config.authMethods[\"HTTPBearer\"]\n        if (authMethod) {\n            await authMethod.applySecurityAuthentication(requestContext);\n        }\n\n        return requestContext;\n    }\n\n    /**\n     * Partially update an event type.\n     * Patch Event Type\n     * @param eventTypeName The event type&#39;s name\n     * @param eventTypePatch \n     */\n    public async v1EventTypePatch(eventTypeName: string, eventTypePatch: EventTypePatch, _options?: Configuration): Promise<RequestContext> {\n        let _config = _options || this.configuration;\n\n        // verify required parameter 'eventTypeName' is not null or undefined\n        if (eventTypeName === null || eventTypeName === undefined) {\n            throw new RequiredError('Required parameter eventTypeName was null or undefined when calling v1EventTypePatch.');\n        }\n\n\n        // verify required parameter 'eventTypePatch' is not null or undefined\n        if (eventTypePatch === null || eventTypePatch === undefined) {\n            throw new RequiredError('Required parameter eventTypePatch was null or undefined when calling v1EventTypePatch.');\n        }\n\n\n        // Path Params\n        const localVarPath = '/api/v1/event-type/{event_type_name}'\n            .replace('{' + 'event_type_name' + '}', encodeURIComponent(String(eventTypeName)));\n\n        // Make Request Context\n        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.PATCH);\n        requestContext.setHeaderParam(\"Accept\", \"application/json, */*;q=0.8\")\n        const randomId = Math.floor(Math.random() * Math.pow(2, 32))\n        requestContext.setHeaderParam(\"svix-req-id\", randomId.toString())\n\n        // Query Params\n\n        // Header Params\n\n        // Form Params\n\n\n        // Body Params\n        const contentType = ObjectSerializer.getPreferredMediaType([\n            \"application/json\"\n        ]);\n        requestContext.setHeaderParam(\"Content-Type\", contentType);\n        const serializedBody = ObjectSerializer.stringify(\n            ObjectSerializer.serialize(eventTypePatch, \"EventTypePatch\", \"\"),\n            contentType\n        );\n        requestContext.setBody(serializedBody);\n\n        let authMethod = null;\n        // Apply auth methods\n        authMethod = _config.authMethods[\"HTTPBearer\"]\n        if (authMethod) {\n            await authMethod.applySecurityAuthentication(requestContext);\n        }\n\n        return requestContext;\n    }\n\n    /**\n     * Update an event type.\n     * Update Event Type\n     * @param eventTypeName The event type&#39;s name\n     * @param eventTypeUpdate \n     */\n    public async v1EventTypeUpdate(eventTypeName: string, eventTypeUpdate: EventTypeUpdate, _options?: Configuration): Promise<RequestContext> {\n        let _config = _options || this.configuration;\n\n        // verify required parameter 'eventTypeName' is not null or undefined\n        if (eventTypeName === null || eventTypeName === undefined) {\n            throw new RequiredError('Required parameter eventTypeName was null or undefined when calling v1EventTypeUpdate.');\n        }\n\n\n        // verify required parameter 'eventTypeUpdate' is not null or undefined\n        if (eventTypeUpdate === null || eventTypeUpdate === undefined) {\n            throw new RequiredError('Required parameter eventTypeUpdate was null or undefined when calling v1EventTypeUpdate.');\n        }\n\n\n        // Path Params\n        const localVarPath = '/api/v1/event-type/{event_type_name}'\n            .replace('{' + 'event_type_name' + '}', encodeURIComponent(String(eventTypeName)));\n\n        // Make Request Context\n        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.PUT);\n        requestContext.setHeaderParam(\"Accept\", \"application/json, */*;q=0.8\")\n        const randomId = Math.floor(Math.random() * Math.pow(2, 32))\n        requestContext.setHeaderParam(\"svix-req-id\", randomId.toString())\n\n        // Query Params\n\n        // Header Params\n\n        // Form Params\n\n\n        // Body Params\n        const contentType = ObjectSerializer.getPreferredMediaType([\n            \"application/json\"\n        ]);\n        requestContext.setHeaderParam(\"Content-Type\", contentType);\n        const serializedBody = ObjectSerializer.stringify(\n            ObjectSerializer.serialize(eventTypeUpdate, \"EventTypeUpdate\", \"\"),\n            contentType\n        );\n        requestContext.setBody(serializedBody);\n\n        let authMethod = null;\n        // Apply auth methods\n        authMethod = _config.authMethods[\"HTTPBearer\"]\n        if (authMethod) {\n            await authMethod.applySecurityAuthentication(requestContext);\n        }\n\n        return requestContext;\n    }\n\n    /**\n     * Sets a retry schedule for all messages using the given event type\n     * Update Retry Schedule\n     * @param eventTypeName The event type&#39;s name\n     * @param retryScheduleInOut \n     */\n    public async v1EventTypeUpdateRetrySchedule(eventTypeName: string, retryScheduleInOut: RetryScheduleInOut, _options?: Configuration): Promise<RequestContext> {\n        let _config = _options || this.configuration;\n\n        // verify required parameter 'eventTypeName' is not null or undefined\n        if (eventTypeName === null || eventTypeName === undefined) {\n            throw new RequiredError('Required parameter eventTypeName was null or undefined when calling v1EventTypeUpdateRetrySchedule.');\n        }\n\n\n        // verify required parameter 'retryScheduleInOut' is not null or undefined\n        if (retryScheduleInOut === null || retryScheduleInOut === undefined) {\n            throw new RequiredError('Required parameter retryScheduleInOut was null or undefined when calling v1EventTypeUpdateRetrySchedule.');\n        }\n\n\n        // Path Params\n        const localVarPath = '/api/v1/event-type/{event_type_name}/retry-schedule'\n            .replace('{' + 'event_type_name' + '}', encodeURIComponent(String(eventTypeName)));\n\n        // Make Request Context\n        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.PUT);\n        requestContext.setHeaderParam(\"Accept\", \"application/json, */*;q=0.8\")\n        const randomId = Math.floor(Math.random() * Math.pow(2, 32))\n        requestContext.setHeaderParam(\"svix-req-id\", randomId.toString())\n\n        // Query Params\n\n        // Header Params\n\n        // Form Params\n\n\n        // Body Params\n        const contentType = ObjectSerializer.getPreferredMediaType([\n            \"application/json\"\n        ]);\n        requestContext.setHeaderParam(\"Content-Type\", contentType);\n        const serializedBody = ObjectSerializer.stringify(\n            ObjectSerializer.serialize(retryScheduleInOut, \"RetryScheduleInOut\", \"\"),\n            contentType\n        );\n        requestContext.setBody(serializedBody);\n\n        let authMethod = null;\n        // Apply auth methods\n        authMethod = _config.authMethods[\"HTTPBearer\"]\n        if (authMethod) {\n            await authMethod.applySecurityAuthentication(requestContext);\n        }\n\n        return requestContext;\n    }\n\n}\n\nexport class EventTypeApiResponseProcessor {\n\n    /**\n     * Unwraps the actual response sent by the server from the response context and deserializes the response content\n     * to the expected objects\n     *\n     * @params response Response returned by the server for a request to v1EventTypeCreate\n     * @throws ApiException if the response code was not in [200, 299]\n     */\n     public async v1EventTypeCreate(response: ResponseContext): Promise<EventTypeOut > {\n        const contentType = ObjectSerializer.normalizeMediaType(response.headers[\"content-type\"]);\n\n        if (isCodeInRange(\"201\", response.httpStatusCode)) {\n            const body: EventTypeOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"EventTypeOut\", \"\"\n            ) as EventTypeOut;\n            return body;\n        }\n        if (isCodeInRange(\"400\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(400, body);\n        }\n        if (isCodeInRange(\"401\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(401, body);\n        }\n        if (isCodeInRange(\"403\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(403, body);\n        }\n        if (isCodeInRange(\"404\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(404, body);\n        }\n        if (isCodeInRange(\"409\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(409, body);\n        }\n        if (isCodeInRange(\"422\", response.httpStatusCode)) {\n            const body: HTTPValidationError = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HTTPValidationError\", \"\"\n            ) as HTTPValidationError;\n            throw new ApiException<HTTPValidationError>(422, body);\n        }\n        if (isCodeInRange(\"429\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(429, body);\n        }\n\n        // Work around for missing responses in specification, e.g. for petstore.yaml\n        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {\n            const body: EventTypeOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"EventTypeOut\", \"\"\n            ) as EventTypeOut;\n            return body;\n        }\n\n        let body = await response.body.text();\n        throw new ApiException<string>(response.httpStatusCode, body);\n    }\n\n    /**\n     * Unwraps the actual response sent by the server from the response context and deserializes the response content\n     * to the expected objects\n     *\n     * @params response Response returned by the server for a request to v1EventTypeDelete\n     * @throws ApiException if the response code was not in [200, 299]\n     */\n     public async v1EventTypeDelete(response: ResponseContext): Promise<void > {\n        const contentType = ObjectSerializer.normalizeMediaType(response.headers[\"content-type\"]);\n\n        if (isCodeInRange(\"204\", response.httpStatusCode)) {\n            return;\n        }\n        if (isCodeInRange(\"400\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(400, body);\n        }\n        if (isCodeInRange(\"401\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(401, body);\n        }\n        if (isCodeInRange(\"403\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(403, body);\n        }\n        if (isCodeInRange(\"404\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(404, body);\n        }\n        if (isCodeInRange(\"409\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(409, body);\n        }\n        if (isCodeInRange(\"422\", response.httpStatusCode)) {\n            const body: HTTPValidationError = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HTTPValidationError\", \"\"\n            ) as HTTPValidationError;\n            throw new ApiException<HTTPValidationError>(422, body);\n        }\n        if (isCodeInRange(\"429\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(429, body);\n        }\n\n        // Work around for missing responses in specification, e.g. for petstore.yaml\n        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {\n            const body: void = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"void\", \"\"\n            ) as void;\n            return body;\n        }\n\n        let body = await response.body.text();\n        throw new ApiException<string>(response.httpStatusCode, body);\n    }\n\n    /**\n     * Unwraps the actual response sent by the server from the response context and deserializes the response content\n     * to the expected objects\n     *\n     * @params response Response returned by the server for a request to v1EventTypeExportOpenapi\n     * @throws ApiException if the response code was not in [200, 299]\n     */\n     public async v1EventTypeExportOpenapi(response: ResponseContext): Promise<ExportEventTypeOut > {\n        const contentType = ObjectSerializer.normalizeMediaType(response.headers[\"content-type\"]);\n\n        if (isCodeInRange(\"202\", response.httpStatusCode)) {\n            const body: ExportEventTypeOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"ExportEventTypeOut\", \"\"\n            ) as ExportEventTypeOut;\n            return body;\n        }\n        if (isCodeInRange(\"400\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(400, body);\n        }\n        if (isCodeInRange(\"401\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(401, body);\n        }\n        if (isCodeInRange(\"403\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(403, body);\n        }\n        if (isCodeInRange(\"404\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(404, body);\n        }\n        if (isCodeInRange(\"409\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(409, body);\n        }\n        if (isCodeInRange(\"422\", response.httpStatusCode)) {\n            const body: HTTPValidationError = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HTTPValidationError\", \"\"\n            ) as HTTPValidationError;\n            throw new ApiException<HTTPValidationError>(422, body);\n        }\n        if (isCodeInRange(\"429\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(429, body);\n        }\n\n        // Work around for missing responses in specification, e.g. for petstore.yaml\n        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {\n            const body: ExportEventTypeOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"ExportEventTypeOut\", \"\"\n            ) as ExportEventTypeOut;\n            return body;\n        }\n\n        let body = await response.body.text();\n        throw new ApiException<string>(response.httpStatusCode, body);\n    }\n\n    /**\n     * Unwraps the actual response sent by the server from the response context and deserializes the response content\n     * to the expected objects\n     *\n     * @params response Response returned by the server for a request to v1EventTypeGenerateExample\n     * @throws ApiException if the response code was not in [200, 299]\n     */\n     public async v1EventTypeGenerateExample(response: ResponseContext): Promise<EventTypeExampleOut > {\n        const contentType = ObjectSerializer.normalizeMediaType(response.headers[\"content-type\"]);\n\n        if (isCodeInRange(\"200\", response.httpStatusCode)) {\n            const body: EventTypeExampleOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"EventTypeExampleOut\", \"\"\n            ) as EventTypeExampleOut;\n            return body;\n        }\n        if (isCodeInRange(\"400\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(400, body);\n        }\n        if (isCodeInRange(\"401\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(401, body);\n        }\n        if (isCodeInRange(\"403\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(403, body);\n        }\n        if (isCodeInRange(\"404\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(404, body);\n        }\n        if (isCodeInRange(\"409\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(409, body);\n        }\n        if (isCodeInRange(\"422\", response.httpStatusCode)) {\n            const body: HTTPValidationError = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HTTPValidationError\", \"\"\n            ) as HTTPValidationError;\n            throw new ApiException<HTTPValidationError>(422, body);\n        }\n        if (isCodeInRange(\"429\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(429, body);\n        }\n\n        // Work around for missing responses in specification, e.g. for petstore.yaml\n        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {\n            const body: EventTypeExampleOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"EventTypeExampleOut\", \"\"\n            ) as EventTypeExampleOut;\n            return body;\n        }\n\n        let body = await response.body.text();\n        throw new ApiException<string>(response.httpStatusCode, body);\n    }\n\n    /**\n     * Unwraps the actual response sent by the server from the response context and deserializes the response content\n     * to the expected objects\n     *\n     * @params response Response returned by the server for a request to v1EventTypeGet\n     * @throws ApiException if the response code was not in [200, 299]\n     */\n     public async v1EventTypeGet(response: ResponseContext): Promise<EventTypeOut > {\n        const contentType = ObjectSerializer.normalizeMediaType(response.headers[\"content-type\"]);\n\n        if (isCodeInRange(\"200\", response.httpStatusCode)) {\n            const body: EventTypeOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"EventTypeOut\", \"\"\n            ) as EventTypeOut;\n            return body;\n        }\n        if (isCodeInRange(\"400\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(400, body);\n        }\n        if (isCodeInRange(\"401\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(401, body);\n        }\n        if (isCodeInRange(\"403\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(403, body);\n        }\n        if (isCodeInRange(\"404\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(404, body);\n        }\n        if (isCodeInRange(\"409\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(409, body);\n        }\n        if (isCodeInRange(\"422\", response.httpStatusCode)) {\n            const body: HTTPValidationError = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HTTPValidationError\", \"\"\n            ) as HTTPValidationError;\n            throw new ApiException<HTTPValidationError>(422, body);\n        }\n        if (isCodeInRange(\"429\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(429, body);\n        }\n\n        // Work around for missing responses in specification, e.g. for petstore.yaml\n        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {\n            const body: EventTypeOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"EventTypeOut\", \"\"\n            ) as EventTypeOut;\n            return body;\n        }\n\n        let body = await response.body.text();\n        throw new ApiException<string>(response.httpStatusCode, body);\n    }\n\n    /**\n     * Unwraps the actual response sent by the server from the response context and deserializes the response content\n     * to the expected objects\n     *\n     * @params response Response returned by the server for a request to v1EventTypeGetRetrySchedule\n     * @throws ApiException if the response code was not in [200, 299]\n     */\n     public async v1EventTypeGetRetrySchedule(response: ResponseContext): Promise<RetryScheduleInOut > {\n        const contentType = ObjectSerializer.normalizeMediaType(response.headers[\"content-type\"]);\n\n        if (isCodeInRange(\"200\", response.httpStatusCode)) {\n            const body: RetryScheduleInOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"RetryScheduleInOut\", \"\"\n            ) as RetryScheduleInOut;\n            return body;\n        }\n        if (isCodeInRange(\"400\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(400, body);\n        }\n        if (isCodeInRange(\"401\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(401, body);\n        }\n        if (isCodeInRange(\"403\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(403, body);\n        }\n        if (isCodeInRange(\"404\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(404, body);\n        }\n        if (isCodeInRange(\"409\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(409, body);\n        }\n        if (isCodeInRange(\"422\", response.httpStatusCode)) {\n            const body: HTTPValidationError = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HTTPValidationError\", \"\"\n            ) as HTTPValidationError;\n            throw new ApiException<HTTPValidationError>(422, body);\n        }\n        if (isCodeInRange(\"429\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(429, body);\n        }\n\n        // Work around for missing responses in specification, e.g. for petstore.yaml\n        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {\n            const body: RetryScheduleInOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"RetryScheduleInOut\", \"\"\n            ) as RetryScheduleInOut;\n            return body;\n        }\n\n        let body = await response.body.text();\n        throw new ApiException<string>(response.httpStatusCode, body);\n    }\n\n    /**\n     * Unwraps the actual response sent by the server from the response context and deserializes the response content\n     * to the expected objects\n     *\n     * @params response Response returned by the server for a request to v1EventTypeImportOpenapi\n     * @throws ApiException if the response code was not in [200, 299]\n     */\n     public async v1EventTypeImportOpenapi(response: ResponseContext): Promise<EventTypeImportOpenApiOut > {\n        const contentType = ObjectSerializer.normalizeMediaType(response.headers[\"content-type\"]);\n\n        if (isCodeInRange(\"200\", response.httpStatusCode)) {\n            const body: EventTypeImportOpenApiOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"EventTypeImportOpenApiOut\", \"\"\n            ) as EventTypeImportOpenApiOut;\n            return body;\n        }\n        if (isCodeInRange(\"400\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(400, body);\n        }\n        if (isCodeInRange(\"401\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(401, body);\n        }\n        if (isCodeInRange(\"403\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(403, body);\n        }\n        if (isCodeInRange(\"404\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(404, body);\n        }\n        if (isCodeInRange(\"409\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(409, body);\n        }\n        if (isCodeInRange(\"422\", response.httpStatusCode)) {\n            const body: HTTPValidationError = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HTTPValidationError\", \"\"\n            ) as HTTPValidationError;\n            throw new ApiException<HTTPValidationError>(422, body);\n        }\n        if (isCodeInRange(\"429\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(429, body);\n        }\n\n        // Work around for missing responses in specification, e.g. for petstore.yaml\n        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {\n            const body: EventTypeImportOpenApiOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"EventTypeImportOpenApiOut\", \"\"\n            ) as EventTypeImportOpenApiOut;\n            return body;\n        }\n\n        let body = await response.body.text();\n        throw new ApiException<string>(response.httpStatusCode, body);\n    }\n\n    /**\n     * Unwraps the actual response sent by the server from the response context and deserializes the response content\n     * to the expected objects\n     *\n     * @params response Response returned by the server for a request to v1EventTypeList\n     * @throws ApiException if the response code was not in [200, 299]\n     */\n     public async v1EventTypeList(response: ResponseContext): Promise<ListResponseEventTypeOut > {\n        const contentType = ObjectSerializer.normalizeMediaType(response.headers[\"content-type\"]);\n\n        if (isCodeInRange(\"200\", response.httpStatusCode)) {\n            const body: ListResponseEventTypeOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"ListResponseEventTypeOut\", \"\"\n            ) as ListResponseEventTypeOut;\n            return body;\n        }\n        if (isCodeInRange(\"400\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(400, body);\n        }\n        if (isCodeInRange(\"401\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(401, body);\n        }\n        if (isCodeInRange(\"403\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(403, body);\n        }\n        if (isCodeInRange(\"404\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(404, body);\n        }\n        if (isCodeInRange(\"409\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(409, body);\n        }\n        if (isCodeInRange(\"422\", response.httpStatusCode)) {\n            const body: HTTPValidationError = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HTTPValidationError\", \"\"\n            ) as HTTPValidationError;\n            throw new ApiException<HTTPValidationError>(422, body);\n        }\n        if (isCodeInRange(\"429\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(429, body);\n        }\n\n        // Work around for missing responses in specification, e.g. for petstore.yaml\n        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {\n            const body: ListResponseEventTypeOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"ListResponseEventTypeOut\", \"\"\n            ) as ListResponseEventTypeOut;\n            return body;\n        }\n\n        let body = await response.body.text();\n        throw new ApiException<string>(response.httpStatusCode, body);\n    }\n\n    /**\n     * Unwraps the actual response sent by the server from the response context and deserializes the response content\n     * to the expected objects\n     *\n     * @params response Response returned by the server for a request to v1EventTypePatch\n     * @throws ApiException if the response code was not in [200, 299]\n     */\n     public async v1EventTypePatch(response: ResponseContext): Promise<EventTypeOut > {\n        const contentType = ObjectSerializer.normalizeMediaType(response.headers[\"content-type\"]);\n\n        if (isCodeInRange(\"200\", response.httpStatusCode)) {\n            const body: EventTypeOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"EventTypeOut\", \"\"\n            ) as EventTypeOut;\n            return body;\n        }\n        if (isCodeInRange(\"400\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(400, body);\n        }\n        if (isCodeInRange(\"401\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(401, body);\n        }\n        if (isCodeInRange(\"403\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(403, body);\n        }\n        if (isCodeInRange(\"404\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(404, body);\n        }\n        if (isCodeInRange(\"409\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(409, body);\n        }\n        if (isCodeInRange(\"422\", response.httpStatusCode)) {\n            const body: HTTPValidationError = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HTTPValidationError\", \"\"\n            ) as HTTPValidationError;\n            throw new ApiException<HTTPValidationError>(422, body);\n        }\n        if (isCodeInRange(\"429\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(429, body);\n        }\n\n        // Work around for missing responses in specification, e.g. for petstore.yaml\n        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {\n            const body: EventTypeOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"EventTypeOut\", \"\"\n            ) as EventTypeOut;\n            return body;\n        }\n\n        let body = await response.body.text();\n        throw new ApiException<string>(response.httpStatusCode, body);\n    }\n\n    /**\n     * Unwraps the actual response sent by the server from the response context and deserializes the response content\n     * to the expected objects\n     *\n     * @params response Response returned by the server for a request to v1EventTypeUpdate\n     * @throws ApiException if the response code was not in [200, 299]\n     */\n     public async v1EventTypeUpdate(response: ResponseContext): Promise<EventTypeOut > {\n        const contentType = ObjectSerializer.normalizeMediaType(response.headers[\"content-type\"]);\n\n        if (isCodeInRange(\"200\", response.httpStatusCode)) {\n            const body: EventTypeOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"EventTypeOut\", \"\"\n            ) as EventTypeOut;\n            return body;\n        }\n        if (isCodeInRange(\"201\", response.httpStatusCode)) {\n            const body: EventTypeOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"EventTypeOut\", \"\"\n            ) as EventTypeOut;\n            return body;\n        }\n        if (isCodeInRange(\"400\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(400, body);\n        }\n        if (isCodeInRange(\"401\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(401, body);\n        }\n        if (isCodeInRange(\"403\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(403, body);\n        }\n        if (isCodeInRange(\"404\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(404, body);\n        }\n        if (isCodeInRange(\"409\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(409, body);\n        }\n        if (isCodeInRange(\"422\", response.httpStatusCode)) {\n            const body: HTTPValidationError = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HTTPValidationError\", \"\"\n            ) as HTTPValidationError;\n            throw new ApiException<HTTPValidationError>(422, body);\n        }\n        if (isCodeInRange(\"429\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(429, body);\n        }\n\n        // Work around for missing responses in specification, e.g. for petstore.yaml\n        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {\n            const body: EventTypeOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"EventTypeOut\", \"\"\n            ) as EventTypeOut;\n            return body;\n        }\n\n        let body = await response.body.text();\n        throw new ApiException<string>(response.httpStatusCode, body);\n    }\n\n    /**\n     * Unwraps the actual response sent by the server from the response context and deserializes the response content\n     * to the expected objects\n     *\n     * @params response Response returned by the server for a request to v1EventTypeUpdateRetrySchedule\n     * @throws ApiException if the response code was not in [200, 299]\n     */\n     public async v1EventTypeUpdateRetrySchedule(response: ResponseContext): Promise<RetryScheduleInOut > {\n        const contentType = ObjectSerializer.normalizeMediaType(response.headers[\"content-type\"]);\n\n        if (isCodeInRange(\"200\", response.httpStatusCode)) {\n            const body: RetryScheduleInOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"RetryScheduleInOut\", \"\"\n            ) as RetryScheduleInOut;\n            return body;\n        }\n        if (isCodeInRange(\"400\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(400, body);\n        }\n        if (isCodeInRange(\"401\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(401, body);\n        }\n        if (isCodeInRange(\"403\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(403, body);\n        }\n        if (isCodeInRange(\"404\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(404, body);\n        }\n        if (isCodeInRange(\"409\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(409, body);\n        }\n        if (isCodeInRange(\"422\", response.httpStatusCode)) {\n            const body: HTTPValidationError = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HTTPValidationError\", \"\"\n            ) as HTTPValidationError;\n            throw new ApiException<HTTPValidationError>(422, body);\n        }\n        if (isCodeInRange(\"429\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(429, body);\n        }\n\n        // Work around for missing responses in specification, e.g. for petstore.yaml\n        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {\n            const body: RetryScheduleInOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"RetryScheduleInOut\", \"\"\n            ) as RetryScheduleInOut;\n            return body;\n        }\n\n        let body = await response.body.text();\n        throw new ApiException<string>(response.httpStatusCode, body);\n    }\n\n}\n"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA,MAAA;AAEA,MAAA;AACA,MAAA;AACA,MAAA;AACA,MAAA;AAoBA,MAAa,mCAAmC,UAAA,qBAAqB;IAQpD,kBAAkB,WAAwB,EAAE,cAAuB,EAAE,QAAwB,EAAA;;YACtG,IAAI,UAAU,YAAY,IAAI,CAAC,aAAa;YAG5C,IAAI,gBAAgB,QAAQ,gBAAgB,WAAW;gBACnD,MAAM,IAAI,UAAA,aAAa,CAAC;;YAM5B,MAAM,eAAe;YAGrB,MAAM,iBAAiB,QAAQ,UAAU,CAAC,kBAAkB,CAAC,cAAc,OAAA,UAAU,CAAC,IAAI;YAC1F,eAAe,cAAc,CAAC,UAAU;YACxC,MAAM,WAAW,KAAK,KAAK,CAAC,KAAK,MAAM,KAAK,KAAK,GAAG,CAAC,GAAG;YACxD,eAAe,cAAc,CAAC,eAAe,SAAS,QAAQ;YAK9D,IAAI,mBAAmB,WAAW;gBAC9B,eAAe,cAAc,CAAC,mBAAmB,mBAAA,gBAAgB,CAAC,SAAS,CAAC,gBAAgB,UAAU;;YAO1G,MAAM,cAAc,mBAAA,gBAAgB,CAAC,qBAAqB,CAAC;gBACvD;aACH;YACD,eAAe,cAAc,CAAC,gBAAgB;YAC9C,MAAM,iBAAiB,mBAAA,gBAAgB,CAAC,SAAS,CAC7C,mBAAA,gBAAgB,CAAC,SAAS,CAAC,aAAa,eAAe,KACvD;YAEJ,eAAe,OAAO,CAAC;YAEvB,IAAI,aAAa;YAEjB,aAAa,QAAQ,WAAW,CAAC,aAAa;YAC9C,IAAI,YAAY;gBACZ,MAAM,WAAW,2BAA2B,CAAC;;YAGjD,OAAO;QACX;;IAQa,kBAAkB,aAAqB,EAAE,OAAiB,EAAE,QAAwB,EAAA;;YAC7F,IAAI,UAAU,YAAY,IAAI,CAAC,aAAa;YAG5C,IAAI,kBAAkB,QAAQ,kBAAkB,WAAW;gBACvD,MAAM,IAAI,UAAA,aAAa,CAAC;;YAM5B,MAAM,eAAe,uCAChB,OAAO,CAAC,MAAM,oBAAoB,KAAK,mBAAmB,OAAO;YAGtE,MAAM,iBAAiB,QAAQ,UAAU,CAAC,kBAAkB,CAAC,cAAc,OAAA,UAAU,CAAC,MAAM;YAC5F,eAAe,cAAc,CAAC,UAAU;YACxC,MAAM,WAAW,KAAK,KAAK,CAAC,KAAK,MAAM,KAAK,KAAK,GAAG,CAAC,GAAG;YACxD,eAAe,cAAc,CAAC,eAAe,SAAS,QAAQ;YAG9D,IAAI,YAAY,WAAW;gBACvB,eAAe,aAAa,CAAC,WAAW,mBAAA,gBAAgB,CAAC,SAAS,CAAC,SAAS,WAAW;;YAU3F,IAAI,aAAa;YAEjB,aAAa,QAAQ,WAAW,CAAC,aAAa;YAC9C,IAAI,YAAY;gBACZ,MAAM,WAAW,2BAA2B,CAAC;;YAGjD,OAAO;QACX;;IAOa,yBAAyB,cAAuB,EAAE,QAAwB,EAAA;;YACnF,IAAI,UAAU,YAAY,IAAI,CAAC,aAAa;YAI5C,MAAM,eAAe;YAGrB,MAAM,iBAAiB,QAAQ,UAAU,CAAC,kBAAkB,CAAC,cAAc,OAAA,UAAU,CAAC,IAAI;YAC1F,eAAe,cAAc,CAAC,UAAU;YACxC,MAAM,WAAW,KAAK,KAAK,CAAC,KAAK,MAAM,KAAK,KAAK,GAAG,CAAC,GAAG;YACxD,eAAe,cAAc,CAAC,eAAe,SAAS,QAAQ;YAK9D,IAAI,mBAAmB,WAAW;gBAC9B,eAAe,cAAc,CAAC,mBAAmB,mBAAA,gBAAgB,CAAC,SAAS,CAAC,gBAAgB,UAAU;;YAQ1G,IAAI,aAAa;YAEjB,aAAa,QAAQ,WAAW,CAAC,aAAa;YAC9C,IAAI,YAAY;gBACZ,MAAM,WAAW,2BAA2B,CAAC;;YAGjD,OAAO;QACX;;IAQa,2BAA2B,iBAAoC,EAAE,cAAuB,EAAE,QAAwB,EAAA;;YAC3H,IAAI,UAAU,YAAY,IAAI,CAAC,aAAa;YAG5C,IAAI,sBAAsB,QAAQ,sBAAsB,WAAW;gBAC/D,MAAM,IAAI,UAAA,aAAa,CAAC;;YAM5B,MAAM,eAAe;YAGrB,MAAM,iBAAiB,QAAQ,UAAU,CAAC,kBAAkB,CAAC,cAAc,OAAA,UAAU,CAAC,IAAI;YAC1F,eAAe,cAAc,CAAC,UAAU;YACxC,MAAM,WAAW,KAAK,KAAK,CAAC,KAAK,MAAM,KAAK,KAAK,GAAG,CAAC,GAAG;YACxD,eAAe,cAAc,CAAC,eAAe,SAAS,QAAQ;YAK9D,IAAI,mBAAmB,WAAW;gBAC9B,eAAe,cAAc,CAAC,mBAAmB,mBAAA,gBAAgB,CAAC,SAAS,CAAC,gBAAgB,UAAU;;YAO1G,MAAM,cAAc,mBAAA,gBAAgB,CAAC,qBAAqB,CAAC;gBACvD;aACH;YACD,eAAe,cAAc,CAAC,gBAAgB;YAC9C,MAAM,iBAAiB,mBAAA,gBAAgB,CAAC,SAAS,CAC7C,mBAAA,gBAAgB,CAAC,SAAS,CAAC,mBAAmB,qBAAqB,KACnE;YAEJ,eAAe,OAAO,CAAC;YAEvB,IAAI,aAAa;YAEjB,aAAa,QAAQ,WAAW,CAAC,aAAa;YAC9C,IAAI,YAAY;gBACZ,MAAM,WAAW,2BAA2B,CAAC;;YAGjD,OAAO;QACX;;IAOa,eAAe,aAAqB,EAAE,QAAwB,EAAA;;YACvE,IAAI,UAAU,YAAY,IAAI,CAAC,aAAa;YAG5C,IAAI,kBAAkB,QAAQ,kBAAkB,WAAW;gBACvD,MAAM,IAAI,UAAA,aAAa,CAAC;;YAK5B,MAAM,eAAe,uCAChB,OAAO,CAAC,MAAM,oBAAoB,KAAK,mBAAmB,OAAO;YAGtE,MAAM,iBAAiB,QAAQ,UAAU,CAAC,kBAAkB,CAAC,cAAc,OAAA,UAAU,CAAC,GAAG;YACzF,eAAe,cAAc,CAAC,UAAU;YACxC,MAAM,WAAW,KAAK,KAAK,CAAC,KAAK,MAAM,KAAK,KAAK,GAAG,CAAC,GAAG;YACxD,eAAe,cAAc,CAAC,eAAe,SAAS,QAAQ;YAW9D,IAAI,aAAa;YAEjB,aAAa,QAAQ,WAAW,CAAC,aAAa;YAC9C,IAAI,YAAY;gBACZ,MAAM,WAAW,2BAA2B,CAAC;;YAGjD,OAAO;QACX;;IAOa,4BAA4B,aAAqB,EAAE,QAAwB,EAAA;;YACpF,IAAI,UAAU,YAAY,IAAI,CAAC,aAAa;YAG5C,IAAI,kBAAkB,QAAQ,kBAAkB,WAAW;gBACvD,MAAM,IAAI,UAAA,aAAa,CAAC;;YAK5B,MAAM,eAAe,sDAChB,OAAO,CAAC,MAAM,oBAAoB,KAAK,mBAAmB,OAAO;YAGtE,MAAM,iBAAiB,QAAQ,UAAU,CAAC,kBAAkB,CAAC,cAAc,OAAA,UAAU,CAAC,GAAG;YACzF,eAAe,cAAc,CAAC,UAAU;YACxC,MAAM,WAAW,KAAK,KAAK,CAAC,KAAK,MAAM,KAAK,KAAK,GAAG,CAAC,GAAG;YACxD,eAAe,cAAc,CAAC,eAAe,SAAS,QAAQ;YAW9D,IAAI,aAAa;YAEjB,aAAa,QAAQ,WAAW,CAAC,aAAa;YAC9C,IAAI,YAAY;gBACZ,MAAM,WAAW,2BAA2B,CAAC;;YAGjD,OAAO;QACX;;IAQa,yBAAyB,wBAAkD,EAAE,cAAuB,EAAE,QAAwB,EAAA;;YACvI,IAAI,UAAU,YAAY,IAAI,CAAC,aAAa;YAG5C,IAAI,6BAA6B,QAAQ,6BAA6B,WAAW;gBAC7E,MAAM,IAAI,UAAA,aAAa,CAAC;;YAM5B,MAAM,eAAe;YAGrB,MAAM,iBAAiB,QAAQ,UAAU,CAAC,kBAAkB,CAAC,cAAc,OAAA,UAAU,CAAC,IAAI;YAC1F,eAAe,cAAc,CAAC,UAAU;YACxC,MAAM,WAAW,KAAK,KAAK,CAAC,KAAK,MAAM,KAAK,KAAK,GAAG,CAAC,GAAG;YACxD,eAAe,cAAc,CAAC,eAAe,SAAS,QAAQ;YAK9D,IAAI,mBAAmB,WAAW;gBAC9B,eAAe,cAAc,CAAC,mBAAmB,mBAAA,gBAAgB,CAAC,SAAS,CAAC,gBAAgB,UAAU;;YAO1G,MAAM,cAAc,mBAAA,gBAAgB,CAAC,qBAAqB,CAAC;gBACvD;aACH;YACD,eAAe,cAAc,CAAC,gBAAgB;YAC9C,MAAM,iBAAiB,mBAAA,gBAAgB,CAAC,SAAS,CAC7C,mBAAA,gBAAgB,CAAC,SAAS,CAAC,0BAA0B,4BAA4B,KACjF;YAEJ,eAAe,OAAO,CAAC;YAEvB,IAAI,aAAa;YAEjB,aAAa,QAAQ,WAAW,CAAC,aAAa;YAC9C,IAAI,YAAY;gBACZ,MAAM,WAAW,2BAA2B,CAAC;;YAGjD,OAAO;QACX;;IAWa,gBAAgB,KAAc,EAAE,QAAiB,EAAE,KAAgB,EAAE,eAAyB,EAAE,WAAqB,EAAE,QAAwB,EAAA;;YACxJ,IAAI,UAAU,YAAY,IAAI,CAAC,aAAa;YAQ5C,MAAM,eAAe;YAGrB,MAAM,iBAAiB,QAAQ,UAAU,CAAC,kBAAkB,CAAC,cAAc,OAAA,UAAU,CAAC,GAAG;YACzF,eAAe,cAAc,CAAC,UAAU;YACxC,MAAM,WAAW,KAAK,KAAK,CAAC,KAAK,MAAM,KAAK,KAAK,GAAG,CAAC,GAAG;YACxD,eAAe,cAAc,CAAC,eAAe,SAAS,QAAQ;YAG9D,IAAI,UAAU,WAAW;gBACrB,eAAe,aAAa,CAAC,SAAS,mBAAA,gBAAgB,CAAC,SAAS,CAAC,OAAO,UAAU;;YAEtF,IAAI,aAAa,WAAW;gBACxB,eAAe,aAAa,CAAC,YAAY,mBAAA,gBAAgB,CAAC,SAAS,CAAC,UAAU,UAAU;;YAE5F,IAAI,UAAU,WAAW;gBACrB,eAAe,aAAa,CAAC,SAAS,mBAAA,gBAAgB,CAAC,SAAS,CAAC,OAAO,YAAY;;YAExF,IAAI,oBAAoB,WAAW;gBAC/B,eAAe,aAAa,CAAC,oBAAoB,mBAAA,gBAAgB,CAAC,SAAS,CAAC,iBAAiB,WAAW;;YAE5G,IAAI,gBAAgB,WAAW;gBAC3B,eAAe,aAAa,CAAC,gBAAgB,mBAAA,gBAAgB,CAAC,SAAS,CAAC,aAAa,WAAW;;YAUpG,IAAI,aAAa;YAEjB,aAAa,QAAQ,WAAW,CAAC,aAAa;YAC9C,IAAI,YAAY;gBACZ,MAAM,WAAW,2BAA2B,CAAC;;YAGjD,OAAO;QACX;;IAQa,iBAAiB,aAAqB,EAAE,cAA8B,EAAE,QAAwB,EAAA;;YACzG,IAAI,UAAU,YAAY,IAAI,CAAC,aAAa;YAG5C,IAAI,kBAAkB,QAAQ,kBAAkB,WAAW;gBACvD,MAAM,IAAI,UAAA,aAAa,CAAC;;YAK5B,IAAI,mBAAmB,QAAQ,mBAAmB,WAAW;gBACzD,MAAM,IAAI,UAAA,aAAa,CAAC;;YAK5B,MAAM,eAAe,uCAChB,OAAO,CAAC,MAAM,oBAAoB,KAAK,mBAAmB,OAAO;YAGtE,MAAM,iBAAiB,QAAQ,UAAU,CAAC,kBAAkB,CAAC,cAAc,OAAA,UAAU,CAAC,KAAK;YAC3F,eAAe,cAAc,CAAC,UAAU;YACxC,MAAM,WAAW,KAAK,KAAK,CAAC,KAAK,MAAM,KAAK,KAAK,GAAG,CAAC,GAAG;YACxD,eAAe,cAAc,CAAC,eAAe,SAAS,QAAQ;YAU9D,MAAM,cAAc,mBAAA,gBAAgB,CAAC,qBAAqB,CAAC;gBACvD;aACH;YACD,eAAe,cAAc,CAAC,gBAAgB;YAC9C,MAAM,iBAAiB,mBAAA,gBAAgB,CAAC,SAAS,CAC7C,mBAAA,gBAAgB,CAAC,SAAS,CAAC,gBAAgB,kBAAkB,KAC7D;YAEJ,eAAe,OAAO,CAAC;YAEvB,IAAI,aAAa;YAEjB,aAAa,QAAQ,WAAW,CAAC,aAAa;YAC9C,IAAI,YAAY;gBACZ,MAAM,WAAW,2BAA2B,CAAC;;YAGjD,OAAO;QACX;;IAQa,kBAAkB,aAAqB,EAAE,eAAgC,EAAE,QAAwB,EAAA;;YAC5G,IAAI,UAAU,YAAY,IAAI,CAAC,aAAa;YAG5C,IAAI,kBAAkB,QAAQ,kBAAkB,WAAW;gBACvD,MAAM,IAAI,UAAA,aAAa,CAAC;;YAK5B,IAAI,oBAAoB,QAAQ,oBAAoB,WAAW;gBAC3D,MAAM,IAAI,UAAA,aAAa,CAAC;;YAK5B,MAAM,eAAe,uCAChB,OAAO,CAAC,MAAM,oBAAoB,KAAK,mBAAmB,OAAO;YAGtE,MAAM,iBAAiB,QAAQ,UAAU,CAAC,kBAAkB,CAAC,cAAc,OAAA,UAAU,CAAC,GAAG;YACzF,eAAe,cAAc,CAAC,UAAU;YACxC,MAAM,WAAW,KAAK,KAAK,CAAC,KAAK,MAAM,KAAK,KAAK,GAAG,CAAC,GAAG;YACxD,eAAe,cAAc,CAAC,eAAe,SAAS,QAAQ;YAU9D,MAAM,cAAc,mBAAA,gBAAgB,CAAC,qBAAqB,CAAC;gBACvD;aACH;YACD,eAAe,cAAc,CAAC,gBAAgB;YAC9C,MAAM,iBAAiB,mBAAA,gBAAgB,CAAC,SAAS,CAC7C,mBAAA,gBAAgB,CAAC,SAAS,CAAC,iBAAiB,mBAAmB,KAC/D;YAEJ,eAAe,OAAO,CAAC;YAEvB,IAAI,aAAa;YAEjB,aAAa,QAAQ,WAAW,CAAC,aAAa;YAC9C,IAAI,YAAY;gBACZ,MAAM,WAAW,2BAA2B,CAAC;;YAGjD,OAAO;QACX;;IAQa,+BAA+B,aAAqB,EAAE,kBAAsC,EAAE,QAAwB,EAAA;;YAC/H,IAAI,UAAU,YAAY,IAAI,CAAC,aAAa;YAG5C,IAAI,kBAAkB,QAAQ,kBAAkB,WAAW;gBACvD,MAAM,IAAI,UAAA,aAAa,CAAC;;YAK5B,IAAI,uBAAuB,QAAQ,uBAAuB,WAAW;gBACjE,MAAM,IAAI,UAAA,aAAa,CAAC;;YAK5B,MAAM,eAAe,sDAChB,OAAO,CAAC,MAAM,oBAAoB,KAAK,mBAAmB,OAAO;YAGtE,MAAM,iBAAiB,QAAQ,UAAU,CAAC,kBAAkB,CAAC,cAAc,OAAA,UAAU,CAAC,GAAG;YACzF,eAAe,cAAc,CAAC,UAAU;YACxC,MAAM,WAAW,KAAK,KAAK,CAAC,KAAK,MAAM,KAAK,KAAK,GAAG,CAAC,GAAG;YACxD,eAAe,cAAc,CAAC,eAAe,SAAS,QAAQ;YAU9D,MAAM,cAAc,mBAAA,gBAAgB,CAAC,qBAAqB,CAAC;gBACvD;aACH;YACD,eAAe,cAAc,CAAC,gBAAgB;YAC9C,MAAM,iBAAiB,mBAAA,gBAAgB,CAAC,SAAS,CAC7C,mBAAA,gBAAgB,CAAC,SAAS,CAAC,oBAAoB,sBAAsB,KACrE;YAEJ,eAAe,OAAO,CAAC;YAEvB,IAAI,aAAa;YAEjB,aAAa,QAAQ,WAAW,CAAC,aAAa;YAC9C,IAAI,YAAY;gBACZ,MAAM,WAAW,2BAA2B,CAAC;;YAGjD,OAAO;QACX;;;AAnkBJ,QAAA,0BAAA,GAAA;AAukBA,MAAa;IASK,kBAAkB,QAAyB,EAAA;;YACrD,MAAM,cAAc,mBAAA,gBAAgB,CAAC,kBAAkB,CAAC,SAAS,OAAO,CAAC,eAAe;YAExF,IAAI,OAAA,aAAa,CAAC,OAAO,SAAS,cAAc,GAAG;gBAC/C,MAAM,OAAqB,mBAAA,gBAAgB,CAAC,WAAW,CACnD,mBAAA,gBAAgB,CAAC,KAAK,CAAC,CAAA,MAAM,SAAS,IAAI,CAAC,IAAI,EAAA,GAAI,cACnD,gBAAgB;gBAEpB,OAAO;;YAEX,IAAI,OAAA,aAAa,CAAC,OAAO,SAAS,cAAc,GAAG;gBAC/C,MAAM,OAAqB,mBAAA,gBAAgB,CAAC,WAAW,CACnD,mBAAA,gBAAgB,CAAC,KAAK,CAAC,CAAA,MAAM,SAAS,IAAI,CAAC,IAAI,EAAA,GAAI,cACnD,gBAAgB;gBAEpB,MAAM,IAAI,YAAA,YAAY,CAAe,KAAK;;YAE9C,IAAI,OAAA,aAAa,CAAC,OAAO,SAAS,cAAc,GAAG;gBAC/C,MAAM,OAAqB,mBAAA,gBAAgB,CAAC,WAAW,CACnD,mBAAA,gBAAgB,CAAC,KAAK,CAAC,CAAA,MAAM,SAAS,IAAI,CAAC,IAAI,EAAA,GAAI,cACnD,gBAAgB;gBAEpB,MAAM,IAAI,YAAA,YAAY,CAAe,KAAK;;YAE9C,IAAI,OAAA,aAAa,CAAC,OAAO,SAAS,cAAc,GAAG;gBAC/C,MAAM,OAAqB,mBAAA,gBAAgB,CAAC,WAAW,CACnD,mBAAA,gBAAgB,CAAC,KAAK,CAAC,CAAA,MAAM,SAAS,IAAI,CAAC,IAAI,EAAA,GAAI,cACnD,gBAAgB;gBAEpB,MAAM,IAAI,YAAA,YAAY,CAAe,KAAK;;YAE9C,IAAI,OAAA,aAAa,CAAC,OAAO,SAAS,cAAc,GAAG;gBAC/C,MAAM,OAAqB,mBAAA,gBAAgB,CAAC,WAAW,CACnD,mBAAA,gBAAgB,CAAC,KAAK,CAAC,CAAA,MAAM,SAAS,IAAI,CAAC,IAAI,EAAA,GAAI,cACnD,gBAAgB;gBAEpB,MAAM,IAAI,YAAA,YAAY,CAAe,KAAK;;YAE9C,IAAI,OAAA,aAAa,CAAC,OAAO,SAAS,cAAc,GAAG;gBAC/C,MAAM,OAAqB,mBAAA,gBAAgB,CAAC,WAAW,CACnD,mBAAA,gBAAgB,CAAC,KAAK,CAAC,CAAA,MAAM,SAAS,IAAI,CAAC,IAAI,EAAA,GAAI,cACnD,gBAAgB;gBAEpB,MAAM,IAAI,YAAA,YAAY,CAAe,KAAK;;YAE9C,IAAI,OAAA,aAAa,CAAC,OAAO,SAAS,cAAc,GAAG;gBAC/C,MAAM,OAA4B,mBAAA,gBAAgB,CAAC,WAAW,CAC1D,mBAAA,gBAAgB,CAAC,KAAK,CAAC,CAAA,MAAM,SAAS,IAAI,CAAC,IAAI,EAAA,GAAI,cACnD,uBAAuB;gBAE3B,MAAM,IAAI,YAAA,YAAY,CAAsB,KAAK;;YAErD,IAAI,OAAA,aAAa,CAAC,OAAO,SAAS,cAAc,GAAG;gBAC/C,MAAM,OAAqB,mBAAA,gBAAgB,CAAC,WAAW,CACnD,mBAAA,gBAAgB,CAAC,KAAK,CAAC,CAAA,MAAM,SAAS,IAAI,CAAC,IAAI,EAAA,GAAI,cACnD,gBAAgB;gBAEpB,MAAM,IAAI,YAAA,YAAY,CAAe,KAAK;;YAI9C,IAAI,SAAS,cAAc,IAAI,OAAO,SAAS,cAAc,IAAI,KAAK;gBAClE,MAAM,OAAqB,mBAAA,gBAAgB,CAAC,WAAW,CACnD,mBAAA,gBAAgB,CAAC,KAAK,CAAC,CAAA,MAAM,SAAS,IAAI,CAAC,IAAI,EAAA,GAAI,cACnD,gBAAgB;gBAEpB,OAAO;;YAGX,IAAI,OAAO,MAAM,SAAS,IAAI,CAAC,IAAI;YACnC,MAAM,IAAI,YAAA,YAAY,CAAS,SAAS,cAAc,EAAE;QAC5D;;IASc,kBAAkB,QAAyB,EAAA;;YACrD,MAAM,cAAc,mBAAA,gBAAgB,CAAC,kBAAkB,CAAC,SAAS,OAAO,CAAC,eAAe;YAExF,IAAI,OAAA,aAAa,CAAC,OAAO,SAAS,cAAc,GAAG;gBAC/C;;YAEJ,IAAI,OAAA,aAAa,CAAC,OAAO,SAAS,cAAc,GAAG;gBAC/C,MAAM,OAAqB,mBAAA,gBAAgB,CAAC,WAAW,CACnD,mBAAA,gBAAgB,CAAC,KAAK,CAAC,CAAA,MAAM,SAAS,IAAI,CAAC,IAAI,EAAA,GAAI,cACnD,gBAAgB;gBAEpB,MAAM,IAAI,YAAA,YAAY,CAAe,KAAK;;YAE9C,IAAI,OAAA,aAAa,CAAC,OAAO,SAAS,cAAc,GAAG;gBAC/C,MAAM,OAAqB,mBAAA,gBAAgB,CAAC,WAAW,CACnD,mBAAA,gBAAgB,CAAC,KAAK,CAAC,CAAA,MAAM,SAAS,IAAI,CAAC,IAAI,EAAA,GAAI,cACnD,gBAAgB;gBAEpB,MAAM,IAAI,YAAA,YAAY,CAAe,KAAK;;YAE9C,IAAI,OAAA,aAAa,CAAC,OAAO,SAAS,cAAc,GAAG;gBAC/C,MAAM,OAAqB,mBAAA,gBAAgB,CAAC,WAAW,CACnD,mBAAA,gBAAgB,CAAC,KAAK,CAAC,CAAA,MAAM,SAAS,IAAI,CAAC,IAAI,EAAA,GAAI,cACnD,gBAAgB;gBAEpB,MAAM,IAAI,YAAA,YAAY,CAAe,KAAK;;YAE9C,IAAI,OAAA,aAAa,CAAC,OAAO,SAAS,cAAc,GAAG;gBAC/C,MAAM,OAAqB,mBAAA,gBAAgB,CAAC,WAAW,CACnD,mBAAA,gBAAgB,CAAC,KAAK,CAAC,CAAA,MAAM,SAAS,IAAI,CAAC,IAAI,EAAA,GAAI,cACnD,gBAAgB;gBAEpB,MAAM,IAAI,YAAA,YAAY,CAAe,KAAK;;YAE9C,IAAI,OAAA,aAAa,CAAC,OAAO,SAAS,cAAc,GAAG;gBAC/C,MAAM,OAAqB,mBAAA,gBAAgB,CAAC,WAAW,CACnD,mBAAA,gBAAgB,CAAC,KAAK,CAAC,CAAA,MAAM,SAAS,IAAI,CAAC,IAAI,EAAA,GAAI,cACnD,gBAAgB;gBAEpB,MAAM,IAAI,YAAA,YAAY,CAAe,KAAK;;YAE9C,IAAI,OAAA,aAAa,CAAC,OAAO,SAAS,cAAc,GAAG;gBAC/C,MAAM,OAA4B,mBAAA,gBAAgB,CAAC,WAAW,CAC1D,mBAAA,gBAAgB,CAAC,KAAK,CAAC,CAAA,MAAM,SAAS,IAAI,CAAC,IAAI,EAAA,GAAI,cACnD,uBAAuB;gBAE3B,MAAM,IAAI,YAAA,YAAY,CAAsB,KAAK;;YAErD,IAAI,OAAA,aAAa,CAAC,OAAO,SAAS,cAAc,GAAG;gBAC/C,MAAM,OAAqB,mBAAA,gBAAgB,CAAC,WAAW,CACnD,mBAAA,gBAAgB,CAAC,KAAK,CAAC,CAAA,MAAM,SAAS,IAAI,CAAC,IAAI,EAAA,GAAI,cACnD,gBAAgB;gBAEpB,MAAM,IAAI,YAAA,YAAY,CAAe,KAAK;;YAI9C,IAAI,SAAS,cAAc,IAAI,OAAO,SAAS,cAAc,IAAI,KAAK;gBAClE,MAAM,OAAa,mBAAA,gBAAgB,CAAC,WAAW,CAC3C,mBAAA,gBAAgB,CAAC,KAAK,CAAC,CAAA,MAAM,SAAS,IAAI,CAAC,IAAI,EAAA,GAAI,cACnD,QAAQ;gBAEZ,OAAO;;YAGX,IAAI,OAAO,MAAM,SAAS,IAAI,CAAC,IAAI;YACnC,MAAM,IAAI,YAAA,YAAY,CAAS,SAAS,cAAc,EAAE;QAC5D;;IASc,yBAAyB,QAAyB,EAAA;;YAC5D,MAAM,cAAc,mBAAA,gBAAgB,CAAC,kBAAkB,CAAC,SAAS,OAAO,CAAC,eAAe;YAExF,IAAI,OAAA,aAAa,CAAC,OAAO,SAAS,cAAc,GAAG;gBAC/C,MAAM,OAA2B,mBAAA,gBAAgB,CAAC,WAAW,CACzD,mBAAA,gBAAgB,CAAC,KAAK,CAAC,CAAA,MAAM,SAAS,IAAI,CAAC,IAAI,EAAA,GAAI,cACnD,sBAAsB;gBAE1B,OAAO;;YAEX,IAAI,OAAA,aAAa,CAAC,OAAO,SAAS,cAAc,GAAG;gBAC/C,MAAM,OAAqB,mBAAA,gBAAgB,CAAC,WAAW,CACnD,mBAAA,gBAAgB,CAAC,KAAK,CAAC,CAAA,MAAM,SAAS,IAAI,CAAC,IAAI,EAAA,GAAI,cACnD,gBAAgB;gBAEpB,MAAM,IAAI,YAAA,YAAY,CAAe,KAAK;;YAE9C,IAAI,OAAA,aAAa,CAAC,OAAO,SAAS,cAAc,GAAG;gBAC/C,MAAM,OAAqB,mBAAA,gBAAgB,CAAC,WAAW,CACnD,mBAAA,gBAAgB,CAAC,KAAK,CAAC,CAAA,MAAM,SAAS,IAAI,CAAC,IAAI,EAAA,GAAI,cACnD,gBAAgB;gBAEpB,MAAM,IAAI,YAAA,YAAY,CAAe,KAAK;;YAE9C,IAAI,OAAA,aAAa,CAAC,OAAO,SAAS,cAAc,GAAG;gBAC/C,MAAM,OAAqB,mBAAA,gBAAgB,CAAC,WAAW,CACnD,mBAAA,gBAAgB,CAAC,KAAK,CAAC,CAAA,MAAM,SAAS,IAAI,CAAC,IAAI,EAAA,GAAI,cACnD,gBAAgB;gBAEpB,MAAM,IAAI,YAAA,YAAY,CAAe,KAAK;;YAE9C,IAAI,OAAA,aAAa,CAAC,OAAO,SAAS,cAAc,GAAG;gBAC/C,MAAM,OAAqB,mBAAA,gBAAgB,CAAC,WAAW,CACnD,mBAAA,gBAAgB,CAAC,KAAK,CAAC,CAAA,MAAM,SAAS,IAAI,CAAC,IAAI,EAAA,GAAI,cACnD,gBAAgB;gBAEpB,MAAM,IAAI,YAAA,YAAY,CAAe,KAAK;;YAE9C,IAAI,OAAA,aAAa,CAAC,OAAO,SAAS,cAAc,GAAG;gBAC/C,MAAM,OAAqB,mBAAA,gBAAgB,CAAC,WAAW,CACnD,mBAAA,gBAAgB,CAAC,KAAK,CAAC,CAAA,MAAM,SAAS,IAAI,CAAC,IAAI,EAAA,GAAI,cACnD,gBAAgB;gBAEpB,MAAM,IAAI,YAAA,YAAY,CAAe,KAAK;;YAE9C,IAAI,OAAA,aAAa,CAAC,OAAO,SAAS,cAAc,GAAG;gBAC/C,MAAM,OAA4B,mBAAA,gBAAgB,CAAC,WAAW,CAC1D,mBAAA,gBAAgB,CAAC,KAAK,CAAC,CAAA,MAAM,SAAS,IAAI,CAAC,IAAI,EAAA,GAAI,cACnD,uBAAuB;gBAE3B,MAAM,IAAI,YAAA,YAAY,CAAsB,KAAK;;YAErD,IAAI,OAAA,aAAa,CAAC,OAAO,SAAS,cAAc,GAAG;gBAC/C,MAAM,OAAqB,mBAAA,gBAAgB,CAAC,WAAW,CACnD,mBAAA,gBAAgB,CAAC,KAAK,CAAC,CAAA,MAAM,SAAS,IAAI,CAAC,IAAI,EAAA,GAAI,cACnD,gBAAgB;gBAEpB,MAAM,IAAI,YAAA,YAAY,CAAe,KAAK;;YAI9C,IAAI,SAAS,cAAc,IAAI,OAAO,SAAS,cAAc,IAAI,KAAK;gBAClE,MAAM,OAA2B,mBAAA,gBAAgB,CAAC,WAAW,CACzD,mBAAA,gBAAgB,CAAC,KAAK,CAAC,CAAA,MAAM,SAAS,IAAI,CAAC,IAAI,EAAA,GAAI,cACnD,sBAAsB;gBAE1B,OAAO;;YAGX,IAAI,OAAO,MAAM,SAAS,IAAI,CAAC,IAAI;YACnC,MAAM,IAAI,YAAA,YAAY,CAAS,SAAS,cAAc,EAAE;QAC5D;;IASc,2BAA2B,QAAyB,EAAA;;YAC9D,MAAM,cAAc,mBAAA,gBAAgB,CAAC,kBAAkB,CAAC,SAAS,OAAO,CAAC,eAAe;YAExF,IAAI,OAAA,aAAa,CAAC,OAAO,SAAS,cAAc,GAAG;gBAC/C,MAAM,OAA4B,mBAAA,gBAAgB,CAAC,WAAW,CAC1D,mBAAA,gBAAgB,CAAC,KAAK,CAAC,CAAA,MAAM,SAAS,IAAI,CAAC,IAAI,EAAA,GAAI,cACnD,uBAAuB;gBAE3B,OAAO;;YAEX,IAAI,OAAA,aAAa,CAAC,OAAO,SAAS,cAAc,GAAG;gBAC/C,MAAM,OAAqB,mBAAA,gBAAgB,CAAC,WAAW,CACnD,mBAAA,gBAAgB,CAAC,KAAK,CAAC,CAAA,MAAM,SAAS,IAAI,CAAC,IAAI,EAAA,GAAI,cACnD,gBAAgB;gBAEpB,MAAM,IAAI,YAAA,YAAY,CAAe,KAAK;;YAE9C,IAAI,OAAA,aAAa,CAAC,OAAO,SAAS,cAAc,GAAG;gBAC/C,MAAM,OAAqB,mBAAA,gBAAgB,CAAC,WAAW,CACnD,mBAAA,gBAAgB,CAAC,KAAK,CAAC,CAAA,MAAM,SAAS,IAAI,CAAC,IAAI,EAAA,GAAI,cACnD,gBAAgB;gBAEpB,MAAM,IAAI,YAAA,YAAY,CAAe,KAAK;;YAE9C,IAAI,OAAA,aAAa,CAAC,OAAO,SAAS,cAAc,GAAG;gBAC/C,MAAM,OAAqB,mBAAA,gBAAgB,CAAC,WAAW,CACnD,mBAAA,gBAAgB,CAAC,KAAK,CAAC,CAAA,MAAM,SAAS,IAAI,CAAC,IAAI,EAAA,GAAI,cACnD,gBAAgB;gBAEpB,MAAM,IAAI,YAAA,YAAY,CAAe,KAAK;;YAE9C,IAAI,OAAA,aAAa,CAAC,OAAO,SAAS,cAAc,GAAG;gBAC/C,MAAM,OAAqB,mBAAA,gBAAgB,CAAC,WAAW,CACnD,mBAAA,gBAAgB,CAAC,KAAK,CAAC,CAAA,MAAM,SAAS,IAAI,CAAC,IAAI,EAAA,GAAI,cACnD,gBAAgB;gBAEpB,MAAM,IAAI,YAAA,YAAY,CAAe,KAAK;;YAE9C,IAAI,OAAA,aAAa,CAAC,OAAO,SAAS,cAAc,GAAG;gBAC/C,MAAM,OAAqB,mBAAA,gBAAgB,CAAC,WAAW,CACnD,mBAAA,gBAAgB,CAAC,KAAK,CAAC,CAAA,MAAM,SAAS,IAAI,CAAC,IAAI,EAAA,GAAI,cACnD,gBAAgB;gBAEpB,MAAM,IAAI,YAAA,YAAY,CAAe,KAAK;;YAE9C,IAAI,OAAA,aAAa,CAAC,OAAO,SAAS,cAAc,GAAG;gBAC/C,MAAM,OAA4B,mBAAA,gBAAgB,CAAC,WAAW,CAC1D,mBAAA,gBAAgB,CAAC,KAAK,CAAC,CAAA,MAAM,SAAS,IAAI,CAAC,IAAI,EAAA,GAAI,cACnD,uBAAuB;gBAE3B,MAAM,IAAI,YAAA,YAAY,CAAsB,KAAK;;YAErD,IAAI,OAAA,aAAa,CAAC,OAAO,SAAS,cAAc,GAAG;gBAC/C,MAAM,OAAqB,mBAAA,gBAAgB,CAAC,WAAW,CACnD,mBAAA,gBAAgB,CAAC,KAAK,CAAC,CAAA,MAAM,SAAS,IAAI,CAAC,IAAI,EAAA,GAAI,cACnD,gBAAgB;gBAEpB,MAAM,IAAI,YAAA,YAAY,CAAe,KAAK;;YAI9C,IAAI,SAAS,cAAc,IAAI,OAAO,SAAS,cAAc,IAAI,KAAK;gBAClE,MAAM,OAA4B,mBAAA,gBAAgB,CAAC,WAAW,CAC1D,mBAAA,gBAAgB,CAAC,KAAK,CAAC,CAAA,MAAM,SAAS,IAAI,CAAC,IAAI,EAAA,GAAI,cACnD,uBAAuB;gBAE3B,OAAO;;YAGX,IAAI,OAAO,MAAM,SAAS,IAAI,CAAC,IAAI;YACnC,MAAM,IAAI,YAAA,YAAY,CAAS,SAAS,cAAc,EAAE;QAC5D;;IASc,eAAe,QAAyB,EAAA;;YAClD,MAAM,cAAc,mBAAA,gBAAgB,CAAC,kBAAkB,CAAC,SAAS,OAAO,CAAC,eAAe;YAExF,IAAI,OAAA,aAAa,CAAC,OAAO,SAAS,cAAc,GAAG;gBAC/C,MAAM,OAAqB,mBAAA,gBAAgB,CAAC,WAAW,CACnD,mBAAA,gBAAgB,CAAC,KAAK,CAAC,CAAA,MAAM,SAAS,IAAI,CAAC,IAAI,EAAA,GAAI,cACnD,gBAAgB;gBAEpB,OAAO;;YAEX,IAAI,OAAA,aAAa,CAAC,OAAO,SAAS,cAAc,GAAG;gBAC/C,MAAM,OAAqB,mBAAA,gBAAgB,CAAC,WAAW,CACnD,mBAAA,gBAAgB,CAAC,KAAK,CAAC,CAAA,MAAM,SAAS,IAAI,CAAC,IAAI,EAAA,GAAI,cACnD,gBAAgB;gBAEpB,MAAM,IAAI,YAAA,YAAY,CAAe,KAAK;;YAE9C,IAAI,OAAA,aAAa,CAAC,OAAO,SAAS,cAAc,GAAG;gBAC/C,MAAM,OAAqB,mBAAA,gBAAgB,CAAC,WAAW,CACnD,mBAAA,gBAAgB,CAAC,KAAK,CAAC,CAAA,MAAM,SAAS,IAAI,CAAC,IAAI,EAAA,GAAI,cACnD,gBAAgB;gBAEpB,MAAM,IAAI,YAAA,YAAY,CAAe,KAAK;;YAE9C,IAAI,OAAA,aAAa,CAAC,OAAO,SAAS,cAAc,GAAG;gBAC/C,MAAM,OAAqB,mBAAA,gBAAgB,CAAC,WAAW,CACnD,mBAAA,gBAAgB,CAAC,KAAK,CAAC,CAAA,MAAM,SAAS,IAAI,CAAC,IAAI,EAAA,GAAI,cACnD,gBAAgB;gBAEpB,MAAM,IAAI,YAAA,YAAY,CAAe,KAAK;;YAE9C,IAAI,OAAA,aAAa,CAAC,OAAO,SAAS,cAAc,GAAG;gBAC/C,MAAM,OAAqB,mBAAA,gBAAgB,CAAC,WAAW,CACnD,mBAAA,gBAAgB,CAAC,KAAK,CAAC,CAAA,MAAM,SAAS,IAAI,CAAC,IAAI,EAAA,GAAI,cACnD,gBAAgB;gBAEpB,MAAM,IAAI,YAAA,YAAY,CAAe,KAAK;;YAE9C,IAAI,OAAA,aAAa,CAAC,OAAO,SAAS,cAAc,GAAG;gBAC/C,MAAM,OAAqB,mBAAA,gBAAgB,CAAC,WAAW,CACnD,mBAAA,gBAAgB,CAAC,KAAK,CAAC,CAAA,MAAM,SAAS,IAAI,CAAC,IAAI,EAAA,GAAI,cACnD,gBAAgB;gBAEpB,MAAM,IAAI,YAAA,YAAY,CAAe,KAAK;;YAE9C,IAAI,OAAA,aAAa,CAAC,OAAO,SAAS,cAAc,GAAG;gBAC/C,MAAM,OAA4B,mBAAA,gBAAgB,CAAC,WAAW,CAC1D,mBAAA,gBAAgB,CAAC,KAAK,CAAC,CAAA,MAAM,SAAS,IAAI,CAAC,IAAI,EAAA,GAAI,cACnD,uBAAuB;gBAE3B,MAAM,IAAI,YAAA,YAAY,CAAsB,KAAK;;YAErD,IAAI,OAAA,aAAa,CAAC,OAAO,SAAS,cAAc,GAAG;gBAC/C,MAAM,OAAqB,mBAAA,gBAAgB,CAAC,WAAW,CACnD,mBAAA,gBAAgB,CAAC,KAAK,CAAC,CAAA,MAAM,SAAS,IAAI,CAAC,IAAI,EAAA,GAAI,cACnD,gBAAgB;gBAEpB,MAAM,IAAI,YAAA,YAAY,CAAe,KAAK;;YAI9C,IAAI,SAAS,cAAc,IAAI,OAAO,SAAS,cAAc,IAAI,KAAK;gBAClE,MAAM,OAAqB,mBAAA,gBAAgB,CAAC,WAAW,CACnD,mBAAA,gBAAgB,CAAC,KAAK,CAAC,CAAA,MAAM,SAAS,IAAI,CAAC,IAAI,EAAA,GAAI,cACnD,gBAAgB;gBAEpB,OAAO;;YAGX,IAAI,OAAO,MAAM,SAAS,IAAI,CAAC,IAAI;YACnC,MAAM,IAAI,YAAA,YAAY,CAAS,SAAS,cAAc,EAAE;QAC5D;;IASc,4BAA4B,QAAyB,EAAA;;YAC/D,MAAM,cAAc,mBAAA,gBAAgB,CAAC,kBAAkB,CAAC,SAAS,OAAO,CAAC,eAAe;YAExF,IAAI,OAAA,aAAa,CAAC,OAAO,SAAS,cAAc,GAAG;gBAC/C,MAAM,OAA2B,mBAAA,gBAAgB,CAAC,WAAW,CACzD,mBAAA,gBAAgB,CAAC,KAAK,CAAC,CAAA,MAAM,SAAS,IAAI,CAAC,IAAI,EAAA,GAAI,cACnD,sBAAsB;gBAE1B,OAAO;;YAEX,IAAI,OAAA,aAAa,CAAC,OAAO,SAAS,cAAc,GAAG;gBAC/C,MAAM,OAAqB,mBAAA,gBAAgB,CAAC,WAAW,CACnD,mBAAA,gBAAgB,CAAC,KAAK,CAAC,CAAA,MAAM,SAAS,IAAI,CAAC,IAAI,EAAA,GAAI,cACnD,gBAAgB;gBAEpB,MAAM,IAAI,YAAA,YAAY,CAAe,KAAK;;YAE9C,IAAI,OAAA,aAAa,CAAC,OAAO,SAAS,cAAc,GAAG;gBAC/C,MAAM,OAAqB,mBAAA,gBAAgB,CAAC,WAAW,CACnD,mBAAA,gBAAgB,CAAC,KAAK,CAAC,CAAA,MAAM,SAAS,IAAI,CAAC,IAAI,EAAA,GAAI,cACnD,gBAAgB;gBAEpB,MAAM,IAAI,YAAA,YAAY,CAAe,KAAK;;YAE9C,IAAI,OAAA,aAAa,CAAC,OAAO,SAAS,cAAc,GAAG;gBAC/C,MAAM,OAAqB,mBAAA,gBAAgB,CAAC,WAAW,CACnD,mBAAA,gBAAgB,CAAC,KAAK,CAAC,CAAA,MAAM,SAAS,IAAI,CAAC,IAAI,EAAA,GAAI,cACnD,gBAAgB;gBAEpB,MAAM,IAAI,YAAA,YAAY,CAAe,KAAK;;YAE9C,IAAI,OAAA,aAAa,CAAC,OAAO,SAAS,cAAc,GAAG;gBAC/C,MAAM,OAAqB,mBAAA,gBAAgB,CAAC,WAAW,CACnD,mBAAA,gBAAgB,CAAC,KAAK,CAAC,CAAA,MAAM,SAAS,IAAI,CAAC,IAAI,EAAA,GAAI,cACnD,gBAAgB;gBAEpB,MAAM,IAAI,YAAA,YAAY,CAAe,KAAK;;YAE9C,IAAI,OAAA,aAAa,CAAC,OAAO,SAAS,cAAc,GAAG;gBAC/C,MAAM,OAAqB,mBAAA,gBAAgB,CAAC,WAAW,CACnD,mBAAA,gBAAgB,CAAC,KAAK,CAAC,CAAA,MAAM,SAAS,IAAI,CAAC,IAAI,EAAA,GAAI,cACnD,gBAAgB;gBAEpB,MAAM,IAAI,YAAA,YAAY,CAAe,KAAK;;YAE9C,IAAI,OAAA,aAAa,CAAC,OAAO,SAAS,cAAc,GAAG;gBAC/C,MAAM,OAA4B,mBAAA,gBAAgB,CAAC,WAAW,CAC1D,mBAAA,gBAAgB,CAAC,KAAK,CAAC,CAAA,MAAM,SAAS,IAAI,CAAC,IAAI,EAAA,GAAI,cACnD,uBAAuB;gBAE3B,MAAM,IAAI,YAAA,YAAY,CAAsB,KAAK;;YAErD,IAAI,OAAA,aAAa,CAAC,OAAO,SAAS,cAAc,GAAG;gBAC/C,MAAM,OAAqB,mBAAA,gBAAgB,CAAC,WAAW,CACnD,mBAAA,gBAAgB,CAAC,KAAK,CAAC,CAAA,MAAM,SAAS,IAAI,CAAC,IAAI,EAAA,GAAI,cACnD,gBAAgB;gBAEpB,MAAM,IAAI,YAAA,YAAY,CAAe,KAAK;;YAI9C,IAAI,SAAS,cAAc,IAAI,OAAO,SAAS,cAAc,IAAI,KAAK;gBAClE,MAAM,OAA2B,mBAAA,gBAAgB,CAAC,WAAW,CACzD,mBAAA,gBAAgB,CAAC,KAAK,CAAC,CAAA,MAAM,SAAS,IAAI,CAAC,IAAI,EAAA,GAAI,cACnD,sBAAsB;gBAE1B,OAAO;;YAGX,IAAI,OAAO,MAAM,SAAS,IAAI,CAAC,IAAI;YACnC,MAAM,IAAI,YAAA,YAAY,CAAS,SAAS,cAAc,EAAE;QAC5D;;IASc,yBAAyB,QAAyB,EAAA;;YAC5D,MAAM,cAAc,mBAAA,gBAAgB,CAAC,kBAAkB,CAAC,SAAS,OAAO,CAAC,eAAe;YAExF,IAAI,OAAA,aAAa,CAAC,OAAO,SAAS,cAAc,GAAG;gBAC/C,MAAM,OAAkC,mBAAA,gBAAgB,CAAC,WAAW,CAChE,mBAAA,gBAAgB,CAAC,KAAK,CAAC,CAAA,MAAM,SAAS,IAAI,CAAC,IAAI,EAAA,GAAI,cACnD,6BAA6B;gBAEjC,OAAO;;YAEX,IAAI,OAAA,aAAa,CAAC,OAAO,SAAS,cAAc,GAAG;gBAC/C,MAAM,OAAqB,mBAAA,gBAAgB,CAAC,WAAW,CACnD,mBAAA,gBAAgB,CAAC,KAAK,CAAC,CAAA,MAAM,SAAS,IAAI,CAAC,IAAI,EAAA,GAAI,cACnD,gBAAgB;gBAEpB,MAAM,IAAI,YAAA,YAAY,CAAe,KAAK;;YAE9C,IAAI,OAAA,aAAa,CAAC,OAAO,SAAS,cAAc,GAAG;gBAC/C,MAAM,OAAqB,mBAAA,gBAAgB,CAAC,WAAW,CACnD,mBAAA,gBAAgB,CAAC,KAAK,CAAC,CAAA,MAAM,SAAS,IAAI,CAAC,IAAI,EAAA,GAAI,cACnD,gBAAgB;gBAEpB,MAAM,IAAI,YAAA,YAAY,CAAe,KAAK;;YAE9C,IAAI,OAAA,aAAa,CAAC,OAAO,SAAS,cAAc,GAAG;gBAC/C,MAAM,OAAqB,mBAAA,gBAAgB,CAAC,WAAW,CACnD,mBAAA,gBAAgB,CAAC,KAAK,CAAC,CAAA,MAAM,SAAS,IAAI,CAAC,IAAI,EAAA,GAAI,cACnD,gBAAgB;gBAEpB,MAAM,IAAI,YAAA,YAAY,CAAe,KAAK;;YAE9C,IAAI,OAAA,aAAa,CAAC,OAAO,SAAS,cAAc,GAAG;gBAC/C,MAAM,OAAqB,mBAAA,gBAAgB,CAAC,WAAW,CACnD,mBAAA,gBAAgB,CAAC,KAAK,CAAC,CAAA,MAAM,SAAS,IAAI,CAAC,IAAI,EAAA,GAAI,cACnD,gBAAgB;gBAEpB,MAAM,IAAI,YAAA,YAAY,CAAe,KAAK;;YAE9C,IAAI,OAAA,aAAa,CAAC,OAAO,SAAS,cAAc,GAAG;gBAC/C,MAAM,OAAqB,mBAAA,gBAAgB,CAAC,WAAW,CACnD,mBAAA,gBAAgB,CAAC,KAAK,CAAC,CAAA,MAAM,SAAS,IAAI,CAAC,IAAI,EAAA,GAAI,cACnD,gBAAgB;gBAEpB,MAAM,IAAI,YAAA,YAAY,CAAe,KAAK;;YAE9C,IAAI,OAAA,aAAa,CAAC,OAAO,SAAS,cAAc,GAAG;gBAC/C,MAAM,OAA4B,mBAAA,gBAAgB,CAAC,WAAW,CAC1D,mBAAA,gBAAgB,CAAC,KAAK,CAAC,CAAA,MAAM,SAAS,IAAI,CAAC,IAAI,EAAA,GAAI,cACnD,uBAAuB;gBAE3B,MAAM,IAAI,YAAA,YAAY,CAAsB,KAAK;;YAErD,IAAI,OAAA,aAAa,CAAC,OAAO,SAAS,cAAc,GAAG;gBAC/C,MAAM,OAAqB,mBAAA,gBAAgB,CAAC,WAAW,CACnD,mBAAA,gBAAgB,CAAC,KAAK,CAAC,CAAA,MAAM,SAAS,IAAI,CAAC,IAAI,EAAA,GAAI,cACnD,gBAAgB;gBAEpB,MAAM,IAAI,YAAA,YAAY,CAAe,KAAK;;YAI9C,IAAI,SAAS,cAAc,IAAI,OAAO,SAAS,cAAc,IAAI,KAAK;gBAClE,MAAM,OAAkC,mBAAA,gBAAgB,CAAC,WAAW,CAChE,mBAAA,gBAAgB,CAAC,KAAK,CAAC,CAAA,MAAM,SAAS,IAAI,CAAC,IAAI,EAAA,GAAI,cACnD,6BAA6B;gBAEjC,OAAO;;YAGX,IAAI,OAAO,MAAM,SAAS,IAAI,CAAC,IAAI;YACnC,MAAM,IAAI,YAAA,YAAY,CAAS,SAAS,cAAc,EAAE;QAC5D;;IASc,gBAAgB,QAAyB,EAAA;;YACnD,MAAM,cAAc,mBAAA,gBAAgB,CAAC,kBAAkB,CAAC,SAAS,OAAO,CAAC,eAAe;YAExF,IAAI,OAAA,aAAa,CAAC,OAAO,SAAS,cAAc,GAAG;gBAC/C,MAAM,OAAiC,mBAAA,gBAAgB,CAAC,WAAW,CAC/D,mBAAA,gBAAgB,CAAC,KAAK,CAAC,CAAA,MAAM,SAAS,IAAI,CAAC,IAAI,EAAA,GAAI,cACnD,4BAA4B;gBAEhC,OAAO;;YAEX,IAAI,OAAA,aAAa,CAAC,OAAO,SAAS,cAAc,GAAG;gBAC/C,MAAM,OAAqB,mBAAA,gBAAgB,CAAC,WAAW,CACnD,mBAAA,gBAAgB,CAAC,KAAK,CAAC,CAAA,MAAM,SAAS,IAAI,CAAC,IAAI,EAAA,GAAI,cACnD,gBAAgB;gBAEpB,MAAM,IAAI,YAAA,YAAY,CAAe,KAAK;;YAE9C,IAAI,OAAA,aAAa,CAAC,OAAO,SAAS,cAAc,GAAG;gBAC/C,MAAM,OAAqB,mBAAA,gBAAgB,CAAC,WAAW,CACnD,mBAAA,gBAAgB,CAAC,KAAK,CAAC,CAAA,MAAM,SAAS,IAAI,CAAC,IAAI,EAAA,GAAI,cACnD,gBAAgB;gBAEpB,MAAM,IAAI,YAAA,YAAY,CAAe,KAAK;;YAE9C,IAAI,OAAA,aAAa,CAAC,OAAO,SAAS,cAAc,GAAG;gBAC/C,MAAM,OAAqB,mBAAA,gBAAgB,CAAC,WAAW,CACnD,mBAAA,gBAAgB,CAAC,KAAK,CAAC,CAAA,MAAM,SAAS,IAAI,CAAC,IAAI,EAAA,GAAI,cACnD,gBAAgB;gBAEpB,MAAM,IAAI,YAAA,YAAY,CAAe,KAAK;;YAE9C,IAAI,OAAA,aAAa,CAAC,OAAO,SAAS,cAAc,GAAG;gBAC/C,MAAM,OAAqB,mBAAA,gBAAgB,CAAC,WAAW,CACnD,mBAAA,gBAAgB,CAAC,KAAK,CAAC,CAAA,MAAM,SAAS,IAAI,CAAC,IAAI,EAAA,GAAI,cACnD,gBAAgB;gBAEpB,MAAM,IAAI,YAAA,YAAY,CAAe,KAAK;;YAE9C,IAAI,OAAA,aAAa,CAAC,OAAO,SAAS,cAAc,GAAG;gBAC/C,MAAM,OAAqB,mBAAA,gBAAgB,CAAC,WAAW,CACnD,mBAAA,gBAAgB,CAAC,KAAK,CAAC,CAAA,MAAM,SAAS,IAAI,CAAC,IAAI,EAAA,GAAI,cACnD,gBAAgB;gBAEpB,MAAM,IAAI,YAAA,YAAY,CAAe,KAAK;;YAE9C,IAAI,OAAA,aAAa,CAAC,OAAO,SAAS,cAAc,GAAG;gBAC/C,MAAM,OAA4B,mBAAA,gBAAgB,CAAC,WAAW,CAC1D,mBAAA,gBAAgB,CAAC,KAAK,CAAC,CAAA,MAAM,SAAS,IAAI,CAAC,IAAI,EAAA,GAAI,cACnD,uBAAuB;gBAE3B,MAAM,IAAI,YAAA,YAAY,CAAsB,KAAK;;YAErD,IAAI,OAAA,aAAa,CAAC,OAAO,SAAS,cAAc,GAAG;gBAC/C,MAAM,OAAqB,mBAAA,gBAAgB,CAAC,WAAW,CACnD,mBAAA,gBAAgB,CAAC,KAAK,CAAC,CAAA,MAAM,SAAS,IAAI,CAAC,IAAI,EAAA,GAAI,cACnD,gBAAgB;gBAEpB,MAAM,IAAI,YAAA,YAAY,CAAe,KAAK;;YAI9C,IAAI,SAAS,cAAc,IAAI,OAAO,SAAS,cAAc,IAAI,KAAK;gBAClE,MAAM,OAAiC,mBAAA,gBAAgB,CAAC,WAAW,CAC/D,mBAAA,gBAAgB,CAAC,KAAK,CAAC,CAAA,MAAM,SAAS,IAAI,CAAC,IAAI,EAAA,GAAI,cACnD,4BAA4B;gBAEhC,OAAO;;YAGX,IAAI,OAAO,MAAM,SAAS,IAAI,CAAC,IAAI;YACnC,MAAM,IAAI,YAAA,YAAY,CAAS,SAAS,cAAc,EAAE;QAC5D;;IASc,iBAAiB,QAAyB,EAAA;;YACpD,MAAM,cAAc,mBAAA,gBAAgB,CAAC,kBAAkB,CAAC,SAAS,OAAO,CAAC,eAAe;YAExF,IAAI,OAAA,aAAa,CAAC,OAAO,SAAS,cAAc,GAAG;gBAC/C,MAAM,OAAqB,mBAAA,gBAAgB,CAAC,WAAW,CACnD,mBAAA,gBAAgB,CAAC,KAAK,CAAC,CAAA,MAAM,SAAS,IAAI,CAAC,IAAI,EAAA,GAAI,cACnD,gBAAgB;gBAEpB,OAAO;;YAEX,IAAI,OAAA,aAAa,CAAC,OAAO,SAAS,cAAc,GAAG;gBAC/C,MAAM,OAAqB,mBAAA,gBAAgB,CAAC,WAAW,CACnD,mBAAA,gBAAgB,CAAC,KAAK,CAAC,CAAA,MAAM,SAAS,IAAI,CAAC,IAAI,EAAA,GAAI,cACnD,gBAAgB;gBAEpB,MAAM,IAAI,YAAA,YAAY,CAAe,KAAK;;YAE9C,IAAI,OAAA,aAAa,CAAC,OAAO,SAAS,cAAc,GAAG;gBAC/C,MAAM,OAAqB,mBAAA,gBAAgB,CAAC,WAAW,CACnD,mBAAA,gBAAgB,CAAC,KAAK,CAAC,CAAA,MAAM,SAAS,IAAI,CAAC,IAAI,EAAA,GAAI,cACnD,gBAAgB;gBAEpB,MAAM,IAAI,YAAA,YAAY,CAAe,KAAK;;YAE9C,IAAI,OAAA,aAAa,CAAC,OAAO,SAAS,cAAc,GAAG;gBAC/C,MAAM,OAAqB,mBAAA,gBAAgB,CAAC,WAAW,CACnD,mBAAA,gBAAgB,CAAC,KAAK,CAAC,CAAA,MAAM,SAAS,IAAI,CAAC,IAAI,EAAA,GAAI,cACnD,gBAAgB;gBAEpB,MAAM,IAAI,YAAA,YAAY,CAAe,KAAK;;YAE9C,IAAI,OAAA,aAAa,CAAC,OAAO,SAAS,cAAc,GAAG;gBAC/C,MAAM,OAAqB,mBAAA,gBAAgB,CAAC,WAAW,CACnD,mBAAA,gBAAgB,CAAC,KAAK,CAAC,CAAA,MAAM,SAAS,IAAI,CAAC,IAAI,EAAA,GAAI,cACnD,gBAAgB;gBAEpB,MAAM,IAAI,YAAA,YAAY,CAAe,KAAK;;YAE9C,IAAI,OAAA,aAAa,CAAC,OAAO,SAAS,cAAc,GAAG;gBAC/C,MAAM,OAAqB,mBAAA,gBAAgB,CAAC,WAAW,CACnD,mBAAA,gBAAgB,CAAC,KAAK,CAAC,CAAA,MAAM,SAAS,IAAI,CAAC,IAAI,EAAA,GAAI,cACnD,gBAAgB;gBAEpB,MAAM,IAAI,YAAA,YAAY,CAAe,KAAK;;YAE9C,IAAI,OAAA,aAAa,CAAC,OAAO,SAAS,cAAc,GAAG;gBAC/C,MAAM,OAA4B,mBAAA,gBAAgB,CAAC,WAAW,CAC1D,mBAAA,gBAAgB,CAAC,KAAK,CAAC,CAAA,MAAM,SAAS,IAAI,CAAC,IAAI,EAAA,GAAI,cACnD,uBAAuB;gBAE3B,MAAM,IAAI,YAAA,YAAY,CAAsB,KAAK;;YAErD,IAAI,OAAA,aAAa,CAAC,OAAO,SAAS,cAAc,GAAG;gBAC/C,MAAM,OAAqB,mBAAA,gBAAgB,CAAC,WAAW,CACnD,mBAAA,gBAAgB,CAAC,KAAK,CAAC,CAAA,MAAM,SAAS,IAAI,CAAC,IAAI,EAAA,GAAI,cACnD,gBAAgB;gBAEpB,MAAM,IAAI,YAAA,YAAY,CAAe,KAAK;;YAI9C,IAAI,SAAS,cAAc,IAAI,OAAO,SAAS,cAAc,IAAI,KAAK;gBAClE,MAAM,OAAqB,mBAAA,gBAAgB,CAAC,WAAW,CACnD,mBAAA,gBAAgB,CAAC,KAAK,CAAC,CAAA,MAAM,SAAS,IAAI,CAAC,IAAI,EAAA,GAAI,cACnD,gBAAgB;gBAEpB,OAAO;;YAGX,IAAI,OAAO,MAAM,SAAS,IAAI,CAAC,IAAI;YACnC,MAAM,IAAI,YAAA,YAAY,CAAS,SAAS,cAAc,EAAE;QAC5D;;IASc,kBAAkB,QAAyB,EAAA;;YACrD,MAAM,cAAc,mBAAA,gBAAgB,CAAC,kBAAkB,CAAC,SAAS,OAAO,CAAC,eAAe;YAExF,IAAI,OAAA,aAAa,CAAC,OAAO,SAAS,cAAc,GAAG;gBAC/C,MAAM,OAAqB,mBAAA,gBAAgB,CAAC,WAAW,CACnD,mBAAA,gBAAgB,CAAC,KAAK,CAAC,CAAA,MAAM,SAAS,IAAI,CAAC,IAAI,EAAA,GAAI,cACnD,gBAAgB;gBAEpB,OAAO;;YAEX,IAAI,OAAA,aAAa,CAAC,OAAO,SAAS,cAAc,GAAG;gBAC/C,MAAM,OAAqB,mBAAA,gBAAgB,CAAC,WAAW,CACnD,mBAAA,gBAAgB,CAAC,KAAK,CAAC,CAAA,MAAM,SAAS,IAAI,CAAC,IAAI,EAAA,GAAI,cACnD,gBAAgB;gBAEpB,OAAO;;YAEX,IAAI,OAAA,aAAa,CAAC,OAAO,SAAS,cAAc,GAAG;gBAC/C,MAAM,OAAqB,mBAAA,gBAAgB,CAAC,WAAW,CACnD,mBAAA,gBAAgB,CAAC,KAAK,CAAC,CAAA,MAAM,SAAS,IAAI,CAAC,IAAI,EAAA,GAAI,cACnD,gBAAgB;gBAEpB,MAAM,IAAI,YAAA,YAAY,CAAe,KAAK;;YAE9C,IAAI,OAAA,aAAa,CAAC,OAAO,SAAS,cAAc,GAAG;gBAC/C,MAAM,OAAqB,mBAAA,gBAAgB,CAAC,WAAW,CACnD,mBAAA,gBAAgB,CAAC,KAAK,CAAC,CAAA,MAAM,SAAS,IAAI,CAAC,IAAI,EAAA,GAAI,cACnD,gBAAgB;gBAEpB,MAAM,IAAI,YAAA,YAAY,CAAe,KAAK;;YAE9C,IAAI,OAAA,aAAa,CAAC,OAAO,SAAS,cAAc,GAAG;gBAC/C,MAAM,OAAqB,mBAAA,gBAAgB,CAAC,WAAW,CACnD,mBAAA,gBAAgB,CAAC,KAAK,CAAC,CAAA,MAAM,SAAS,IAAI,CAAC,IAAI,EAAA,GAAI,cACnD,gBAAgB;gBAEpB,MAAM,IAAI,YAAA,YAAY,CAAe,KAAK;;YAE9C,IAAI,OAAA,aAAa,CAAC,OAAO,SAAS,cAAc,GAAG;gBAC/C,MAAM,OAAqB,mBAAA,gBAAgB,CAAC,WAAW,CACnD,mBAAA,gBAAgB,CAAC,KAAK,CAAC,CAAA,MAAM,SAAS,IAAI,CAAC,IAAI,EAAA,GAAI,cACnD,gBAAgB;gBAEpB,MAAM,IAAI,YAAA,YAAY,CAAe,KAAK;;YAE9C,IAAI,OAAA,aAAa,CAAC,OAAO,SAAS,cAAc,GAAG;gBAC/C,MAAM,OAAqB,mBAAA,gBAAgB,CAAC,WAAW,CACnD,mBAAA,gBAAgB,CAAC,KAAK,CAAC,CAAA,MAAM,SAAS,IAAI,CAAC,IAAI,EAAA,GAAI,cACnD,gBAAgB;gBAEpB,MAAM,IAAI,YAAA,YAAY,CAAe,KAAK;;YAE9C,IAAI,OAAA,aAAa,CAAC,OAAO,SAAS,cAAc,GAAG;gBAC/C,MAAM,OAA4B,mBAAA,gBAAgB,CAAC,WAAW,CAC1D,mBAAA,gBAAgB,CAAC,KAAK,CAAC,CAAA,MAAM,SAAS,IAAI,CAAC,IAAI,EAAA,GAAI,cACnD,uBAAuB;gBAE3B,MAAM,IAAI,YAAA,YAAY,CAAsB,KAAK;;YAErD,IAAI,OAAA,aAAa,CAAC,OAAO,SAAS,cAAc,GAAG;gBAC/C,MAAM,OAAqB,mBAAA,gBAAgB,CAAC,WAAW,CACnD,mBAAA,gBAAgB,CAAC,KAAK,CAAC,CAAA,MAAM,SAAS,IAAI,CAAC,IAAI,EAAA,GAAI,cACnD,gBAAgB;gBAEpB,MAAM,IAAI,YAAA,YAAY,CAAe,KAAK;;YAI9C,IAAI,SAAS,cAAc,IAAI,OAAO,SAAS,cAAc,IAAI,KAAK;gBAClE,MAAM,OAAqB,mBAAA,gBAAgB,CAAC,WAAW,CACnD,mBAAA,gBAAgB,CAAC,KAAK,CAAC,CAAA,MAAM,SAAS,IAAI,CAAC,IAAI,EAAA,GAAI,cACnD,gBAAgB;gBAEpB,OAAO;;YAGX,IAAI,OAAO,MAAM,SAAS,IAAI,CAAC,IAAI;YACnC,MAAM,IAAI,YAAA,YAAY,CAAS,SAAS,cAAc,EAAE;QAC5D;;IASc,+BAA+B,QAAyB,EAAA;;YAClE,MAAM,cAAc,mBAAA,gBAAgB,CAAC,kBAAkB,CAAC,SAAS,OAAO,CAAC,eAAe;YAExF,IAAI,OAAA,aAAa,CAAC,OAAO,SAAS,cAAc,GAAG;gBAC/C,MAAM,OAA2B,mBAAA,gBAAgB,CAAC,WAAW,CACzD,mBAAA,gBAAgB,CAAC,KAAK,CAAC,CAAA,MAAM,SAAS,IAAI,CAAC,IAAI,EAAA,GAAI,cACnD,sBAAsB;gBAE1B,OAAO;;YAEX,IAAI,OAAA,aAAa,CAAC,OAAO,SAAS,cAAc,GAAG;gBAC/C,MAAM,OAAqB,mBAAA,gBAAgB,CAAC,WAAW,CACnD,mBAAA,gBAAgB,CAAC,KAAK,CAAC,CAAA,MAAM,SAAS,IAAI,CAAC,IAAI,EAAA,GAAI,cACnD,gBAAgB;gBAEpB,MAAM,IAAI,YAAA,YAAY,CAAe,KAAK;;YAE9C,IAAI,OAAA,aAAa,CAAC,OAAO,SAAS,cAAc,GAAG;gBAC/C,MAAM,OAAqB,mBAAA,gBAAgB,CAAC,WAAW,CACnD,mBAAA,gBAAgB,CAAC,KAAK,CAAC,CAAA,MAAM,SAAS,IAAI,CAAC,IAAI,EAAA,GAAI,cACnD,gBAAgB;gBAEpB,MAAM,IAAI,YAAA,YAAY,CAAe,KAAK;;YAE9C,IAAI,OAAA,aAAa,CAAC,OAAO,SAAS,cAAc,GAAG;gBAC/C,MAAM,OAAqB,mBAAA,gBAAgB,CAAC,WAAW,CACnD,mBAAA,gBAAgB,CAAC,KAAK,CAAC,CAAA,MAAM,SAAS,IAAI,CAAC,IAAI,EAAA,GAAI,cACnD,gBAAgB;gBAEpB,MAAM,IAAI,YAAA,YAAY,CAAe,KAAK;;YAE9C,IAAI,OAAA,aAAa,CAAC,OAAO,SAAS,cAAc,GAAG;gBAC/C,MAAM,OAAqB,mBAAA,gBAAgB,CAAC,WAAW,CACnD,mBAAA,gBAAgB,CAAC,KAAK,CAAC,CAAA,MAAM,SAAS,IAAI,CAAC,IAAI,EAAA,GAAI,cACnD,gBAAgB;gBAEpB,MAAM,IAAI,YAAA,YAAY,CAAe,KAAK;;YAE9C,IAAI,OAAA,aAAa,CAAC,OAAO,SAAS,cAAc,GAAG;gBAC/C,MAAM,OAAqB,mBAAA,gBAAgB,CAAC,WAAW,CACnD,mBAAA,gBAAgB,CAAC,KAAK,CAAC,CAAA,MAAM,SAAS,IAAI,CAAC,IAAI,EAAA,GAAI,cACnD,gBAAgB;gBAEpB,MAAM,IAAI,YAAA,YAAY,CAAe,KAAK;;YAE9C,IAAI,OAAA,aAAa,CAAC,OAAO,SAAS,cAAc,GAAG;gBAC/C,MAAM,OAA4B,mBAAA,gBAAgB,CAAC,WAAW,CAC1D,mBAAA,gBAAgB,CAAC,KAAK,CAAC,CAAA,MAAM,SAAS,IAAI,CAAC,IAAI,EAAA,GAAI,cACnD,uBAAuB;gBAE3B,MAAM,IAAI,YAAA,YAAY,CAAsB,KAAK;;YAErD,IAAI,OAAA,aAAa,CAAC,OAAO,SAAS,cAAc,GAAG;gBAC/C,MAAM,OAAqB,mBAAA,gBAAgB,CAAC,WAAW,CACnD,mBAAA,gBAAgB,CAAC,KAAK,CAAC,CAAA,MAAM,SAAS,IAAI,CAAC,IAAI,EAAA,GAAI,cACnD,gBAAgB;gBAEpB,MAAM,IAAI,YAAA,YAAY,CAAe,KAAK;;YAI9C,IAAI,SAAS,cAAc,IAAI,OAAO,SAAS,cAAc,IAAI,KAAK;gBAClE,MAAM,OAA2B,mBAAA,gBAAgB,CAAC,WAAW,CACzD,mBAAA,gBAAgB,CAAC,KAAK,CAAC,CAAA,MAAM,SAAS,IAAI,CAAC,IAAI,EAAA,GAAI,cACnD,sBAAsB;gBAE1B,OAAO;;YAGX,IAAI,OAAO,MAAM,SAAS,IAAI,CAAC,IAAI;YACnC,MAAM,IAAI,YAAA,YAAY,CAAS,SAAS,cAAc,EAAE;QAC5D;;;AAn3BJ,QAAA,6BAAA,GAAA"}},
    {"offset": {"line": 4397, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 4401, "column": 0}, "map": {"version":3,"sources":["turbopack://[project]/node_modules/svix/src/openapi/apis/EventsApi.ts"],"sourcesContent":["// TODO: better import syntax?\nimport { BaseAPIRequestFactory, RequiredError } from './baseapi';\nimport {Configuration} from '../configuration';\nimport { RequestContext, HttpMethod, ResponseContext, HttpFile} from '../http/http';\nimport {ObjectSerializer} from '../models/ObjectSerializer';\nimport {ApiException} from './exception';\nimport {isCodeInRange} from '../util';\n\nimport { HTTPValidationError } from '../models/HTTPValidationError';\nimport { HttpErrorOut } from '../models/HttpErrorOut';\nimport { MessageEventsOut } from '../models/MessageEventsOut';\n\n/**\n * no description\n */\nexport class EventsApiRequestFactory extends BaseAPIRequestFactory {\n\n    /**\n     * Reads the stream of operational webhook events for this environment\n     * Events\n     * @param limit Limit the number of returned items\n     * @param iterator The iterator returned from a prior invocation\n     * @param eventTypes Filter response based on the event type\n     * @param channels Filter response based on the event type\n     * @param after \n     */\n    public async v1Events(limit?: number, iterator?: string, eventTypes?: Array<string>, channels?: Array<string>, after?: Date, _options?: Configuration): Promise<RequestContext> {\n        let _config = _options || this.configuration;\n\n\n\n\n\n\n        // Path Params\n        const localVarPath = '/api/v1/events';\n\n        // Make Request Context\n        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.GET);\n        requestContext.setHeaderParam(\"Accept\", \"application/json, */*;q=0.8\")\n        const randomId = Math.floor(Math.random() * Math.pow(2, 32))\n        requestContext.setHeaderParam(\"svix-req-id\", randomId.toString())\n\n        // Query Params\n        if (limit !== undefined) {\n            requestContext.setQueryParam(\"limit\", ObjectSerializer.serialize(limit, \"number\", \"uint64\"));\n        }\n        if (iterator !== undefined) {\n            requestContext.setQueryParam(\"iterator\", ObjectSerializer.serialize(iterator, \"string\", \"\"));\n        }\n        if (eventTypes !== undefined) {\n            requestContext.setQueryParam(\"event_types\", ObjectSerializer.serialize(eventTypes, \"Array<string>\", \"\"));\n        }\n        if (channels !== undefined) {\n            requestContext.setQueryParam(\"channels\", ObjectSerializer.serialize(channels, \"Array<string>\", \"\"));\n        }\n        if (after !== undefined) {\n            requestContext.setQueryParam(\"after\", ObjectSerializer.serialize(after, \"Date\", \"date-time\"));\n        }\n\n        // Header Params\n\n        // Form Params\n\n\n        // Body Params\n\n        let authMethod = null;\n        // Apply auth methods\n        authMethod = _config.authMethods[\"HTTPBearer\"]\n        if (authMethod) {\n            await authMethod.applySecurityAuthentication(requestContext);\n        }\n\n        return requestContext;\n    }\n\n}\n\nexport class EventsApiResponseProcessor {\n\n    /**\n     * Unwraps the actual response sent by the server from the response context and deserializes the response content\n     * to the expected objects\n     *\n     * @params response Response returned by the server for a request to v1Events\n     * @throws ApiException if the response code was not in [200, 299]\n     */\n     public async v1Events(response: ResponseContext): Promise<MessageEventsOut > {\n        const contentType = ObjectSerializer.normalizeMediaType(response.headers[\"content-type\"]);\n\n        if (isCodeInRange(\"200\", response.httpStatusCode)) {\n            const body: MessageEventsOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"MessageEventsOut\", \"\"\n            ) as MessageEventsOut;\n            return body;\n        }\n        if (isCodeInRange(\"400\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(400, body);\n        }\n        if (isCodeInRange(\"401\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(401, body);\n        }\n        if (isCodeInRange(\"403\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(403, body);\n        }\n        if (isCodeInRange(\"404\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(404, body);\n        }\n        if (isCodeInRange(\"409\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(409, body);\n        }\n        if (isCodeInRange(\"422\", response.httpStatusCode)) {\n            const body: HTTPValidationError = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HTTPValidationError\", \"\"\n            ) as HTTPValidationError;\n            throw new ApiException<HTTPValidationError>(422, body);\n        }\n        if (isCodeInRange(\"429\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(429, body);\n        }\n\n        // Work around for missing responses in specification, e.g. for petstore.yaml\n        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {\n            const body: MessageEventsOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"MessageEventsOut\", \"\"\n            ) as MessageEventsOut;\n            return body;\n        }\n\n        let body = await response.body.text();\n        throw new ApiException<string>(response.httpStatusCode, body);\n    }\n\n}\n"],"names":[],"mappings":"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"}},
    {"offset": {"line": 4518, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 4522, "column": 0}, "map": {"version":3,"sources":["turbopack://[project]/node_modules/svix/src/openapi/apis/HealthApi.ts"],"sourcesContent":["// TODO: better import syntax?\nimport { BaseAPIRequestFactory, RequiredError } from './baseapi';\nimport {Configuration} from '../configuration';\nimport { RequestContext, HttpMethod, ResponseContext, HttpFile} from '../http/http';\nimport {ObjectSerializer} from '../models/ObjectSerializer';\nimport {ApiException} from './exception';\nimport {isCodeInRange} from '../util';\n\nimport { HTTPValidationError } from '../models/HTTPValidationError';\nimport { HttpErrorOut } from '../models/HttpErrorOut';\n\n/**\n * no description\n */\nexport class HealthApiRequestFactory extends BaseAPIRequestFactory {\n\n    /**\n     * Verify the API server is up and running.\n     * Health\n     */\n    public async v1HealthGet(_options?: Configuration): Promise<RequestContext> {\n        let _config = _options || this.configuration;\n\n        // Path Params\n        const localVarPath = '/api/v1/health';\n\n        // Make Request Context\n        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.GET);\n        requestContext.setHeaderParam(\"Accept\", \"application/json, */*;q=0.8\")\n        const randomId = Math.floor(Math.random() * Math.pow(2, 32))\n        requestContext.setHeaderParam(\"svix-req-id\", randomId.toString())\n\n        // Query Params\n\n        // Header Params\n\n        // Form Params\n\n\n        // Body Params\n\n        // Apply auth methods\n\n        return requestContext;\n    }\n\n}\n\nexport class HealthApiResponseProcessor {\n\n    /**\n     * Unwraps the actual response sent by the server from the response context and deserializes the response content\n     * to the expected objects\n     *\n     * @params response Response returned by the server for a request to v1HealthGet\n     * @throws ApiException if the response code was not in [200, 299]\n     */\n     public async v1HealthGet(response: ResponseContext): Promise<void > {\n        const contentType = ObjectSerializer.normalizeMediaType(response.headers[\"content-type\"]);\n\n        if (isCodeInRange(\"204\", response.httpStatusCode)) {\n            return;\n        }\n        if (isCodeInRange(\"400\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(400, body);\n        }\n        if (isCodeInRange(\"401\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(401, body);\n        }\n        if (isCodeInRange(\"403\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(403, body);\n        }\n        if (isCodeInRange(\"404\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(404, body);\n        }\n        if (isCodeInRange(\"409\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(409, body);\n        }\n        if (isCodeInRange(\"422\", response.httpStatusCode)) {\n            const body: HTTPValidationError = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HTTPValidationError\", \"\"\n            ) as HTTPValidationError;\n            throw new ApiException<HTTPValidationError>(422, body);\n        }\n        if (isCodeInRange(\"429\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(429, body);\n        }\n\n        // Work around for missing responses in specification, e.g. for petstore.yaml\n        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {\n            const body: void = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"void\", \"\"\n            ) as void;\n            return body;\n        }\n\n        let body = await response.body.text();\n        throw new ApiException<string>(response.httpStatusCode, body);\n    }\n\n}\n"],"names":[],"mappings":"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"}},
    {"offset": {"line": 4618, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 4622, "column": 0}, "map": {"version":3,"sources":["turbopack://[project]/node_modules/svix/src/openapi/apis/InboundApi.ts"],"sourcesContent":["// TODO: better import syntax?\nimport { BaseAPIRequestFactory, RequiredError } from './baseapi';\nimport {Configuration} from '../configuration';\nimport { RequestContext, HttpMethod, ResponseContext, HttpFile} from '../http/http';\nimport {ObjectSerializer} from '../models/ObjectSerializer';\nimport {ApiException} from './exception';\nimport {isCodeInRange} from '../util';\n\nimport { HTTPValidationError } from '../models/HTTPValidationError';\nimport { HttpErrorOut } from '../models/HttpErrorOut';\nimport { MessageOut } from '../models/MessageOut';\nimport { RotatedUrlOut } from '../models/RotatedUrlOut';\n\n/**\n * no description\n */\nexport class InboundApiRequestFactory extends BaseAPIRequestFactory {\n\n    /**\n     * Handles a raw inbound webhook for the application.\n     * Handle Inbound\n     * @param appId The app&#39;s ID or UID\n     * @param inboundToken \n     * @param body \n     * @param eventType The event type&#39;s name\n     * @param idempotencyKey The request&#39;s idempotency key\n     */\n    public async v1InboundMsg(appId: string, inboundToken: string, body: string, eventType?: string, idempotencyKey?: string, _options?: Configuration): Promise<RequestContext> {\n        let _config = _options || this.configuration;\n\n        // verify required parameter 'appId' is not null or undefined\n        if (appId === null || appId === undefined) {\n            throw new RequiredError('Required parameter appId was null or undefined when calling v1InboundMsg.');\n        }\n\n\n        // verify required parameter 'inboundToken' is not null or undefined\n        if (inboundToken === null || inboundToken === undefined) {\n            throw new RequiredError('Required parameter inboundToken was null or undefined when calling v1InboundMsg.');\n        }\n\n\n        // verify required parameter 'body' is not null or undefined\n        if (body === null || body === undefined) {\n            throw new RequiredError('Required parameter body was null or undefined when calling v1InboundMsg.');\n        }\n\n\n\n\n        // Path Params\n        const localVarPath = '/api/v1/app/{app_id}/inbound/msg/{inbound_token}'\n            .replace('{' + 'app_id' + '}', encodeURIComponent(String(appId)))\n            .replace('{' + 'inbound_token' + '}', encodeURIComponent(String(inboundToken)));\n\n        // Make Request Context\n        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.POST);\n        requestContext.setHeaderParam(\"Accept\", \"application/json, */*;q=0.8\")\n        const randomId = Math.floor(Math.random() * Math.pow(2, 32))\n        requestContext.setHeaderParam(\"svix-req-id\", randomId.toString())\n\n        // Query Params\n        if (eventType !== undefined) {\n            requestContext.setQueryParam(\"event_type\", ObjectSerializer.serialize(eventType, \"string\", \"\"));\n        }\n\n        // Header Params\n        if (idempotencyKey !== undefined) {\n            requestContext.setHeaderParam(\"idempotency-key\", ObjectSerializer.serialize(idempotencyKey, \"string\", \"\"));\n        }\n\n        // Form Params\n\n\n        // Body Params\n        const contentType = ObjectSerializer.getPreferredMediaType([\n            \"application/json\"\n        ]);\n        requestContext.setHeaderParam(\"Content-Type\", contentType);\n        const serializedBody = ObjectSerializer.stringify(\n            ObjectSerializer.serialize(body, \"string\", \"\"),\n            contentType\n        );\n        requestContext.setBody(serializedBody);\n\n        let authMethod = null;\n        // Apply auth methods\n        authMethod = _config.authMethods[\"HTTPBearer\"]\n        if (authMethod) {\n            await authMethod.applySecurityAuthentication(requestContext);\n        }\n\n        return requestContext;\n    }\n\n    /**\n     * Invalidates the previous inbound url (if one exists), producing a new inbound URL for this app\n     * Rotate Url\n     * @param appId The app&#39;s ID or UID\n     * @param idempotencyKey The request&#39;s idempotency key\n     */\n    public async v1InboundRotateUrl(appId: string, idempotencyKey?: string, _options?: Configuration): Promise<RequestContext> {\n        let _config = _options || this.configuration;\n\n        // verify required parameter 'appId' is not null or undefined\n        if (appId === null || appId === undefined) {\n            throw new RequiredError('Required parameter appId was null or undefined when calling v1InboundRotateUrl.');\n        }\n\n\n\n        // Path Params\n        const localVarPath = '/api/v1/app/{app_id}/inbound/rotate-url'\n            .replace('{' + 'app_id' + '}', encodeURIComponent(String(appId)));\n\n        // Make Request Context\n        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.POST);\n        requestContext.setHeaderParam(\"Accept\", \"application/json, */*;q=0.8\")\n        const randomId = Math.floor(Math.random() * Math.pow(2, 32))\n        requestContext.setHeaderParam(\"svix-req-id\", randomId.toString())\n\n        // Query Params\n\n        // Header Params\n        if (idempotencyKey !== undefined) {\n            requestContext.setHeaderParam(\"idempotency-key\", ObjectSerializer.serialize(idempotencyKey, \"string\", \"\"));\n        }\n\n        // Form Params\n\n\n        // Body Params\n\n        let authMethod = null;\n        // Apply auth methods\n        authMethod = _config.authMethods[\"HTTPBearer\"]\n        if (authMethod) {\n            await authMethod.applySecurityAuthentication(requestContext);\n        }\n\n        return requestContext;\n    }\n\n}\n\nexport class InboundApiResponseProcessor {\n\n    /**\n     * Unwraps the actual response sent by the server from the response context and deserializes the response content\n     * to the expected objects\n     *\n     * @params response Response returned by the server for a request to v1InboundMsg\n     * @throws ApiException if the response code was not in [200, 299]\n     */\n     public async v1InboundMsg(response: ResponseContext): Promise<MessageOut > {\n        const contentType = ObjectSerializer.normalizeMediaType(response.headers[\"content-type\"]);\n\n        if (isCodeInRange(\"202\", response.httpStatusCode)) {\n            const body: MessageOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"MessageOut\", \"\"\n            ) as MessageOut;\n            return body;\n        }\n        if (isCodeInRange(\"400\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(400, body);\n        }\n        if (isCodeInRange(\"401\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(401, body);\n        }\n        if (isCodeInRange(\"403\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(403, body);\n        }\n        if (isCodeInRange(\"404\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(404, body);\n        }\n        if (isCodeInRange(\"409\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(409, body);\n        }\n        if (isCodeInRange(\"422\", response.httpStatusCode)) {\n            const body: HTTPValidationError = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HTTPValidationError\", \"\"\n            ) as HTTPValidationError;\n            throw new ApiException<HTTPValidationError>(422, body);\n        }\n        if (isCodeInRange(\"429\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(429, body);\n        }\n\n        // Work around for missing responses in specification, e.g. for petstore.yaml\n        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {\n            const body: MessageOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"MessageOut\", \"\"\n            ) as MessageOut;\n            return body;\n        }\n\n        let body = await response.body.text();\n        throw new ApiException<string>(response.httpStatusCode, body);\n    }\n\n    /**\n     * Unwraps the actual response sent by the server from the response context and deserializes the response content\n     * to the expected objects\n     *\n     * @params response Response returned by the server for a request to v1InboundRotateUrl\n     * @throws ApiException if the response code was not in [200, 299]\n     */\n     public async v1InboundRotateUrl(response: ResponseContext): Promise<RotatedUrlOut > {\n        const contentType = ObjectSerializer.normalizeMediaType(response.headers[\"content-type\"]);\n\n        if (isCodeInRange(\"200\", response.httpStatusCode)) {\n            const body: RotatedUrlOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"RotatedUrlOut\", \"\"\n            ) as RotatedUrlOut;\n            return body;\n        }\n        if (isCodeInRange(\"400\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(400, body);\n        }\n        if (isCodeInRange(\"401\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(401, body);\n        }\n        if (isCodeInRange(\"403\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(403, body);\n        }\n        if (isCodeInRange(\"404\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(404, body);\n        }\n        if (isCodeInRange(\"409\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(409, body);\n        }\n        if (isCodeInRange(\"422\", response.httpStatusCode)) {\n            const body: HTTPValidationError = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HTTPValidationError\", \"\"\n            ) as HTTPValidationError;\n            throw new ApiException<HTTPValidationError>(422, body);\n        }\n        if (isCodeInRange(\"429\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(429, body);\n        }\n\n        // Work around for missing responses in specification, e.g. for petstore.yaml\n        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {\n            const body: RotatedUrlOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"RotatedUrlOut\", \"\"\n            ) as RotatedUrlOut;\n            return body;\n        }\n\n        let body = await response.body.text();\n        throw new ApiException<string>(response.httpStatusCode, body);\n    }\n\n}\n"],"names":[],"mappings":"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"}},
    {"offset": {"line": 4810, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 4814, "column": 0}, "map": {"version":3,"sources":["turbopack://[project]/node_modules/svix/src/openapi/apis/IntegrationApi.ts"],"sourcesContent":["// TODO: better import syntax?\nimport { BaseAPIRequestFactory, RequiredError } from './baseapi';\nimport {Configuration} from '../configuration';\nimport { RequestContext, HttpMethod, ResponseContext, HttpFile} from '../http/http';\nimport {ObjectSerializer} from '../models/ObjectSerializer';\nimport {ApiException} from './exception';\nimport {isCodeInRange} from '../util';\n\nimport { HTTPValidationError } from '../models/HTTPValidationError';\nimport { HttpErrorOut } from '../models/HttpErrorOut';\nimport { IntegrationIn } from '../models/IntegrationIn';\nimport { IntegrationKeyOut } from '../models/IntegrationKeyOut';\nimport { IntegrationOut } from '../models/IntegrationOut';\nimport { IntegrationUpdate } from '../models/IntegrationUpdate';\nimport { ListResponseIntegrationOut } from '../models/ListResponseIntegrationOut';\nimport { Ordering } from '../models/Ordering';\n\n/**\n * no description\n */\nexport class IntegrationApiRequestFactory extends BaseAPIRequestFactory {\n\n    /**\n     * Create an integration.\n     * Create Integration\n     * @param appId The app&#39;s ID or UID\n     * @param integrationIn \n     * @param idempotencyKey The request&#39;s idempotency key\n     */\n    public async v1IntegrationCreate(appId: string, integrationIn: IntegrationIn, idempotencyKey?: string, _options?: Configuration): Promise<RequestContext> {\n        let _config = _options || this.configuration;\n\n        // verify required parameter 'appId' is not null or undefined\n        if (appId === null || appId === undefined) {\n            throw new RequiredError('Required parameter appId was null or undefined when calling v1IntegrationCreate.');\n        }\n\n\n        // verify required parameter 'integrationIn' is not null or undefined\n        if (integrationIn === null || integrationIn === undefined) {\n            throw new RequiredError('Required parameter integrationIn was null or undefined when calling v1IntegrationCreate.');\n        }\n\n\n\n        // Path Params\n        const localVarPath = '/api/v1/app/{app_id}/integration'\n            .replace('{' + 'app_id' + '}', encodeURIComponent(String(appId)));\n\n        // Make Request Context\n        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.POST);\n        requestContext.setHeaderParam(\"Accept\", \"application/json, */*;q=0.8\")\n        const randomId = Math.floor(Math.random() * Math.pow(2, 32))\n        requestContext.setHeaderParam(\"svix-req-id\", randomId.toString())\n\n        // Query Params\n\n        // Header Params\n        if (idempotencyKey !== undefined) {\n            requestContext.setHeaderParam(\"idempotency-key\", ObjectSerializer.serialize(idempotencyKey, \"string\", \"\"));\n        }\n\n        // Form Params\n\n\n        // Body Params\n        const contentType = ObjectSerializer.getPreferredMediaType([\n            \"application/json\"\n        ]);\n        requestContext.setHeaderParam(\"Content-Type\", contentType);\n        const serializedBody = ObjectSerializer.stringify(\n            ObjectSerializer.serialize(integrationIn, \"IntegrationIn\", \"\"),\n            contentType\n        );\n        requestContext.setBody(serializedBody);\n\n        let authMethod = null;\n        // Apply auth methods\n        authMethod = _config.authMethods[\"HTTPBearer\"]\n        if (authMethod) {\n            await authMethod.applySecurityAuthentication(requestContext);\n        }\n\n        return requestContext;\n    }\n\n    /**\n     * Delete an integration.\n     * Delete Integration\n     * @param appId The app&#39;s ID or UID\n     * @param integId The integ&#39;s ID\n     */\n    public async v1IntegrationDelete(appId: string, integId: string, _options?: Configuration): Promise<RequestContext> {\n        let _config = _options || this.configuration;\n\n        // verify required parameter 'appId' is not null or undefined\n        if (appId === null || appId === undefined) {\n            throw new RequiredError('Required parameter appId was null or undefined when calling v1IntegrationDelete.');\n        }\n\n\n        // verify required parameter 'integId' is not null or undefined\n        if (integId === null || integId === undefined) {\n            throw new RequiredError('Required parameter integId was null or undefined when calling v1IntegrationDelete.');\n        }\n\n\n        // Path Params\n        const localVarPath = '/api/v1/app/{app_id}/integration/{integ_id}'\n            .replace('{' + 'app_id' + '}', encodeURIComponent(String(appId)))\n            .replace('{' + 'integ_id' + '}', encodeURIComponent(String(integId)));\n\n        // Make Request Context\n        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.DELETE);\n        requestContext.setHeaderParam(\"Accept\", \"application/json, */*;q=0.8\")\n        const randomId = Math.floor(Math.random() * Math.pow(2, 32))\n        requestContext.setHeaderParam(\"svix-req-id\", randomId.toString())\n\n        // Query Params\n\n        // Header Params\n\n        // Form Params\n\n\n        // Body Params\n\n        let authMethod = null;\n        // Apply auth methods\n        authMethod = _config.authMethods[\"HTTPBearer\"]\n        if (authMethod) {\n            await authMethod.applySecurityAuthentication(requestContext);\n        }\n\n        return requestContext;\n    }\n\n    /**\n     * Get an integration.\n     * Get Integration\n     * @param appId The app&#39;s ID or UID\n     * @param integId The integ&#39;s ID\n     */\n    public async v1IntegrationGet(appId: string, integId: string, _options?: Configuration): Promise<RequestContext> {\n        let _config = _options || this.configuration;\n\n        // verify required parameter 'appId' is not null or undefined\n        if (appId === null || appId === undefined) {\n            throw new RequiredError('Required parameter appId was null or undefined when calling v1IntegrationGet.');\n        }\n\n\n        // verify required parameter 'integId' is not null or undefined\n        if (integId === null || integId === undefined) {\n            throw new RequiredError('Required parameter integId was null or undefined when calling v1IntegrationGet.');\n        }\n\n\n        // Path Params\n        const localVarPath = '/api/v1/app/{app_id}/integration/{integ_id}'\n            .replace('{' + 'app_id' + '}', encodeURIComponent(String(appId)))\n            .replace('{' + 'integ_id' + '}', encodeURIComponent(String(integId)));\n\n        // Make Request Context\n        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.GET);\n        requestContext.setHeaderParam(\"Accept\", \"application/json, */*;q=0.8\")\n        const randomId = Math.floor(Math.random() * Math.pow(2, 32))\n        requestContext.setHeaderParam(\"svix-req-id\", randomId.toString())\n\n        // Query Params\n\n        // Header Params\n\n        // Form Params\n\n\n        // Body Params\n\n        let authMethod = null;\n        // Apply auth methods\n        authMethod = _config.authMethods[\"HTTPBearer\"]\n        if (authMethod) {\n            await authMethod.applySecurityAuthentication(requestContext);\n        }\n\n        return requestContext;\n    }\n\n    /**\n     * Get an integration's key.\n     * Get Integration Key\n     * @param appId The app&#39;s ID or UID\n     * @param integId The integ&#39;s ID\n     */\n    public async v1IntegrationGetKey(appId: string, integId: string, _options?: Configuration): Promise<RequestContext> {\n        let _config = _options || this.configuration;\n\n        // verify required parameter 'appId' is not null or undefined\n        if (appId === null || appId === undefined) {\n            throw new RequiredError('Required parameter appId was null or undefined when calling v1IntegrationGetKey.');\n        }\n\n\n        // verify required parameter 'integId' is not null or undefined\n        if (integId === null || integId === undefined) {\n            throw new RequiredError('Required parameter integId was null or undefined when calling v1IntegrationGetKey.');\n        }\n\n\n        // Path Params\n        const localVarPath = '/api/v1/app/{app_id}/integration/{integ_id}/key'\n            .replace('{' + 'app_id' + '}', encodeURIComponent(String(appId)))\n            .replace('{' + 'integ_id' + '}', encodeURIComponent(String(integId)));\n\n        // Make Request Context\n        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.GET);\n        requestContext.setHeaderParam(\"Accept\", \"application/json, */*;q=0.8\")\n        const randomId = Math.floor(Math.random() * Math.pow(2, 32))\n        requestContext.setHeaderParam(\"svix-req-id\", randomId.toString())\n\n        // Query Params\n\n        // Header Params\n\n        // Form Params\n\n\n        // Body Params\n\n        let authMethod = null;\n        // Apply auth methods\n        authMethod = _config.authMethods[\"HTTPBearer\"]\n        if (authMethod) {\n            await authMethod.applySecurityAuthentication(requestContext);\n        }\n\n        return requestContext;\n    }\n\n    /**\n     * List the application's integrations.\n     * List Integrations\n     * @param appId The app&#39;s ID or UID\n     * @param limit Limit the number of returned items\n     * @param iterator The iterator returned from a prior invocation\n     * @param order The sorting order of the returned items\n     */\n    public async v1IntegrationList(appId: string, limit?: number, iterator?: string, order?: Ordering, _options?: Configuration): Promise<RequestContext> {\n        let _config = _options || this.configuration;\n\n        // verify required parameter 'appId' is not null or undefined\n        if (appId === null || appId === undefined) {\n            throw new RequiredError('Required parameter appId was null or undefined when calling v1IntegrationList.');\n        }\n\n\n\n\n\n        // Path Params\n        const localVarPath = '/api/v1/app/{app_id}/integration'\n            .replace('{' + 'app_id' + '}', encodeURIComponent(String(appId)));\n\n        // Make Request Context\n        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.GET);\n        requestContext.setHeaderParam(\"Accept\", \"application/json, */*;q=0.8\")\n        const randomId = Math.floor(Math.random() * Math.pow(2, 32))\n        requestContext.setHeaderParam(\"svix-req-id\", randomId.toString())\n\n        // Query Params\n        if (limit !== undefined) {\n            requestContext.setQueryParam(\"limit\", ObjectSerializer.serialize(limit, \"number\", \"uint64\"));\n        }\n        if (iterator !== undefined) {\n            requestContext.setQueryParam(\"iterator\", ObjectSerializer.serialize(iterator, \"string\", \"\"));\n        }\n        if (order !== undefined) {\n            requestContext.setQueryParam(\"order\", ObjectSerializer.serialize(order, \"Ordering\", \"\"));\n        }\n\n        // Header Params\n\n        // Form Params\n\n\n        // Body Params\n\n        let authMethod = null;\n        // Apply auth methods\n        authMethod = _config.authMethods[\"HTTPBearer\"]\n        if (authMethod) {\n            await authMethod.applySecurityAuthentication(requestContext);\n        }\n\n        return requestContext;\n    }\n\n    /**\n     * Rotate the integration's key. The previous key will be immediately revoked.\n     * Rotate Integration Key\n     * @param appId The app&#39;s ID or UID\n     * @param integId The integ&#39;s ID\n     * @param idempotencyKey The request&#39;s idempotency key\n     */\n    public async v1IntegrationRotateKey(appId: string, integId: string, idempotencyKey?: string, _options?: Configuration): Promise<RequestContext> {\n        let _config = _options || this.configuration;\n\n        // verify required parameter 'appId' is not null or undefined\n        if (appId === null || appId === undefined) {\n            throw new RequiredError('Required parameter appId was null or undefined when calling v1IntegrationRotateKey.');\n        }\n\n\n        // verify required parameter 'integId' is not null or undefined\n        if (integId === null || integId === undefined) {\n            throw new RequiredError('Required parameter integId was null or undefined when calling v1IntegrationRotateKey.');\n        }\n\n\n\n        // Path Params\n        const localVarPath = '/api/v1/app/{app_id}/integration/{integ_id}/key/rotate'\n            .replace('{' + 'app_id' + '}', encodeURIComponent(String(appId)))\n            .replace('{' + 'integ_id' + '}', encodeURIComponent(String(integId)));\n\n        // Make Request Context\n        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.POST);\n        requestContext.setHeaderParam(\"Accept\", \"application/json, */*;q=0.8\")\n        const randomId = Math.floor(Math.random() * Math.pow(2, 32))\n        requestContext.setHeaderParam(\"svix-req-id\", randomId.toString())\n\n        // Query Params\n\n        // Header Params\n        if (idempotencyKey !== undefined) {\n            requestContext.setHeaderParam(\"idempotency-key\", ObjectSerializer.serialize(idempotencyKey, \"string\", \"\"));\n        }\n\n        // Form Params\n\n\n        // Body Params\n\n        let authMethod = null;\n        // Apply auth methods\n        authMethod = _config.authMethods[\"HTTPBearer\"]\n        if (authMethod) {\n            await authMethod.applySecurityAuthentication(requestContext);\n        }\n\n        return requestContext;\n    }\n\n    /**\n     * Update an integration.\n     * Update Integration\n     * @param appId The app&#39;s ID or UID\n     * @param integId The integ&#39;s ID\n     * @param integrationUpdate \n     */\n    public async v1IntegrationUpdate(appId: string, integId: string, integrationUpdate: IntegrationUpdate, _options?: Configuration): Promise<RequestContext> {\n        let _config = _options || this.configuration;\n\n        // verify required parameter 'appId' is not null or undefined\n        if (appId === null || appId === undefined) {\n            throw new RequiredError('Required parameter appId was null or undefined when calling v1IntegrationUpdate.');\n        }\n\n\n        // verify required parameter 'integId' is not null or undefined\n        if (integId === null || integId === undefined) {\n            throw new RequiredError('Required parameter integId was null or undefined when calling v1IntegrationUpdate.');\n        }\n\n\n        // verify required parameter 'integrationUpdate' is not null or undefined\n        if (integrationUpdate === null || integrationUpdate === undefined) {\n            throw new RequiredError('Required parameter integrationUpdate was null or undefined when calling v1IntegrationUpdate.');\n        }\n\n\n        // Path Params\n        const localVarPath = '/api/v1/app/{app_id}/integration/{integ_id}'\n            .replace('{' + 'app_id' + '}', encodeURIComponent(String(appId)))\n            .replace('{' + 'integ_id' + '}', encodeURIComponent(String(integId)));\n\n        // Make Request Context\n        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.PUT);\n        requestContext.setHeaderParam(\"Accept\", \"application/json, */*;q=0.8\")\n        const randomId = Math.floor(Math.random() * Math.pow(2, 32))\n        requestContext.setHeaderParam(\"svix-req-id\", randomId.toString())\n\n        // Query Params\n\n        // Header Params\n\n        // Form Params\n\n\n        // Body Params\n        const contentType = ObjectSerializer.getPreferredMediaType([\n            \"application/json\"\n        ]);\n        requestContext.setHeaderParam(\"Content-Type\", contentType);\n        const serializedBody = ObjectSerializer.stringify(\n            ObjectSerializer.serialize(integrationUpdate, \"IntegrationUpdate\", \"\"),\n            contentType\n        );\n        requestContext.setBody(serializedBody);\n\n        let authMethod = null;\n        // Apply auth methods\n        authMethod = _config.authMethods[\"HTTPBearer\"]\n        if (authMethod) {\n            await authMethod.applySecurityAuthentication(requestContext);\n        }\n\n        return requestContext;\n    }\n\n}\n\nexport class IntegrationApiResponseProcessor {\n\n    /**\n     * Unwraps the actual response sent by the server from the response context and deserializes the response content\n     * to the expected objects\n     *\n     * @params response Response returned by the server for a request to v1IntegrationCreate\n     * @throws ApiException if the response code was not in [200, 299]\n     */\n     public async v1IntegrationCreate(response: ResponseContext): Promise<IntegrationOut > {\n        const contentType = ObjectSerializer.normalizeMediaType(response.headers[\"content-type\"]);\n\n        if (isCodeInRange(\"201\", response.httpStatusCode)) {\n            const body: IntegrationOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"IntegrationOut\", \"\"\n            ) as IntegrationOut;\n            return body;\n        }\n        if (isCodeInRange(\"400\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(400, body);\n        }\n        if (isCodeInRange(\"401\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(401, body);\n        }\n        if (isCodeInRange(\"403\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(403, body);\n        }\n        if (isCodeInRange(\"404\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(404, body);\n        }\n        if (isCodeInRange(\"409\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(409, body);\n        }\n        if (isCodeInRange(\"422\", response.httpStatusCode)) {\n            const body: HTTPValidationError = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HTTPValidationError\", \"\"\n            ) as HTTPValidationError;\n            throw new ApiException<HTTPValidationError>(422, body);\n        }\n        if (isCodeInRange(\"429\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(429, body);\n        }\n\n        // Work around for missing responses in specification, e.g. for petstore.yaml\n        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {\n            const body: IntegrationOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"IntegrationOut\", \"\"\n            ) as IntegrationOut;\n            return body;\n        }\n\n        let body = await response.body.text();\n        throw new ApiException<string>(response.httpStatusCode, body);\n    }\n\n    /**\n     * Unwraps the actual response sent by the server from the response context and deserializes the response content\n     * to the expected objects\n     *\n     * @params response Response returned by the server for a request to v1IntegrationDelete\n     * @throws ApiException if the response code was not in [200, 299]\n     */\n     public async v1IntegrationDelete(response: ResponseContext): Promise<void > {\n        const contentType = ObjectSerializer.normalizeMediaType(response.headers[\"content-type\"]);\n\n        if (isCodeInRange(\"204\", response.httpStatusCode)) {\n            return;\n        }\n        if (isCodeInRange(\"400\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(400, body);\n        }\n        if (isCodeInRange(\"401\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(401, body);\n        }\n        if (isCodeInRange(\"403\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(403, body);\n        }\n        if (isCodeInRange(\"404\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(404, body);\n        }\n        if (isCodeInRange(\"409\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(409, body);\n        }\n        if (isCodeInRange(\"422\", response.httpStatusCode)) {\n            const body: HTTPValidationError = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HTTPValidationError\", \"\"\n            ) as HTTPValidationError;\n            throw new ApiException<HTTPValidationError>(422, body);\n        }\n        if (isCodeInRange(\"429\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(429, body);\n        }\n\n        // Work around for missing responses in specification, e.g. for petstore.yaml\n        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {\n            const body: void = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"void\", \"\"\n            ) as void;\n            return body;\n        }\n\n        let body = await response.body.text();\n        throw new ApiException<string>(response.httpStatusCode, body);\n    }\n\n    /**\n     * Unwraps the actual response sent by the server from the response context and deserializes the response content\n     * to the expected objects\n     *\n     * @params response Response returned by the server for a request to v1IntegrationGet\n     * @throws ApiException if the response code was not in [200, 299]\n     */\n     public async v1IntegrationGet(response: ResponseContext): Promise<IntegrationOut > {\n        const contentType = ObjectSerializer.normalizeMediaType(response.headers[\"content-type\"]);\n\n        if (isCodeInRange(\"200\", response.httpStatusCode)) {\n            const body: IntegrationOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"IntegrationOut\", \"\"\n            ) as IntegrationOut;\n            return body;\n        }\n        if (isCodeInRange(\"400\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(400, body);\n        }\n        if (isCodeInRange(\"401\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(401, body);\n        }\n        if (isCodeInRange(\"403\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(403, body);\n        }\n        if (isCodeInRange(\"404\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(404, body);\n        }\n        if (isCodeInRange(\"409\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(409, body);\n        }\n        if (isCodeInRange(\"422\", response.httpStatusCode)) {\n            const body: HTTPValidationError = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HTTPValidationError\", \"\"\n            ) as HTTPValidationError;\n            throw new ApiException<HTTPValidationError>(422, body);\n        }\n        if (isCodeInRange(\"429\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(429, body);\n        }\n\n        // Work around for missing responses in specification, e.g. for petstore.yaml\n        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {\n            const body: IntegrationOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"IntegrationOut\", \"\"\n            ) as IntegrationOut;\n            return body;\n        }\n\n        let body = await response.body.text();\n        throw new ApiException<string>(response.httpStatusCode, body);\n    }\n\n    /**\n     * Unwraps the actual response sent by the server from the response context and deserializes the response content\n     * to the expected objects\n     *\n     * @params response Response returned by the server for a request to v1IntegrationGetKey\n     * @throws ApiException if the response code was not in [200, 299]\n     */\n     public async v1IntegrationGetKey(response: ResponseContext): Promise<IntegrationKeyOut > {\n        const contentType = ObjectSerializer.normalizeMediaType(response.headers[\"content-type\"]);\n\n        if (isCodeInRange(\"200\", response.httpStatusCode)) {\n            const body: IntegrationKeyOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"IntegrationKeyOut\", \"\"\n            ) as IntegrationKeyOut;\n            return body;\n        }\n        if (isCodeInRange(\"400\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(400, body);\n        }\n        if (isCodeInRange(\"401\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(401, body);\n        }\n        if (isCodeInRange(\"403\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(403, body);\n        }\n        if (isCodeInRange(\"404\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(404, body);\n        }\n        if (isCodeInRange(\"409\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(409, body);\n        }\n        if (isCodeInRange(\"422\", response.httpStatusCode)) {\n            const body: HTTPValidationError = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HTTPValidationError\", \"\"\n            ) as HTTPValidationError;\n            throw new ApiException<HTTPValidationError>(422, body);\n        }\n        if (isCodeInRange(\"429\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(429, body);\n        }\n\n        // Work around for missing responses in specification, e.g. for petstore.yaml\n        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {\n            const body: IntegrationKeyOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"IntegrationKeyOut\", \"\"\n            ) as IntegrationKeyOut;\n            return body;\n        }\n\n        let body = await response.body.text();\n        throw new ApiException<string>(response.httpStatusCode, body);\n    }\n\n    /**\n     * Unwraps the actual response sent by the server from the response context and deserializes the response content\n     * to the expected objects\n     *\n     * @params response Response returned by the server for a request to v1IntegrationList\n     * @throws ApiException if the response code was not in [200, 299]\n     */\n     public async v1IntegrationList(response: ResponseContext): Promise<ListResponseIntegrationOut > {\n        const contentType = ObjectSerializer.normalizeMediaType(response.headers[\"content-type\"]);\n\n        if (isCodeInRange(\"200\", response.httpStatusCode)) {\n            const body: ListResponseIntegrationOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"ListResponseIntegrationOut\", \"\"\n            ) as ListResponseIntegrationOut;\n            return body;\n        }\n        if (isCodeInRange(\"400\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(400, body);\n        }\n        if (isCodeInRange(\"401\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(401, body);\n        }\n        if (isCodeInRange(\"403\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(403, body);\n        }\n        if (isCodeInRange(\"404\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(404, body);\n        }\n        if (isCodeInRange(\"409\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(409, body);\n        }\n        if (isCodeInRange(\"422\", response.httpStatusCode)) {\n            const body: HTTPValidationError = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HTTPValidationError\", \"\"\n            ) as HTTPValidationError;\n            throw new ApiException<HTTPValidationError>(422, body);\n        }\n        if (isCodeInRange(\"429\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(429, body);\n        }\n\n        // Work around for missing responses in specification, e.g. for petstore.yaml\n        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {\n            const body: ListResponseIntegrationOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"ListResponseIntegrationOut\", \"\"\n            ) as ListResponseIntegrationOut;\n            return body;\n        }\n\n        let body = await response.body.text();\n        throw new ApiException<string>(response.httpStatusCode, body);\n    }\n\n    /**\n     * Unwraps the actual response sent by the server from the response context and deserializes the response content\n     * to the expected objects\n     *\n     * @params response Response returned by the server for a request to v1IntegrationRotateKey\n     * @throws ApiException if the response code was not in [200, 299]\n     */\n     public async v1IntegrationRotateKey(response: ResponseContext): Promise<IntegrationKeyOut > {\n        const contentType = ObjectSerializer.normalizeMediaType(response.headers[\"content-type\"]);\n\n        if (isCodeInRange(\"200\", response.httpStatusCode)) {\n            const body: IntegrationKeyOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"IntegrationKeyOut\", \"\"\n            ) as IntegrationKeyOut;\n            return body;\n        }\n        if (isCodeInRange(\"400\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(400, body);\n        }\n        if (isCodeInRange(\"401\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(401, body);\n        }\n        if (isCodeInRange(\"403\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(403, body);\n        }\n        if (isCodeInRange(\"404\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(404, body);\n        }\n        if (isCodeInRange(\"409\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(409, body);\n        }\n        if (isCodeInRange(\"422\", response.httpStatusCode)) {\n            const body: HTTPValidationError = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HTTPValidationError\", \"\"\n            ) as HTTPValidationError;\n            throw new ApiException<HTTPValidationError>(422, body);\n        }\n        if (isCodeInRange(\"429\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(429, body);\n        }\n\n        // Work around for missing responses in specification, e.g. for petstore.yaml\n        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {\n            const body: IntegrationKeyOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"IntegrationKeyOut\", \"\"\n            ) as IntegrationKeyOut;\n            return body;\n        }\n\n        let body = await response.body.text();\n        throw new ApiException<string>(response.httpStatusCode, body);\n    }\n\n    /**\n     * Unwraps the actual response sent by the server from the response context and deserializes the response content\n     * to the expected objects\n     *\n     * @params response Response returned by the server for a request to v1IntegrationUpdate\n     * @throws ApiException if the response code was not in [200, 299]\n     */\n     public async v1IntegrationUpdate(response: ResponseContext): Promise<IntegrationOut > {\n        const contentType = ObjectSerializer.normalizeMediaType(response.headers[\"content-type\"]);\n\n        if (isCodeInRange(\"200\", response.httpStatusCode)) {\n            const body: IntegrationOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"IntegrationOut\", \"\"\n            ) as IntegrationOut;\n            return body;\n        }\n        if (isCodeInRange(\"400\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(400, body);\n        }\n        if (isCodeInRange(\"401\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(401, body);\n        }\n        if (isCodeInRange(\"403\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(403, body);\n        }\n        if (isCodeInRange(\"404\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(404, body);\n        }\n        if (isCodeInRange(\"409\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(409, body);\n        }\n        if (isCodeInRange(\"422\", response.httpStatusCode)) {\n            const body: HTTPValidationError = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HTTPValidationError\", \"\"\n            ) as HTTPValidationError;\n            throw new ApiException<HTTPValidationError>(422, body);\n        }\n        if (isCodeInRange(\"429\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(429, body);\n        }\n\n        // Work around for missing responses in specification, e.g. for petstore.yaml\n        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {\n            const body: IntegrationOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"IntegrationOut\", \"\"\n            ) as IntegrationOut;\n            return body;\n        }\n\n        let body = await response.body.text();\n        throw new ApiException<string>(response.httpStatusCode, body);\n    }\n\n}\n"],"names":[],"mappings":"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"}},
    {"offset": {"line": 5338, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 5342, "column": 0}, "map": {"version":3,"sources":["turbopack://[project]/node_modules/svix/src/openapi/apis/MessageApi.ts"],"sourcesContent":["// TODO: better import syntax?\nimport { BaseAPIRequestFactory, RequiredError } from './baseapi';\nimport {Configuration} from '../configuration';\nimport { RequestContext, HttpMethod, ResponseContext, HttpFile} from '../http/http';\nimport {ObjectSerializer} from '../models/ObjectSerializer';\nimport {ApiException} from './exception';\nimport {isCodeInRange} from '../util';\n\nimport { HTTPValidationError } from '../models/HTTPValidationError';\nimport { HttpErrorOut } from '../models/HttpErrorOut';\nimport { ListResponseMessageOut } from '../models/ListResponseMessageOut';\nimport { MessageAttemptOut } from '../models/MessageAttemptOut';\nimport { MessageEventsOut } from '../models/MessageEventsOut';\nimport { MessageIn } from '../models/MessageIn';\nimport { MessageOut } from '../models/MessageOut';\nimport { MessageRawPayloadOut } from '../models/MessageRawPayloadOut';\nimport { MessageSubscriberAuthTokenOut } from '../models/MessageSubscriberAuthTokenOut';\n\n/**\n * no description\n */\nexport class MessageApiRequestFactory extends BaseAPIRequestFactory {\n\n    /**\n     * Creates and sends a message to the specified endpoint. The message attempt and response from the endpoint is returned. FIXME: use MessageIn for expediency, even though the `application` parameter is unused. Since this endpoint isn't publicly documented anyway, it should be fine\n     * Create Message Attempt For Endpoint\n     * @param appId The app&#39;s ID or UID\n     * @param endpointId The ep&#39;s ID or UID\n     * @param messageIn \n     * @param idempotencyKey The request&#39;s idempotency key\n     */\n    public async createMessageAttemptForEndpoint(appId: string, endpointId: string, messageIn: MessageIn, idempotencyKey?: string, _options?: Configuration): Promise<RequestContext> {\n        let _config = _options || this.configuration;\n\n        // verify required parameter 'appId' is not null or undefined\n        if (appId === null || appId === undefined) {\n            throw new RequiredError('Required parameter appId was null or undefined when calling createMessageAttemptForEndpoint.');\n        }\n\n\n        // verify required parameter 'endpointId' is not null or undefined\n        if (endpointId === null || endpointId === undefined) {\n            throw new RequiredError('Required parameter endpointId was null or undefined when calling createMessageAttemptForEndpoint.');\n        }\n\n\n        // verify required parameter 'messageIn' is not null or undefined\n        if (messageIn === null || messageIn === undefined) {\n            throw new RequiredError('Required parameter messageIn was null or undefined when calling createMessageAttemptForEndpoint.');\n        }\n\n\n\n        // Path Params\n        const localVarPath = '/api/v1/app/{app_id}/endpoint/{endpoint_id}/msg/test-attempt'\n            .replace('{' + 'app_id' + '}', encodeURIComponent(String(appId)))\n            .replace('{' + 'endpoint_id' + '}', encodeURIComponent(String(endpointId)));\n\n        // Make Request Context\n        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.POST);\n        requestContext.setHeaderParam(\"Accept\", \"application/json, */*;q=0.8\")\n        const randomId = Math.floor(Math.random() * Math.pow(2, 32))\n        requestContext.setHeaderParam(\"svix-req-id\", randomId.toString())\n\n        // Query Params\n\n        // Header Params\n        if (idempotencyKey !== undefined) {\n            requestContext.setHeaderParam(\"idempotency-key\", ObjectSerializer.serialize(idempotencyKey, \"string\", \"\"));\n        }\n\n        // Form Params\n\n\n        // Body Params\n        const contentType = ObjectSerializer.getPreferredMediaType([\n            \"application/json\"\n        ]);\n        requestContext.setHeaderParam(\"Content-Type\", contentType);\n        const serializedBody = ObjectSerializer.stringify(\n            ObjectSerializer.serialize(messageIn, \"MessageIn\", \"\"),\n            contentType\n        );\n        requestContext.setBody(serializedBody);\n\n        let authMethod = null;\n        // Apply auth methods\n        authMethod = _config.authMethods[\"HTTPBearer\"]\n        if (authMethod) {\n            await authMethod.applySecurityAuthentication(requestContext);\n        }\n\n        return requestContext;\n    }\n\n    /**\n     * Creates a new message and dispatches it to all of the application's endpoints.  The `eventId` is an optional custom unique ID. It's verified to be unique only up to a day, after that no verification will be made. If a message with the same `eventId` already exists for the application, a 409 conflict error will be returned.  The `eventType` indicates the type and schema of the event. All messages of a certain `eventType` are expected to have the same schema. Endpoints can choose to only listen to specific event types. Messages can also have `channels`, which similar to event types let endpoints filter by them. Unlike event types, messages can have multiple channels, and channels don't imply a specific message content or schema.  The `payload` property is the webhook's body (the actual webhook message). Svix supports payload sizes of up to ~350kb, though it's generally a good idea to keep webhook payloads small, probably no larger than 40kb.\n     * Create Message\n     * @param appId The app&#39;s ID or UID\n     * @param messageIn \n     * @param withContent When &#x60;true&#x60; message payloads are included in the response\n     * @param idempotencyKey The request&#39;s idempotency key\n     */\n    public async v1MessageCreate(appId: string, messageIn: MessageIn, withContent?: boolean, idempotencyKey?: string, _options?: Configuration): Promise<RequestContext> {\n        let _config = _options || this.configuration;\n\n        // verify required parameter 'appId' is not null or undefined\n        if (appId === null || appId === undefined) {\n            throw new RequiredError('Required parameter appId was null or undefined when calling v1MessageCreate.');\n        }\n\n\n        // verify required parameter 'messageIn' is not null or undefined\n        if (messageIn === null || messageIn === undefined) {\n            throw new RequiredError('Required parameter messageIn was null or undefined when calling v1MessageCreate.');\n        }\n\n\n\n\n        // Path Params\n        const localVarPath = '/api/v1/app/{app_id}/msg'\n            .replace('{' + 'app_id' + '}', encodeURIComponent(String(appId)));\n\n        // Make Request Context\n        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.POST);\n        requestContext.setHeaderParam(\"Accept\", \"application/json, */*;q=0.8\")\n        const randomId = Math.floor(Math.random() * Math.pow(2, 32))\n        requestContext.setHeaderParam(\"svix-req-id\", randomId.toString())\n\n        // Query Params\n        if (withContent !== undefined) {\n            requestContext.setQueryParam(\"with_content\", ObjectSerializer.serialize(withContent, \"boolean\", \"\"));\n        }\n\n        // Header Params\n        if (idempotencyKey !== undefined) {\n            requestContext.setHeaderParam(\"idempotency-key\", ObjectSerializer.serialize(idempotencyKey, \"string\", \"\"));\n        }\n\n        // Form Params\n\n\n        // Body Params\n        const contentType = ObjectSerializer.getPreferredMediaType([\n            \"application/json\"\n        ]);\n        requestContext.setHeaderParam(\"Content-Type\", contentType);\n        const serializedBody = ObjectSerializer.stringify(\n            ObjectSerializer.serialize(messageIn, \"MessageIn\", \"\"),\n            contentType\n        );\n        requestContext.setBody(serializedBody);\n\n        let authMethod = null;\n        // Apply auth methods\n        authMethod = _config.authMethods[\"HTTPBearer\"]\n        if (authMethod) {\n            await authMethod.applySecurityAuthentication(requestContext);\n        }\n\n        return requestContext;\n    }\n\n    /**\n     * Reads the stream of created messages for an application\n     * Message Events\n     * @param appId The app&#39;s ID or UID\n     * @param limit Limit the number of returned items\n     * @param iterator The iterator returned from a prior invocation\n     * @param eventTypes Filter response based on the event type\n     * @param channels Filter response based on the event type\n     * @param after \n     */\n    public async v1MessageEvents(appId: string, limit?: number, iterator?: string, eventTypes?: Array<string>, channels?: Array<string>, after?: Date, _options?: Configuration): Promise<RequestContext> {\n        let _config = _options || this.configuration;\n\n        // verify required parameter 'appId' is not null or undefined\n        if (appId === null || appId === undefined) {\n            throw new RequiredError('Required parameter appId was null or undefined when calling v1MessageEvents.');\n        }\n\n\n\n\n\n\n\n        // Path Params\n        const localVarPath = '/api/v1/app/{app_id}/events'\n            .replace('{' + 'app_id' + '}', encodeURIComponent(String(appId)));\n\n        // Make Request Context\n        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.GET);\n        requestContext.setHeaderParam(\"Accept\", \"application/json, */*;q=0.8\")\n        const randomId = Math.floor(Math.random() * Math.pow(2, 32))\n        requestContext.setHeaderParam(\"svix-req-id\", randomId.toString())\n\n        // Query Params\n        if (limit !== undefined) {\n            requestContext.setQueryParam(\"limit\", ObjectSerializer.serialize(limit, \"number\", \"uint64\"));\n        }\n        if (iterator !== undefined) {\n            requestContext.setQueryParam(\"iterator\", ObjectSerializer.serialize(iterator, \"string\", \"\"));\n        }\n        if (eventTypes !== undefined) {\n            requestContext.setQueryParam(\"event_types\", ObjectSerializer.serialize(eventTypes, \"Array<string>\", \"\"));\n        }\n        if (channels !== undefined) {\n            requestContext.setQueryParam(\"channels\", ObjectSerializer.serialize(channels, \"Array<string>\", \"\"));\n        }\n        if (after !== undefined) {\n            requestContext.setQueryParam(\"after\", ObjectSerializer.serialize(after, \"Date\", \"date-time\"));\n        }\n\n        // Header Params\n\n        // Form Params\n\n\n        // Body Params\n\n        let authMethod = null;\n        // Apply auth methods\n        authMethod = _config.authMethods[\"HTTPBearer\"]\n        if (authMethod) {\n            await authMethod.applySecurityAuthentication(requestContext);\n        }\n\n        return requestContext;\n    }\n\n    /**\n     * Reads the stream of created messages for an application, but using server-managed iterator tracking.\n     * Message Events Subscription\n     * @param appId The app&#39;s ID or UID\n     * @param subscriptionId The esub&#39;s ID or UID\n     * @param limit Limit the number of returned items\n     * @param iterator The iterator returned from a prior invocation\n     * @param eventTypes Filter response based on the event type\n     * @param channels Filter response based on the event type\n     * @param after \n     */\n    public async v1MessageEventsSubscription(appId: string, subscriptionId: string, limit?: number, iterator?: string, eventTypes?: Array<string>, channels?: Array<string>, after?: Date, _options?: Configuration): Promise<RequestContext> {\n        let _config = _options || this.configuration;\n\n        // verify required parameter 'appId' is not null or undefined\n        if (appId === null || appId === undefined) {\n            throw new RequiredError('Required parameter appId was null or undefined when calling v1MessageEventsSubscription.');\n        }\n\n\n        // verify required parameter 'subscriptionId' is not null or undefined\n        if (subscriptionId === null || subscriptionId === undefined) {\n            throw new RequiredError('Required parameter subscriptionId was null or undefined when calling v1MessageEventsSubscription.');\n        }\n\n\n\n\n\n\n\n        // Path Params\n        const localVarPath = '/api/v1/app/{app_id}/events/subscription/{subscription_id}'\n            .replace('{' + 'app_id' + '}', encodeURIComponent(String(appId)))\n            .replace('{' + 'subscription_id' + '}', encodeURIComponent(String(subscriptionId)));\n\n        // Make Request Context\n        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.GET);\n        requestContext.setHeaderParam(\"Accept\", \"application/json, */*;q=0.8\")\n        const randomId = Math.floor(Math.random() * Math.pow(2, 32))\n        requestContext.setHeaderParam(\"svix-req-id\", randomId.toString())\n\n        // Query Params\n        if (limit !== undefined) {\n            requestContext.setQueryParam(\"limit\", ObjectSerializer.serialize(limit, \"number\", \"uint64\"));\n        }\n        if (iterator !== undefined) {\n            requestContext.setQueryParam(\"iterator\", ObjectSerializer.serialize(iterator, \"string\", \"\"));\n        }\n        if (eventTypes !== undefined) {\n            requestContext.setQueryParam(\"event_types\", ObjectSerializer.serialize(eventTypes, \"Array<string>\", \"\"));\n        }\n        if (channels !== undefined) {\n            requestContext.setQueryParam(\"channels\", ObjectSerializer.serialize(channels, \"Array<string>\", \"\"));\n        }\n        if (after !== undefined) {\n            requestContext.setQueryParam(\"after\", ObjectSerializer.serialize(after, \"Date\", \"date-time\"));\n        }\n\n        // Header Params\n\n        // Form Params\n\n\n        // Body Params\n\n        let authMethod = null;\n        // Apply auth methods\n        authMethod = _config.authMethods[\"HTTPBearer\"]\n        if (authMethod) {\n            await authMethod.applySecurityAuthentication(requestContext);\n        }\n\n        return requestContext;\n    }\n\n    /**\n     * Creates an auth token that can be used with the `v1.message.events-subscription` endpoint\n     * Message Events Create Token\n     * @param appId The app&#39;s ID or UID\n     * @param subscriptionId The esub&#39;s ID or UID\n     * @param idempotencyKey The request&#39;s idempotency key\n     */\n    public async v1MessageEventsSubscriptionCreateToken(appId: string, subscriptionId: string, idempotencyKey?: string, _options?: Configuration): Promise<RequestContext> {\n        let _config = _options || this.configuration;\n\n        // verify required parameter 'appId' is not null or undefined\n        if (appId === null || appId === undefined) {\n            throw new RequiredError('Required parameter appId was null or undefined when calling v1MessageEventsSubscriptionCreateToken.');\n        }\n\n\n        // verify required parameter 'subscriptionId' is not null or undefined\n        if (subscriptionId === null || subscriptionId === undefined) {\n            throw new RequiredError('Required parameter subscriptionId was null or undefined when calling v1MessageEventsSubscriptionCreateToken.');\n        }\n\n\n\n        // Path Params\n        const localVarPath = '/api/v1/app/{app_id}/events/subscription/{subscription_id}/create-token'\n            .replace('{' + 'app_id' + '}', encodeURIComponent(String(appId)))\n            .replace('{' + 'subscription_id' + '}', encodeURIComponent(String(subscriptionId)));\n\n        // Make Request Context\n        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.POST);\n        requestContext.setHeaderParam(\"Accept\", \"application/json, */*;q=0.8\")\n        const randomId = Math.floor(Math.random() * Math.pow(2, 32))\n        requestContext.setHeaderParam(\"svix-req-id\", randomId.toString())\n\n        // Query Params\n\n        // Header Params\n        if (idempotencyKey !== undefined) {\n            requestContext.setHeaderParam(\"idempotency-key\", ObjectSerializer.serialize(idempotencyKey, \"string\", \"\"));\n        }\n\n        // Form Params\n\n\n        // Body Params\n\n        let authMethod = null;\n        // Apply auth methods\n        authMethod = _config.authMethods[\"HTTPBearer\"]\n        if (authMethod) {\n            await authMethod.applySecurityAuthentication(requestContext);\n        }\n\n        return requestContext;\n    }\n\n    /**\n     * Delete the given message's payload. Useful in cases when a message was accidentally sent with sensitive content.  The message can't be replayed or resent once its payload has been deleted or expired.\n     * Delete message payload\n     * @param appId The app&#39;s ID or UID\n     * @param msgId The msg&#39;s ID or UID\n     */\n    public async v1MessageExpungeContent(appId: string, msgId: string, _options?: Configuration): Promise<RequestContext> {\n        let _config = _options || this.configuration;\n\n        // verify required parameter 'appId' is not null or undefined\n        if (appId === null || appId === undefined) {\n            throw new RequiredError('Required parameter appId was null or undefined when calling v1MessageExpungeContent.');\n        }\n\n\n        // verify required parameter 'msgId' is not null or undefined\n        if (msgId === null || msgId === undefined) {\n            throw new RequiredError('Required parameter msgId was null or undefined when calling v1MessageExpungeContent.');\n        }\n\n\n        // Path Params\n        const localVarPath = '/api/v1/app/{app_id}/msg/{msg_id}/content'\n            .replace('{' + 'app_id' + '}', encodeURIComponent(String(appId)))\n            .replace('{' + 'msg_id' + '}', encodeURIComponent(String(msgId)));\n\n        // Make Request Context\n        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.DELETE);\n        requestContext.setHeaderParam(\"Accept\", \"application/json, */*;q=0.8\")\n        const randomId = Math.floor(Math.random() * Math.pow(2, 32))\n        requestContext.setHeaderParam(\"svix-req-id\", randomId.toString())\n\n        // Query Params\n\n        // Header Params\n\n        // Form Params\n\n\n        // Body Params\n\n        let authMethod = null;\n        // Apply auth methods\n        authMethod = _config.authMethods[\"HTTPBearer\"]\n        if (authMethod) {\n            await authMethod.applySecurityAuthentication(requestContext);\n        }\n\n        return requestContext;\n    }\n\n    /**\n     * Get a message by its ID or eventID.\n     * Get Message\n     * @param appId The app&#39;s ID or UID\n     * @param msgId The msg&#39;s ID or UID\n     * @param withContent When &#x60;true&#x60; message payloads are included in the response\n     */\n    public async v1MessageGet(appId: string, msgId: string, withContent?: boolean, _options?: Configuration): Promise<RequestContext> {\n        let _config = _options || this.configuration;\n\n        // verify required parameter 'appId' is not null or undefined\n        if (appId === null || appId === undefined) {\n            throw new RequiredError('Required parameter appId was null or undefined when calling v1MessageGet.');\n        }\n\n\n        // verify required parameter 'msgId' is not null or undefined\n        if (msgId === null || msgId === undefined) {\n            throw new RequiredError('Required parameter msgId was null or undefined when calling v1MessageGet.');\n        }\n\n\n\n        // Path Params\n        const localVarPath = '/api/v1/app/{app_id}/msg/{msg_id}'\n            .replace('{' + 'app_id' + '}', encodeURIComponent(String(appId)))\n            .replace('{' + 'msg_id' + '}', encodeURIComponent(String(msgId)));\n\n        // Make Request Context\n        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.GET);\n        requestContext.setHeaderParam(\"Accept\", \"application/json, */*;q=0.8\")\n        const randomId = Math.floor(Math.random() * Math.pow(2, 32))\n        requestContext.setHeaderParam(\"svix-req-id\", randomId.toString())\n\n        // Query Params\n        if (withContent !== undefined) {\n            requestContext.setQueryParam(\"with_content\", ObjectSerializer.serialize(withContent, \"boolean\", \"\"));\n        }\n\n        // Header Params\n\n        // Form Params\n\n\n        // Body Params\n\n        let authMethod = null;\n        // Apply auth methods\n        authMethod = _config.authMethods[\"HTTPBearer\"]\n        if (authMethod) {\n            await authMethod.applySecurityAuthentication(requestContext);\n        }\n\n        return requestContext;\n    }\n\n    /**\n     * Get a message raw payload by its ID or eventID.\n     * Get Raw Message Payload\n     * @param appId The app&#39;s ID or UID\n     * @param msgId The msg&#39;s ID or UID\n     */\n    public async v1MessageGetRawPayload(appId: string, msgId: string, _options?: Configuration): Promise<RequestContext> {\n        let _config = _options || this.configuration;\n\n        // verify required parameter 'appId' is not null or undefined\n        if (appId === null || appId === undefined) {\n            throw new RequiredError('Required parameter appId was null or undefined when calling v1MessageGetRawPayload.');\n        }\n\n\n        // verify required parameter 'msgId' is not null or undefined\n        if (msgId === null || msgId === undefined) {\n            throw new RequiredError('Required parameter msgId was null or undefined when calling v1MessageGetRawPayload.');\n        }\n\n\n        // Path Params\n        const localVarPath = '/api/v1/app/{app_id}/msg/{msg_id}/raw'\n            .replace('{' + 'app_id' + '}', encodeURIComponent(String(appId)))\n            .replace('{' + 'msg_id' + '}', encodeURIComponent(String(msgId)));\n\n        // Make Request Context\n        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.GET);\n        requestContext.setHeaderParam(\"Accept\", \"application/json, */*;q=0.8\")\n        const randomId = Math.floor(Math.random() * Math.pow(2, 32))\n        requestContext.setHeaderParam(\"svix-req-id\", randomId.toString())\n\n        // Query Params\n\n        // Header Params\n\n        // Form Params\n\n\n        // Body Params\n\n        let authMethod = null;\n        // Apply auth methods\n        authMethod = _config.authMethods[\"HTTPBearer\"]\n        if (authMethod) {\n            await authMethod.applySecurityAuthentication(requestContext);\n        }\n\n        return requestContext;\n    }\n\n    /**\n     * List all of the application's messages.  The `before` and `after` parameters let you filter all items created before or after a certain date. These can be used alongside an iterator to paginate over results within a certain window.  Note that by default this endpoint is limited to retrieving 90 days' worth of data relative to now or, if an iterator is provided, 90 days before/after the time indicated by the iterator ID. If you require data beyond those time ranges, you will need to explicitly set the `before` or `after` parameter as appropriate. \n     * List Messages\n     * @param appId The app&#39;s ID or UID\n     * @param limit Limit the number of returned items\n     * @param iterator The iterator returned from a prior invocation\n     * @param channel Filter response based on the channel\n     * @param before Only include items created before a certain date\n     * @param after Only include items created after a certain date\n     * @param withContent When &#x60;true&#x60; message payloads are included in the response\n     * @param tag Filter messages matching the provided tag\n     * @param eventTypes Filter response based on the event type\n     */\n    public async v1MessageList(appId: string, limit?: number, iterator?: string, channel?: string, before?: Date, after?: Date, withContent?: boolean, tag?: string, eventTypes?: Array<string>, _options?: Configuration): Promise<RequestContext> {\n        let _config = _options || this.configuration;\n\n        // verify required parameter 'appId' is not null or undefined\n        if (appId === null || appId === undefined) {\n            throw new RequiredError('Required parameter appId was null or undefined when calling v1MessageList.');\n        }\n\n\n\n\n\n\n\n\n\n\n        // Path Params\n        const localVarPath = '/api/v1/app/{app_id}/msg'\n            .replace('{' + 'app_id' + '}', encodeURIComponent(String(appId)));\n\n        // Make Request Context\n        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.GET);\n        requestContext.setHeaderParam(\"Accept\", \"application/json, */*;q=0.8\")\n        const randomId = Math.floor(Math.random() * Math.pow(2, 32))\n        requestContext.setHeaderParam(\"svix-req-id\", randomId.toString())\n\n        // Query Params\n        if (limit !== undefined) {\n            requestContext.setQueryParam(\"limit\", ObjectSerializer.serialize(limit, \"number\", \"uint64\"));\n        }\n        if (iterator !== undefined) {\n            requestContext.setQueryParam(\"iterator\", ObjectSerializer.serialize(iterator, \"string\", \"\"));\n        }\n        if (channel !== undefined) {\n            requestContext.setQueryParam(\"channel\", ObjectSerializer.serialize(channel, \"string\", \"\"));\n        }\n        if (before !== undefined) {\n            requestContext.setQueryParam(\"before\", ObjectSerializer.serialize(before, \"Date\", \"date-time\"));\n        }\n        if (after !== undefined) {\n            requestContext.setQueryParam(\"after\", ObjectSerializer.serialize(after, \"Date\", \"date-time\"));\n        }\n        if (withContent !== undefined) {\n            requestContext.setQueryParam(\"with_content\", ObjectSerializer.serialize(withContent, \"boolean\", \"\"));\n        }\n        if (tag !== undefined) {\n            requestContext.setQueryParam(\"tag\", ObjectSerializer.serialize(tag, \"string\", \"\"));\n        }\n        if (eventTypes !== undefined) {\n            requestContext.setQueryParam(\"event_types\", ObjectSerializer.serialize(eventTypes, \"Array<string>\", \"\"));\n        }\n\n        // Header Params\n\n        // Form Params\n\n\n        // Body Params\n\n        let authMethod = null;\n        // Apply auth methods\n        authMethod = _config.authMethods[\"HTTPBearer\"]\n        if (authMethod) {\n            await authMethod.applySecurityAuthentication(requestContext);\n        }\n\n        return requestContext;\n    }\n\n}\n\nexport class MessageApiResponseProcessor {\n\n    /**\n     * Unwraps the actual response sent by the server from the response context and deserializes the response content\n     * to the expected objects\n     *\n     * @params response Response returned by the server for a request to createMessageAttemptForEndpoint\n     * @throws ApiException if the response code was not in [200, 299]\n     */\n     public async createMessageAttemptForEndpoint(response: ResponseContext): Promise<MessageAttemptOut > {\n        const contentType = ObjectSerializer.normalizeMediaType(response.headers[\"content-type\"]);\n\n        if (isCodeInRange(\"201\", response.httpStatusCode)) {\n            const body: MessageAttemptOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"MessageAttemptOut\", \"\"\n            ) as MessageAttemptOut;\n            return body;\n        }\n        if (isCodeInRange(\"400\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(400, body);\n        }\n        if (isCodeInRange(\"401\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(401, body);\n        }\n        if (isCodeInRange(\"403\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(403, body);\n        }\n        if (isCodeInRange(\"404\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(404, body);\n        }\n        if (isCodeInRange(\"409\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(409, body);\n        }\n        if (isCodeInRange(\"422\", response.httpStatusCode)) {\n            const body: HTTPValidationError = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HTTPValidationError\", \"\"\n            ) as HTTPValidationError;\n            throw new ApiException<HTTPValidationError>(422, body);\n        }\n        if (isCodeInRange(\"429\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(429, body);\n        }\n\n        // Work around for missing responses in specification, e.g. for petstore.yaml\n        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {\n            const body: MessageAttemptOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"MessageAttemptOut\", \"\"\n            ) as MessageAttemptOut;\n            return body;\n        }\n\n        let body = await response.body.text();\n        throw new ApiException<string>(response.httpStatusCode, body);\n    }\n\n    /**\n     * Unwraps the actual response sent by the server from the response context and deserializes the response content\n     * to the expected objects\n     *\n     * @params response Response returned by the server for a request to v1MessageCreate\n     * @throws ApiException if the response code was not in [200, 299]\n     */\n     public async v1MessageCreate(response: ResponseContext): Promise<MessageOut > {\n        const contentType = ObjectSerializer.normalizeMediaType(response.headers[\"content-type\"]);\n\n        if (isCodeInRange(\"202\", response.httpStatusCode)) {\n            const body: MessageOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"MessageOut\", \"\"\n            ) as MessageOut;\n            return body;\n        }\n        if (isCodeInRange(\"400\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(400, body);\n        }\n        if (isCodeInRange(\"401\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(401, body);\n        }\n        if (isCodeInRange(\"403\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(403, body);\n        }\n        if (isCodeInRange(\"404\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(404, body);\n        }\n        if (isCodeInRange(\"409\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(409, body);\n        }\n        if (isCodeInRange(\"413\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(413, body);\n        }\n        if (isCodeInRange(\"422\", response.httpStatusCode)) {\n            const body: HTTPValidationError = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HTTPValidationError\", \"\"\n            ) as HTTPValidationError;\n            throw new ApiException<HTTPValidationError>(422, body);\n        }\n        if (isCodeInRange(\"429\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(429, body);\n        }\n\n        // Work around for missing responses in specification, e.g. for petstore.yaml\n        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {\n            const body: MessageOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"MessageOut\", \"\"\n            ) as MessageOut;\n            return body;\n        }\n\n        let body = await response.body.text();\n        throw new ApiException<string>(response.httpStatusCode, body);\n    }\n\n    /**\n     * Unwraps the actual response sent by the server from the response context and deserializes the response content\n     * to the expected objects\n     *\n     * @params response Response returned by the server for a request to v1MessageEvents\n     * @throws ApiException if the response code was not in [200, 299]\n     */\n     public async v1MessageEvents(response: ResponseContext): Promise<MessageEventsOut > {\n        const contentType = ObjectSerializer.normalizeMediaType(response.headers[\"content-type\"]);\n\n        if (isCodeInRange(\"200\", response.httpStatusCode)) {\n            const body: MessageEventsOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"MessageEventsOut\", \"\"\n            ) as MessageEventsOut;\n            return body;\n        }\n        if (isCodeInRange(\"400\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(400, body);\n        }\n        if (isCodeInRange(\"401\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(401, body);\n        }\n        if (isCodeInRange(\"403\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(403, body);\n        }\n        if (isCodeInRange(\"404\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(404, body);\n        }\n        if (isCodeInRange(\"409\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(409, body);\n        }\n        if (isCodeInRange(\"422\", response.httpStatusCode)) {\n            const body: HTTPValidationError = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HTTPValidationError\", \"\"\n            ) as HTTPValidationError;\n            throw new ApiException<HTTPValidationError>(422, body);\n        }\n        if (isCodeInRange(\"429\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(429, body);\n        }\n\n        // Work around for missing responses in specification, e.g. for petstore.yaml\n        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {\n            const body: MessageEventsOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"MessageEventsOut\", \"\"\n            ) as MessageEventsOut;\n            return body;\n        }\n\n        let body = await response.body.text();\n        throw new ApiException<string>(response.httpStatusCode, body);\n    }\n\n    /**\n     * Unwraps the actual response sent by the server from the response context and deserializes the response content\n     * to the expected objects\n     *\n     * @params response Response returned by the server for a request to v1MessageEventsSubscription\n     * @throws ApiException if the response code was not in [200, 299]\n     */\n     public async v1MessageEventsSubscription(response: ResponseContext): Promise<MessageEventsOut > {\n        const contentType = ObjectSerializer.normalizeMediaType(response.headers[\"content-type\"]);\n\n        if (isCodeInRange(\"200\", response.httpStatusCode)) {\n            const body: MessageEventsOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"MessageEventsOut\", \"\"\n            ) as MessageEventsOut;\n            return body;\n        }\n        if (isCodeInRange(\"400\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(400, body);\n        }\n        if (isCodeInRange(\"401\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(401, body);\n        }\n        if (isCodeInRange(\"403\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(403, body);\n        }\n        if (isCodeInRange(\"404\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(404, body);\n        }\n        if (isCodeInRange(\"409\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(409, body);\n        }\n        if (isCodeInRange(\"422\", response.httpStatusCode)) {\n            const body: HTTPValidationError = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HTTPValidationError\", \"\"\n            ) as HTTPValidationError;\n            throw new ApiException<HTTPValidationError>(422, body);\n        }\n        if (isCodeInRange(\"429\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(429, body);\n        }\n\n        // Work around for missing responses in specification, e.g. for petstore.yaml\n        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {\n            const body: MessageEventsOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"MessageEventsOut\", \"\"\n            ) as MessageEventsOut;\n            return body;\n        }\n\n        let body = await response.body.text();\n        throw new ApiException<string>(response.httpStatusCode, body);\n    }\n\n    /**\n     * Unwraps the actual response sent by the server from the response context and deserializes the response content\n     * to the expected objects\n     *\n     * @params response Response returned by the server for a request to v1MessageEventsSubscriptionCreateToken\n     * @throws ApiException if the response code was not in [200, 299]\n     */\n     public async v1MessageEventsSubscriptionCreateToken(response: ResponseContext): Promise<MessageSubscriberAuthTokenOut > {\n        const contentType = ObjectSerializer.normalizeMediaType(response.headers[\"content-type\"]);\n\n        if (isCodeInRange(\"200\", response.httpStatusCode)) {\n            const body: MessageSubscriberAuthTokenOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"MessageSubscriberAuthTokenOut\", \"\"\n            ) as MessageSubscriberAuthTokenOut;\n            return body;\n        }\n        if (isCodeInRange(\"400\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(400, body);\n        }\n        if (isCodeInRange(\"401\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(401, body);\n        }\n        if (isCodeInRange(\"403\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(403, body);\n        }\n        if (isCodeInRange(\"404\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(404, body);\n        }\n        if (isCodeInRange(\"409\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(409, body);\n        }\n        if (isCodeInRange(\"422\", response.httpStatusCode)) {\n            const body: HTTPValidationError = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HTTPValidationError\", \"\"\n            ) as HTTPValidationError;\n            throw new ApiException<HTTPValidationError>(422, body);\n        }\n        if (isCodeInRange(\"429\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(429, body);\n        }\n\n        // Work around for missing responses in specification, e.g. for petstore.yaml\n        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {\n            const body: MessageSubscriberAuthTokenOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"MessageSubscriberAuthTokenOut\", \"\"\n            ) as MessageSubscriberAuthTokenOut;\n            return body;\n        }\n\n        let body = await response.body.text();\n        throw new ApiException<string>(response.httpStatusCode, body);\n    }\n\n    /**\n     * Unwraps the actual response sent by the server from the response context and deserializes the response content\n     * to the expected objects\n     *\n     * @params response Response returned by the server for a request to v1MessageExpungeContent\n     * @throws ApiException if the response code was not in [200, 299]\n     */\n     public async v1MessageExpungeContent(response: ResponseContext): Promise<void > {\n        const contentType = ObjectSerializer.normalizeMediaType(response.headers[\"content-type\"]);\n\n        if (isCodeInRange(\"204\", response.httpStatusCode)) {\n            return;\n        }\n        if (isCodeInRange(\"400\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(400, body);\n        }\n        if (isCodeInRange(\"401\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(401, body);\n        }\n        if (isCodeInRange(\"403\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(403, body);\n        }\n        if (isCodeInRange(\"404\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(404, body);\n        }\n        if (isCodeInRange(\"409\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(409, body);\n        }\n        if (isCodeInRange(\"422\", response.httpStatusCode)) {\n            const body: HTTPValidationError = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HTTPValidationError\", \"\"\n            ) as HTTPValidationError;\n            throw new ApiException<HTTPValidationError>(422, body);\n        }\n        if (isCodeInRange(\"429\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(429, body);\n        }\n\n        // Work around for missing responses in specification, e.g. for petstore.yaml\n        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {\n            const body: void = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"void\", \"\"\n            ) as void;\n            return body;\n        }\n\n        let body = await response.body.text();\n        throw new ApiException<string>(response.httpStatusCode, body);\n    }\n\n    /**\n     * Unwraps the actual response sent by the server from the response context and deserializes the response content\n     * to the expected objects\n     *\n     * @params response Response returned by the server for a request to v1MessageGet\n     * @throws ApiException if the response code was not in [200, 299]\n     */\n     public async v1MessageGet(response: ResponseContext): Promise<MessageOut > {\n        const contentType = ObjectSerializer.normalizeMediaType(response.headers[\"content-type\"]);\n\n        if (isCodeInRange(\"200\", response.httpStatusCode)) {\n            const body: MessageOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"MessageOut\", \"\"\n            ) as MessageOut;\n            return body;\n        }\n        if (isCodeInRange(\"400\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(400, body);\n        }\n        if (isCodeInRange(\"401\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(401, body);\n        }\n        if (isCodeInRange(\"403\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(403, body);\n        }\n        if (isCodeInRange(\"404\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(404, body);\n        }\n        if (isCodeInRange(\"409\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(409, body);\n        }\n        if (isCodeInRange(\"422\", response.httpStatusCode)) {\n            const body: HTTPValidationError = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HTTPValidationError\", \"\"\n            ) as HTTPValidationError;\n            throw new ApiException<HTTPValidationError>(422, body);\n        }\n        if (isCodeInRange(\"429\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(429, body);\n        }\n\n        // Work around for missing responses in specification, e.g. for petstore.yaml\n        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {\n            const body: MessageOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"MessageOut\", \"\"\n            ) as MessageOut;\n            return body;\n        }\n\n        let body = await response.body.text();\n        throw new ApiException<string>(response.httpStatusCode, body);\n    }\n\n    /**\n     * Unwraps the actual response sent by the server from the response context and deserializes the response content\n     * to the expected objects\n     *\n     * @params response Response returned by the server for a request to v1MessageGetRawPayload\n     * @throws ApiException if the response code was not in [200, 299]\n     */\n     public async v1MessageGetRawPayload(response: ResponseContext): Promise<MessageRawPayloadOut > {\n        const contentType = ObjectSerializer.normalizeMediaType(response.headers[\"content-type\"]);\n\n        if (isCodeInRange(\"200\", response.httpStatusCode)) {\n            const body: MessageRawPayloadOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"MessageRawPayloadOut\", \"\"\n            ) as MessageRawPayloadOut;\n            return body;\n        }\n        if (isCodeInRange(\"400\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(400, body);\n        }\n        if (isCodeInRange(\"401\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(401, body);\n        }\n        if (isCodeInRange(\"403\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(403, body);\n        }\n        if (isCodeInRange(\"404\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(404, body);\n        }\n        if (isCodeInRange(\"409\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(409, body);\n        }\n        if (isCodeInRange(\"422\", response.httpStatusCode)) {\n            const body: HTTPValidationError = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HTTPValidationError\", \"\"\n            ) as HTTPValidationError;\n            throw new ApiException<HTTPValidationError>(422, body);\n        }\n        if (isCodeInRange(\"429\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(429, body);\n        }\n\n        // Work around for missing responses in specification, e.g. for petstore.yaml\n        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {\n            const body: MessageRawPayloadOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"MessageRawPayloadOut\", \"\"\n            ) as MessageRawPayloadOut;\n            return body;\n        }\n\n        let body = await response.body.text();\n        throw new ApiException<string>(response.httpStatusCode, body);\n    }\n\n    /**\n     * Unwraps the actual response sent by the server from the response context and deserializes the response content\n     * to the expected objects\n     *\n     * @params response Response returned by the server for a request to v1MessageList\n     * @throws ApiException if the response code was not in [200, 299]\n     */\n     public async v1MessageList(response: ResponseContext): Promise<ListResponseMessageOut > {\n        const contentType = ObjectSerializer.normalizeMediaType(response.headers[\"content-type\"]);\n\n        if (isCodeInRange(\"200\", response.httpStatusCode)) {\n            const body: ListResponseMessageOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"ListResponseMessageOut\", \"\"\n            ) as ListResponseMessageOut;\n            return body;\n        }\n        if (isCodeInRange(\"400\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(400, body);\n        }\n        if (isCodeInRange(\"401\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(401, body);\n        }\n        if (isCodeInRange(\"403\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(403, body);\n        }\n        if (isCodeInRange(\"404\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(404, body);\n        }\n        if (isCodeInRange(\"409\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(409, body);\n        }\n        if (isCodeInRange(\"422\", response.httpStatusCode)) {\n            const body: HTTPValidationError = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HTTPValidationError\", \"\"\n            ) as HTTPValidationError;\n            throw new ApiException<HTTPValidationError>(422, body);\n        }\n        if (isCodeInRange(\"429\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(429, body);\n        }\n\n        // Work around for missing responses in specification, e.g. for petstore.yaml\n        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {\n            const body: ListResponseMessageOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"ListResponseMessageOut\", \"\"\n            ) as ListResponseMessageOut;\n            return body;\n        }\n\n        let body = await response.body.text();\n        throw new ApiException<string>(response.httpStatusCode, body);\n    }\n\n}\n"],"names":[],"mappings":"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"}},
    {"offset": {"line": 6051, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 6055, "column": 0}, "map": {"version":3,"sources":["turbopack://[project]/node_modules/svix/src/openapi/apis/MessageAttemptApi.ts"],"sourcesContent":["// TODO: better import syntax?\nimport { BaseAPIRequestFactory, RequiredError } from './baseapi';\nimport {Configuration} from '../configuration';\nimport { RequestContext, HttpMethod, ResponseContext, HttpFile} from '../http/http';\nimport {ObjectSerializer} from '../models/ObjectSerializer';\nimport {ApiException} from './exception';\nimport {isCodeInRange} from '../util';\n\nimport { HTTPValidationError } from '../models/HTTPValidationError';\nimport { HttpErrorOut } from '../models/HttpErrorOut';\nimport { ListResponseEndpointMessageOut } from '../models/ListResponseEndpointMessageOut';\nimport { ListResponseMessageAttemptEndpointOut } from '../models/ListResponseMessageAttemptEndpointOut';\nimport { ListResponseMessageAttemptOut } from '../models/ListResponseMessageAttemptOut';\nimport { ListResponseMessageEndpointOut } from '../models/ListResponseMessageEndpointOut';\nimport { MessageAttemptHeadersOut } from '../models/MessageAttemptHeadersOut';\nimport { MessageAttemptOut } from '../models/MessageAttemptOut';\nimport { MessageStatus } from '../models/MessageStatus';\nimport { StatusCodeClass } from '../models/StatusCodeClass';\n\n/**\n * no description\n */\nexport class MessageAttemptApiRequestFactory extends BaseAPIRequestFactory {\n\n    /**\n     * Deletes the given attempt's response body. Useful when an endpoint accidentally returned sensitive content.\n     * Delete attempt response body\n     * @param appId The app&#39;s ID or UID\n     * @param msgId The msg&#39;s ID or UID\n     * @param attemptId The attempt&#39;s ID\n     */\n    public async v1MessageAttemptExpungeContent(appId: string, msgId: string, attemptId: string, _options?: Configuration): Promise<RequestContext> {\n        let _config = _options || this.configuration;\n\n        // verify required parameter 'appId' is not null or undefined\n        if (appId === null || appId === undefined) {\n            throw new RequiredError('Required parameter appId was null or undefined when calling v1MessageAttemptExpungeContent.');\n        }\n\n\n        // verify required parameter 'msgId' is not null or undefined\n        if (msgId === null || msgId === undefined) {\n            throw new RequiredError('Required parameter msgId was null or undefined when calling v1MessageAttemptExpungeContent.');\n        }\n\n\n        // verify required parameter 'attemptId' is not null or undefined\n        if (attemptId === null || attemptId === undefined) {\n            throw new RequiredError('Required parameter attemptId was null or undefined when calling v1MessageAttemptExpungeContent.');\n        }\n\n\n        // Path Params\n        const localVarPath = '/api/v1/app/{app_id}/msg/{msg_id}/attempt/{attempt_id}/content'\n            .replace('{' + 'app_id' + '}', encodeURIComponent(String(appId)))\n            .replace('{' + 'msg_id' + '}', encodeURIComponent(String(msgId)))\n            .replace('{' + 'attempt_id' + '}', encodeURIComponent(String(attemptId)));\n\n        // Make Request Context\n        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.DELETE);\n        requestContext.setHeaderParam(\"Accept\", \"application/json, */*;q=0.8\")\n        const randomId = Math.floor(Math.random() * Math.pow(2, 32))\n        requestContext.setHeaderParam(\"svix-req-id\", randomId.toString())\n\n        // Query Params\n\n        // Header Params\n\n        // Form Params\n\n\n        // Body Params\n\n        let authMethod = null;\n        // Apply auth methods\n        authMethod = _config.authMethods[\"HTTPBearer\"]\n        if (authMethod) {\n            await authMethod.applySecurityAuthentication(requestContext);\n        }\n\n        return requestContext;\n    }\n\n    /**\n     * `msg_id`: Use a message id or a message `eventId`\n     * Get Attempt\n     * @param appId The app&#39;s ID or UID\n     * @param msgId The msg&#39;s ID or UID\n     * @param attemptId The attempt&#39;s ID\n     */\n    public async v1MessageAttemptGet(appId: string, msgId: string, attemptId: string, _options?: Configuration): Promise<RequestContext> {\n        let _config = _options || this.configuration;\n\n        // verify required parameter 'appId' is not null or undefined\n        if (appId === null || appId === undefined) {\n            throw new RequiredError('Required parameter appId was null or undefined when calling v1MessageAttemptGet.');\n        }\n\n\n        // verify required parameter 'msgId' is not null or undefined\n        if (msgId === null || msgId === undefined) {\n            throw new RequiredError('Required parameter msgId was null or undefined when calling v1MessageAttemptGet.');\n        }\n\n\n        // verify required parameter 'attemptId' is not null or undefined\n        if (attemptId === null || attemptId === undefined) {\n            throw new RequiredError('Required parameter attemptId was null or undefined when calling v1MessageAttemptGet.');\n        }\n\n\n        // Path Params\n        const localVarPath = '/api/v1/app/{app_id}/msg/{msg_id}/attempt/{attempt_id}'\n            .replace('{' + 'app_id' + '}', encodeURIComponent(String(appId)))\n            .replace('{' + 'msg_id' + '}', encodeURIComponent(String(msgId)))\n            .replace('{' + 'attempt_id' + '}', encodeURIComponent(String(attemptId)));\n\n        // Make Request Context\n        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.GET);\n        requestContext.setHeaderParam(\"Accept\", \"application/json, */*;q=0.8\")\n        const randomId = Math.floor(Math.random() * Math.pow(2, 32))\n        requestContext.setHeaderParam(\"svix-req-id\", randomId.toString())\n\n        // Query Params\n\n        // Header Params\n\n        // Form Params\n\n\n        // Body Params\n\n        let authMethod = null;\n        // Apply auth methods\n        authMethod = _config.authMethods[\"HTTPBearer\"]\n        if (authMethod) {\n            await authMethod.applySecurityAuthentication(requestContext);\n        }\n\n        return requestContext;\n    }\n\n    /**\n     * Calculate and return headers used on a given message attempt\n     * Get Attempt Headers\n     * @param appId The app&#39;s ID or UID\n     * @param msgId The msg&#39;s ID or UID\n     * @param attemptId The attempt&#39;s ID\n     */\n    public async v1MessageAttemptGetHeaders(appId: string, msgId: string, attemptId: string, _options?: Configuration): Promise<RequestContext> {\n        let _config = _options || this.configuration;\n\n        // verify required parameter 'appId' is not null or undefined\n        if (appId === null || appId === undefined) {\n            throw new RequiredError('Required parameter appId was null or undefined when calling v1MessageAttemptGetHeaders.');\n        }\n\n\n        // verify required parameter 'msgId' is not null or undefined\n        if (msgId === null || msgId === undefined) {\n            throw new RequiredError('Required parameter msgId was null or undefined when calling v1MessageAttemptGetHeaders.');\n        }\n\n\n        // verify required parameter 'attemptId' is not null or undefined\n        if (attemptId === null || attemptId === undefined) {\n            throw new RequiredError('Required parameter attemptId was null or undefined when calling v1MessageAttemptGetHeaders.');\n        }\n\n\n        // Path Params\n        const localVarPath = '/api/v1/app/{app_id}/msg/{msg_id}/attempt/{attempt_id}/headers'\n            .replace('{' + 'app_id' + '}', encodeURIComponent(String(appId)))\n            .replace('{' + 'msg_id' + '}', encodeURIComponent(String(msgId)))\n            .replace('{' + 'attempt_id' + '}', encodeURIComponent(String(attemptId)));\n\n        // Make Request Context\n        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.GET);\n        requestContext.setHeaderParam(\"Accept\", \"application/json, */*;q=0.8\")\n        const randomId = Math.floor(Math.random() * Math.pow(2, 32))\n        requestContext.setHeaderParam(\"svix-req-id\", randomId.toString())\n\n        // Query Params\n\n        // Header Params\n\n        // Form Params\n\n\n        // Body Params\n\n        let authMethod = null;\n        // Apply auth methods\n        authMethod = _config.authMethods[\"HTTPBearer\"]\n        if (authMethod) {\n            await authMethod.applySecurityAuthentication(requestContext);\n        }\n\n        return requestContext;\n    }\n\n    /**\n     * List endpoints attempted by a given message. Additionally includes metadata about the latest message attempt. By default, endpoints are listed in ascending order by ID.\n     * List Attempted Destinations\n     * @param appId The app&#39;s ID or UID\n     * @param msgId The msg&#39;s ID or UID\n     * @param limit Limit the number of returned items\n     * @param iterator The iterator returned from a prior invocation\n     */\n    public async v1MessageAttemptListAttemptedDestinations(appId: string, msgId: string, limit?: number, iterator?: string, _options?: Configuration): Promise<RequestContext> {\n        let _config = _options || this.configuration;\n\n        // verify required parameter 'appId' is not null or undefined\n        if (appId === null || appId === undefined) {\n            throw new RequiredError('Required parameter appId was null or undefined when calling v1MessageAttemptListAttemptedDestinations.');\n        }\n\n\n        // verify required parameter 'msgId' is not null or undefined\n        if (msgId === null || msgId === undefined) {\n            throw new RequiredError('Required parameter msgId was null or undefined when calling v1MessageAttemptListAttemptedDestinations.');\n        }\n\n\n\n\n        // Path Params\n        const localVarPath = '/api/v1/app/{app_id}/msg/{msg_id}/endpoint'\n            .replace('{' + 'app_id' + '}', encodeURIComponent(String(appId)))\n            .replace('{' + 'msg_id' + '}', encodeURIComponent(String(msgId)));\n\n        // Make Request Context\n        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.GET);\n        requestContext.setHeaderParam(\"Accept\", \"application/json, */*;q=0.8\")\n        const randomId = Math.floor(Math.random() * Math.pow(2, 32))\n        requestContext.setHeaderParam(\"svix-req-id\", randomId.toString())\n\n        // Query Params\n        if (limit !== undefined) {\n            requestContext.setQueryParam(\"limit\", ObjectSerializer.serialize(limit, \"number\", \"uint64\"));\n        }\n        if (iterator !== undefined) {\n            requestContext.setQueryParam(\"iterator\", ObjectSerializer.serialize(iterator, \"string\", \"\"));\n        }\n\n        // Header Params\n\n        // Form Params\n\n\n        // Body Params\n\n        let authMethod = null;\n        // Apply auth methods\n        authMethod = _config.authMethods[\"HTTPBearer\"]\n        if (authMethod) {\n            await authMethod.applySecurityAuthentication(requestContext);\n        }\n\n        return requestContext;\n    }\n\n    /**\n     * List messages for a particular endpoint. Additionally includes metadata about the latest message attempt.  The `before` parameter lets you filter all items created before a certain date and is ignored if an iterator is passed.  Note that by default this endpoint is limited to retrieving 90 days' worth of data relative to now or, if an iterator is provided, 90 days before/after the time indicated by the iterator ID. If you require data beyond those time ranges, you will need to explicitly set the `before` or `after` parameter as appropriate. \n     * List Attempted Messages\n     * @param appId The app&#39;s ID or UID\n     * @param endpointId The ep&#39;s ID or UID\n     * @param limit Limit the number of returned items\n     * @param iterator The iterator returned from a prior invocation\n     * @param channel Filter response based on the channel\n     * @param tag Filter response based on the message tags\n     * @param status Filter response based on the delivery status\n     * @param before Only include items created before a certain date\n     * @param after Only include items created after a certain date\n     * @param withContent When &#x60;true&#x60; message payloads are included in the response\n     * @param eventTypes Filter response based on the event type\n     */\n    public async v1MessageAttemptListAttemptedMessages(appId: string, endpointId: string, limit?: number, iterator?: string, channel?: string, tag?: string, status?: MessageStatus, before?: Date, after?: Date, withContent?: boolean, eventTypes?: Array<string>, _options?: Configuration): Promise<RequestContext> {\n        let _config = _options || this.configuration;\n\n        // verify required parameter 'appId' is not null or undefined\n        if (appId === null || appId === undefined) {\n            throw new RequiredError('Required parameter appId was null or undefined when calling v1MessageAttemptListAttemptedMessages.');\n        }\n\n\n        // verify required parameter 'endpointId' is not null or undefined\n        if (endpointId === null || endpointId === undefined) {\n            throw new RequiredError('Required parameter endpointId was null or undefined when calling v1MessageAttemptListAttemptedMessages.');\n        }\n\n\n\n\n\n\n\n\n\n\n\n        // Path Params\n        const localVarPath = '/api/v1/app/{app_id}/endpoint/{endpoint_id}/msg'\n            .replace('{' + 'app_id' + '}', encodeURIComponent(String(appId)))\n            .replace('{' + 'endpoint_id' + '}', encodeURIComponent(String(endpointId)));\n\n        // Make Request Context\n        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.GET);\n        requestContext.setHeaderParam(\"Accept\", \"application/json, */*;q=0.8\")\n        const randomId = Math.floor(Math.random() * Math.pow(2, 32))\n        requestContext.setHeaderParam(\"svix-req-id\", randomId.toString())\n\n        // Query Params\n        if (limit !== undefined) {\n            requestContext.setQueryParam(\"limit\", ObjectSerializer.serialize(limit, \"number\", \"uint64\"));\n        }\n        if (iterator !== undefined) {\n            requestContext.setQueryParam(\"iterator\", ObjectSerializer.serialize(iterator, \"string\", \"\"));\n        }\n        if (channel !== undefined) {\n            requestContext.setQueryParam(\"channel\", ObjectSerializer.serialize(channel, \"string\", \"\"));\n        }\n        if (tag !== undefined) {\n            requestContext.setQueryParam(\"tag\", ObjectSerializer.serialize(tag, \"string\", \"\"));\n        }\n        if (status !== undefined) {\n            requestContext.setQueryParam(\"status\", ObjectSerializer.serialize(status, \"MessageStatus\", \"\"));\n        }\n        if (before !== undefined) {\n            requestContext.setQueryParam(\"before\", ObjectSerializer.serialize(before, \"Date\", \"date-time\"));\n        }\n        if (after !== undefined) {\n            requestContext.setQueryParam(\"after\", ObjectSerializer.serialize(after, \"Date\", \"date-time\"));\n        }\n        if (withContent !== undefined) {\n            requestContext.setQueryParam(\"with_content\", ObjectSerializer.serialize(withContent, \"boolean\", \"\"));\n        }\n        if (eventTypes !== undefined) {\n            requestContext.setQueryParam(\"event_types\", ObjectSerializer.serialize(eventTypes, \"Array<string>\", \"\"));\n        }\n\n        // Header Params\n\n        // Form Params\n\n\n        // Body Params\n\n        let authMethod = null;\n        // Apply auth methods\n        authMethod = _config.authMethods[\"HTTPBearer\"]\n        if (authMethod) {\n            await authMethod.applySecurityAuthentication(requestContext);\n        }\n\n        return requestContext;\n    }\n\n    /**\n     * List attempts by endpoint id  Note that by default this endpoint is limited to retrieving 90 days' worth of data relative to now or, if an iterator is provided, 90 days before/after the time indicated by the iterator ID. If you require data beyond those time ranges, you will need to explicitly set the `before` or `after` parameter as appropriate. \n     * List Attempts By Endpoint\n     * @param appId The app&#39;s ID or UID\n     * @param endpointId The ep&#39;s ID or UID\n     * @param limit Limit the number of returned items\n     * @param iterator The iterator returned from a prior invocation\n     * @param status Filter response based on the delivery status\n     * @param statusCodeClass Filter response based on the HTTP status code\n     * @param channel Filter response based on the channel\n     * @param tag Filter response based on the tag\n     * @param before Only include items created before a certain date\n     * @param after Only include items created after a certain date\n     * @param withContent When &#x60;true&#x60; attempt content is included in the response\n     * @param withMsg When &#x60;true&#x60;, the message information is included in the response\n     * @param eventTypes Filter response based on the event type\n     */\n    public async v1MessageAttemptListByEndpoint(appId: string, endpointId: string, limit?: number, iterator?: string, status?: MessageStatus, statusCodeClass?: StatusCodeClass, channel?: string, tag?: string, before?: Date, after?: Date, withContent?: boolean, withMsg?: boolean, eventTypes?: Array<string>, _options?: Configuration): Promise<RequestContext> {\n        let _config = _options || this.configuration;\n\n        // verify required parameter 'appId' is not null or undefined\n        if (appId === null || appId === undefined) {\n            throw new RequiredError('Required parameter appId was null or undefined when calling v1MessageAttemptListByEndpoint.');\n        }\n\n\n        // verify required parameter 'endpointId' is not null or undefined\n        if (endpointId === null || endpointId === undefined) {\n            throw new RequiredError('Required parameter endpointId was null or undefined when calling v1MessageAttemptListByEndpoint.');\n        }\n\n\n\n\n\n\n\n\n\n\n\n\n\n        // Path Params\n        const localVarPath = '/api/v1/app/{app_id}/attempt/endpoint/{endpoint_id}'\n            .replace('{' + 'app_id' + '}', encodeURIComponent(String(appId)))\n            .replace('{' + 'endpoint_id' + '}', encodeURIComponent(String(endpointId)));\n\n        // Make Request Context\n        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.GET);\n        requestContext.setHeaderParam(\"Accept\", \"application/json, */*;q=0.8\")\n        const randomId = Math.floor(Math.random() * Math.pow(2, 32))\n        requestContext.setHeaderParam(\"svix-req-id\", randomId.toString())\n\n        // Query Params\n        if (limit !== undefined) {\n            requestContext.setQueryParam(\"limit\", ObjectSerializer.serialize(limit, \"number\", \"uint64\"));\n        }\n        if (iterator !== undefined) {\n            requestContext.setQueryParam(\"iterator\", ObjectSerializer.serialize(iterator, \"string\", \"\"));\n        }\n        if (status !== undefined) {\n            requestContext.setQueryParam(\"status\", ObjectSerializer.serialize(status, \"MessageStatus\", \"\"));\n        }\n        if (statusCodeClass !== undefined) {\n            requestContext.setQueryParam(\"status_code_class\", ObjectSerializer.serialize(statusCodeClass, \"StatusCodeClass\", \"\"));\n        }\n        if (channel !== undefined) {\n            requestContext.setQueryParam(\"channel\", ObjectSerializer.serialize(channel, \"string\", \"\"));\n        }\n        if (tag !== undefined) {\n            requestContext.setQueryParam(\"tag\", ObjectSerializer.serialize(tag, \"string\", \"\"));\n        }\n        if (before !== undefined) {\n            requestContext.setQueryParam(\"before\", ObjectSerializer.serialize(before, \"Date\", \"date-time\"));\n        }\n        if (after !== undefined) {\n            requestContext.setQueryParam(\"after\", ObjectSerializer.serialize(after, \"Date\", \"date-time\"));\n        }\n        if (withContent !== undefined) {\n            requestContext.setQueryParam(\"with_content\", ObjectSerializer.serialize(withContent, \"boolean\", \"\"));\n        }\n        if (withMsg !== undefined) {\n            requestContext.setQueryParam(\"with_msg\", ObjectSerializer.serialize(withMsg, \"boolean\", \"\"));\n        }\n        if (eventTypes !== undefined) {\n            requestContext.setQueryParam(\"event_types\", ObjectSerializer.serialize(eventTypes, \"Array<string>\", \"\"));\n        }\n\n        // Header Params\n\n        // Form Params\n\n\n        // Body Params\n\n        let authMethod = null;\n        // Apply auth methods\n        authMethod = _config.authMethods[\"HTTPBearer\"]\n        if (authMethod) {\n            await authMethod.applySecurityAuthentication(requestContext);\n        }\n\n        return requestContext;\n    }\n\n    /**\n     * DEPRECATED: please use list_attempts with endpoint_id as a query parameter instead.  List the message attempts for a particular endpoint.  Returning the endpoint.  The `before` parameter lets you filter all items created before a certain date and is ignored if an iterator is passed.  Note that by default this endpoint is limited to retrieving 90 days' worth of data relative to now or, if an iterator is provided, 90 days before/after the time indicated by the iterator ID. If you require data beyond those time ranges, you will need to explicitly set the `before` or `after` parameter as appropriate. \n     * List Attempts For Endpoint\n     * @param appId The app&#39;s ID or UID\n     * @param msgId The msg&#39;s ID or UID\n     * @param endpointId The ep&#39;s ID or UID\n     * @param limit Limit the number of returned items\n     * @param iterator The iterator returned from a prior invocation\n     * @param channel Filter response based on the channel\n     * @param tag Filter response based on the tag\n     * @param status Filter response based on the delivery status\n     * @param before Only include items created before a certain date\n     * @param after Only include items created after a certain date\n     * @param eventTypes Filter response based on the event type\n     */\n    public async v1MessageAttemptListByEndpointDeprecated(appId: string, msgId: string, endpointId: string, limit?: number, iterator?: string, channel?: string, tag?: string, status?: MessageStatus, before?: Date, after?: Date, eventTypes?: Array<string>, _options?: Configuration): Promise<RequestContext> {\n        let _config = _options || this.configuration;\n\n        // verify required parameter 'appId' is not null or undefined\n        if (appId === null || appId === undefined) {\n            throw new RequiredError('Required parameter appId was null or undefined when calling v1MessageAttemptListByEndpointDeprecated.');\n        }\n\n\n        // verify required parameter 'msgId' is not null or undefined\n        if (msgId === null || msgId === undefined) {\n            throw new RequiredError('Required parameter msgId was null or undefined when calling v1MessageAttemptListByEndpointDeprecated.');\n        }\n\n\n        // verify required parameter 'endpointId' is not null or undefined\n        if (endpointId === null || endpointId === undefined) {\n            throw new RequiredError('Required parameter endpointId was null or undefined when calling v1MessageAttemptListByEndpointDeprecated.');\n        }\n\n\n\n\n\n\n\n\n\n\n        // Path Params\n        const localVarPath = '/api/v1/app/{app_id}/msg/{msg_id}/endpoint/{endpoint_id}/attempt'\n            .replace('{' + 'app_id' + '}', encodeURIComponent(String(appId)))\n            .replace('{' + 'msg_id' + '}', encodeURIComponent(String(msgId)))\n            .replace('{' + 'endpoint_id' + '}', encodeURIComponent(String(endpointId)));\n\n        // Make Request Context\n        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.GET);\n        requestContext.setHeaderParam(\"Accept\", \"application/json, */*;q=0.8\")\n        const randomId = Math.floor(Math.random() * Math.pow(2, 32))\n        requestContext.setHeaderParam(\"svix-req-id\", randomId.toString())\n\n        // Query Params\n        if (limit !== undefined) {\n            requestContext.setQueryParam(\"limit\", ObjectSerializer.serialize(limit, \"number\", \"uint64\"));\n        }\n        if (iterator !== undefined) {\n            requestContext.setQueryParam(\"iterator\", ObjectSerializer.serialize(iterator, \"string\", \"\"));\n        }\n        if (channel !== undefined) {\n            requestContext.setQueryParam(\"channel\", ObjectSerializer.serialize(channel, \"string\", \"\"));\n        }\n        if (tag !== undefined) {\n            requestContext.setQueryParam(\"tag\", ObjectSerializer.serialize(tag, \"string\", \"\"));\n        }\n        if (status !== undefined) {\n            requestContext.setQueryParam(\"status\", ObjectSerializer.serialize(status, \"MessageStatus\", \"\"));\n        }\n        if (before !== undefined) {\n            requestContext.setQueryParam(\"before\", ObjectSerializer.serialize(before, \"Date\", \"date-time\"));\n        }\n        if (after !== undefined) {\n            requestContext.setQueryParam(\"after\", ObjectSerializer.serialize(after, \"Date\", \"date-time\"));\n        }\n        if (eventTypes !== undefined) {\n            requestContext.setQueryParam(\"event_types\", ObjectSerializer.serialize(eventTypes, \"Array<string>\", \"\"));\n        }\n\n        // Header Params\n\n        // Form Params\n\n\n        // Body Params\n\n        let authMethod = null;\n        // Apply auth methods\n        authMethod = _config.authMethods[\"HTTPBearer\"]\n        if (authMethod) {\n            await authMethod.applySecurityAuthentication(requestContext);\n        }\n\n        return requestContext;\n    }\n\n    /**\n     * List attempts by message id  Note that by default this endpoint is limited to retrieving 90 days' worth of data relative to now or, if an iterator is provided, 90 days before/after the time indicated by the iterator ID. If you require data beyond those time ranges, you will need to explicitly set the `before` or `after` parameter as appropriate. \n     * List Attempts By Msg\n     * @param appId The app&#39;s ID or UID\n     * @param msgId The msg&#39;s ID or UID\n     * @param limit Limit the number of returned items\n     * @param iterator The iterator returned from a prior invocation\n     * @param status Filter response based on the delivery status\n     * @param statusCodeClass Filter response based on the HTTP status code\n     * @param channel Filter response based on the channel\n     * @param tag Filter response based on the tag\n     * @param endpointId Filter the attempts based on the attempted endpoint\n     * @param before Only include items created before a certain date\n     * @param after Only include items created after a certain date\n     * @param withContent When &#x60;true&#x60; attempt content is included in the response\n     * @param eventTypes Filter response based on the event type\n     */\n    public async v1MessageAttemptListByMsg(appId: string, msgId: string, limit?: number, iterator?: string, status?: MessageStatus, statusCodeClass?: StatusCodeClass, channel?: string, tag?: string, endpointId?: string, before?: Date, after?: Date, withContent?: boolean, eventTypes?: Array<string>, _options?: Configuration): Promise<RequestContext> {\n        let _config = _options || this.configuration;\n\n        // verify required parameter 'appId' is not null or undefined\n        if (appId === null || appId === undefined) {\n            throw new RequiredError('Required parameter appId was null or undefined when calling v1MessageAttemptListByMsg.');\n        }\n\n\n        // verify required parameter 'msgId' is not null or undefined\n        if (msgId === null || msgId === undefined) {\n            throw new RequiredError('Required parameter msgId was null or undefined when calling v1MessageAttemptListByMsg.');\n        }\n\n\n\n\n\n\n\n\n\n\n\n\n\n        // Path Params\n        const localVarPath = '/api/v1/app/{app_id}/attempt/msg/{msg_id}'\n            .replace('{' + 'app_id' + '}', encodeURIComponent(String(appId)))\n            .replace('{' + 'msg_id' + '}', encodeURIComponent(String(msgId)));\n\n        // Make Request Context\n        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.GET);\n        requestContext.setHeaderParam(\"Accept\", \"application/json, */*;q=0.8\")\n        const randomId = Math.floor(Math.random() * Math.pow(2, 32))\n        requestContext.setHeaderParam(\"svix-req-id\", randomId.toString())\n\n        // Query Params\n        if (limit !== undefined) {\n            requestContext.setQueryParam(\"limit\", ObjectSerializer.serialize(limit, \"number\", \"uint64\"));\n        }\n        if (iterator !== undefined) {\n            requestContext.setQueryParam(\"iterator\", ObjectSerializer.serialize(iterator, \"string\", \"\"));\n        }\n        if (status !== undefined) {\n            requestContext.setQueryParam(\"status\", ObjectSerializer.serialize(status, \"MessageStatus\", \"\"));\n        }\n        if (statusCodeClass !== undefined) {\n            requestContext.setQueryParam(\"status_code_class\", ObjectSerializer.serialize(statusCodeClass, \"StatusCodeClass\", \"\"));\n        }\n        if (channel !== undefined) {\n            requestContext.setQueryParam(\"channel\", ObjectSerializer.serialize(channel, \"string\", \"\"));\n        }\n        if (tag !== undefined) {\n            requestContext.setQueryParam(\"tag\", ObjectSerializer.serialize(tag, \"string\", \"\"));\n        }\n        if (endpointId !== undefined) {\n            requestContext.setQueryParam(\"endpoint_id\", ObjectSerializer.serialize(endpointId, \"string\", \"\"));\n        }\n        if (before !== undefined) {\n            requestContext.setQueryParam(\"before\", ObjectSerializer.serialize(before, \"Date\", \"date-time\"));\n        }\n        if (after !== undefined) {\n            requestContext.setQueryParam(\"after\", ObjectSerializer.serialize(after, \"Date\", \"date-time\"));\n        }\n        if (withContent !== undefined) {\n            requestContext.setQueryParam(\"with_content\", ObjectSerializer.serialize(withContent, \"boolean\", \"\"));\n        }\n        if (eventTypes !== undefined) {\n            requestContext.setQueryParam(\"event_types\", ObjectSerializer.serialize(eventTypes, \"Array<string>\", \"\"));\n        }\n\n        // Header Params\n\n        // Form Params\n\n\n        // Body Params\n\n        let authMethod = null;\n        // Apply auth methods\n        authMethod = _config.authMethods[\"HTTPBearer\"]\n        if (authMethod) {\n            await authMethod.applySecurityAuthentication(requestContext);\n        }\n\n        return requestContext;\n    }\n\n    /**\n     * Deprecated: Please use \\\"List Attempts by Endpoint\\\" and \\\"List Attempts by Msg\\\" instead.  Note that by default this endpoint is limited to retrieving 90 days' worth of data relative to now or, if an iterator is provided, 90 days before/after the time indicated by the iterator ID. If you require data beyond those time ranges, you will need to explicitly set the `before` or `after` parameter as appropriate.  `msg_id`: Use a message id or a message `eventId`\n     * List Attempts\n     * @param appId The app&#39;s ID or UID\n     * @param msgId The msg&#39;s ID or UID\n     * @param limit Limit the number of returned items\n     * @param iterator The iterator returned from a prior invocation\n     * @param endpointId Filter the attempts based on the attempted endpoint\n     * @param channel Filter response based on the channel\n     * @param tag Filter response based on the tag\n     * @param status Filter response based on the delivery status\n     * @param before Only include items created before a certain date\n     * @param after Only include items created after a certain date\n     * @param statusCodeClass Filter response based on the HTTP status code\n     * @param eventTypes Filter response based on the event type\n     */\n    public async v1MessageAttemptListByMsgDeprecated(appId: string, msgId: string, limit?: number, iterator?: string, endpointId?: string, channel?: string, tag?: string, status?: MessageStatus, before?: Date, after?: Date, statusCodeClass?: StatusCodeClass, eventTypes?: Array<string>, _options?: Configuration): Promise<RequestContext> {\n        let _config = _options || this.configuration;\n\n        // verify required parameter 'appId' is not null or undefined\n        if (appId === null || appId === undefined) {\n            throw new RequiredError('Required parameter appId was null or undefined when calling v1MessageAttemptListByMsgDeprecated.');\n        }\n\n\n        // verify required parameter 'msgId' is not null or undefined\n        if (msgId === null || msgId === undefined) {\n            throw new RequiredError('Required parameter msgId was null or undefined when calling v1MessageAttemptListByMsgDeprecated.');\n        }\n\n\n\n\n\n\n\n\n\n\n\n\n        // Path Params\n        const localVarPath = '/api/v1/app/{app_id}/msg/{msg_id}/attempt'\n            .replace('{' + 'app_id' + '}', encodeURIComponent(String(appId)))\n            .replace('{' + 'msg_id' + '}', encodeURIComponent(String(msgId)));\n\n        // Make Request Context\n        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.GET);\n        requestContext.setHeaderParam(\"Accept\", \"application/json, */*;q=0.8\")\n        const randomId = Math.floor(Math.random() * Math.pow(2, 32))\n        requestContext.setHeaderParam(\"svix-req-id\", randomId.toString())\n\n        // Query Params\n        if (limit !== undefined) {\n            requestContext.setQueryParam(\"limit\", ObjectSerializer.serialize(limit, \"number\", \"uint64\"));\n        }\n        if (iterator !== undefined) {\n            requestContext.setQueryParam(\"iterator\", ObjectSerializer.serialize(iterator, \"string\", \"\"));\n        }\n        if (endpointId !== undefined) {\n            requestContext.setQueryParam(\"endpoint_id\", ObjectSerializer.serialize(endpointId, \"string\", \"\"));\n        }\n        if (channel !== undefined) {\n            requestContext.setQueryParam(\"channel\", ObjectSerializer.serialize(channel, \"string\", \"\"));\n        }\n        if (tag !== undefined) {\n            requestContext.setQueryParam(\"tag\", ObjectSerializer.serialize(tag, \"string\", \"\"));\n        }\n        if (status !== undefined) {\n            requestContext.setQueryParam(\"status\", ObjectSerializer.serialize(status, \"MessageStatus\", \"\"));\n        }\n        if (before !== undefined) {\n            requestContext.setQueryParam(\"before\", ObjectSerializer.serialize(before, \"Date\", \"date-time\"));\n        }\n        if (after !== undefined) {\n            requestContext.setQueryParam(\"after\", ObjectSerializer.serialize(after, \"Date\", \"date-time\"));\n        }\n        if (statusCodeClass !== undefined) {\n            requestContext.setQueryParam(\"status_code_class\", ObjectSerializer.serialize(statusCodeClass, \"StatusCodeClass\", \"\"));\n        }\n        if (eventTypes !== undefined) {\n            requestContext.setQueryParam(\"event_types\", ObjectSerializer.serialize(eventTypes, \"Array<string>\", \"\"));\n        }\n\n        // Header Params\n\n        // Form Params\n\n\n        // Body Params\n\n        let authMethod = null;\n        // Apply auth methods\n        authMethod = _config.authMethods[\"HTTPBearer\"]\n        if (authMethod) {\n            await authMethod.applySecurityAuthentication(requestContext);\n        }\n\n        return requestContext;\n    }\n\n    /**\n     * Resend a message to the specified endpoint.\n     * Resend Webhook\n     * @param appId The app&#39;s ID or UID\n     * @param msgId The msg&#39;s ID or UID\n     * @param endpointId The ep&#39;s ID or UID\n     * @param idempotencyKey The request&#39;s idempotency key\n     */\n    public async v1MessageAttemptResend(appId: string, msgId: string, endpointId: string, idempotencyKey?: string, _options?: Configuration): Promise<RequestContext> {\n        let _config = _options || this.configuration;\n\n        // verify required parameter 'appId' is not null or undefined\n        if (appId === null || appId === undefined) {\n            throw new RequiredError('Required parameter appId was null or undefined when calling v1MessageAttemptResend.');\n        }\n\n\n        // verify required parameter 'msgId' is not null or undefined\n        if (msgId === null || msgId === undefined) {\n            throw new RequiredError('Required parameter msgId was null or undefined when calling v1MessageAttemptResend.');\n        }\n\n\n        // verify required parameter 'endpointId' is not null or undefined\n        if (endpointId === null || endpointId === undefined) {\n            throw new RequiredError('Required parameter endpointId was null or undefined when calling v1MessageAttemptResend.');\n        }\n\n\n\n        // Path Params\n        const localVarPath = '/api/v1/app/{app_id}/msg/{msg_id}/endpoint/{endpoint_id}/resend'\n            .replace('{' + 'app_id' + '}', encodeURIComponent(String(appId)))\n            .replace('{' + 'msg_id' + '}', encodeURIComponent(String(msgId)))\n            .replace('{' + 'endpoint_id' + '}', encodeURIComponent(String(endpointId)));\n\n        // Make Request Context\n        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.POST);\n        requestContext.setHeaderParam(\"Accept\", \"application/json, */*;q=0.8\")\n        const randomId = Math.floor(Math.random() * Math.pow(2, 32))\n        requestContext.setHeaderParam(\"svix-req-id\", randomId.toString())\n\n        // Query Params\n\n        // Header Params\n        if (idempotencyKey !== undefined) {\n            requestContext.setHeaderParam(\"idempotency-key\", ObjectSerializer.serialize(idempotencyKey, \"string\", \"\"));\n        }\n\n        // Form Params\n\n\n        // Body Params\n\n        let authMethod = null;\n        // Apply auth methods\n        authMethod = _config.authMethods[\"HTTPBearer\"]\n        if (authMethod) {\n            await authMethod.applySecurityAuthentication(requestContext);\n        }\n\n        return requestContext;\n    }\n\n}\n\nexport class MessageAttemptApiResponseProcessor {\n\n    /**\n     * Unwraps the actual response sent by the server from the response context and deserializes the response content\n     * to the expected objects\n     *\n     * @params response Response returned by the server for a request to v1MessageAttemptExpungeContent\n     * @throws ApiException if the response code was not in [200, 299]\n     */\n     public async v1MessageAttemptExpungeContent(response: ResponseContext): Promise<void > {\n        const contentType = ObjectSerializer.normalizeMediaType(response.headers[\"content-type\"]);\n\n        if (isCodeInRange(\"204\", response.httpStatusCode)) {\n            return;\n        }\n        if (isCodeInRange(\"400\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(400, body);\n        }\n        if (isCodeInRange(\"401\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(401, body);\n        }\n        if (isCodeInRange(\"403\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(403, body);\n        }\n        if (isCodeInRange(\"404\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(404, body);\n        }\n        if (isCodeInRange(\"409\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(409, body);\n        }\n        if (isCodeInRange(\"422\", response.httpStatusCode)) {\n            const body: HTTPValidationError = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HTTPValidationError\", \"\"\n            ) as HTTPValidationError;\n            throw new ApiException<HTTPValidationError>(422, body);\n        }\n        if (isCodeInRange(\"429\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(429, body);\n        }\n\n        // Work around for missing responses in specification, e.g. for petstore.yaml\n        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {\n            const body: void = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"void\", \"\"\n            ) as void;\n            return body;\n        }\n\n        let body = await response.body.text();\n        throw new ApiException<string>(response.httpStatusCode, body);\n    }\n\n    /**\n     * Unwraps the actual response sent by the server from the response context and deserializes the response content\n     * to the expected objects\n     *\n     * @params response Response returned by the server for a request to v1MessageAttemptGet\n     * @throws ApiException if the response code was not in [200, 299]\n     */\n     public async v1MessageAttemptGet(response: ResponseContext): Promise<MessageAttemptOut > {\n        const contentType = ObjectSerializer.normalizeMediaType(response.headers[\"content-type\"]);\n\n        if (isCodeInRange(\"200\", response.httpStatusCode)) {\n            const body: MessageAttemptOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"MessageAttemptOut\", \"\"\n            ) as MessageAttemptOut;\n            return body;\n        }\n        if (isCodeInRange(\"400\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(400, body);\n        }\n        if (isCodeInRange(\"401\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(401, body);\n        }\n        if (isCodeInRange(\"403\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(403, body);\n        }\n        if (isCodeInRange(\"404\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(404, body);\n        }\n        if (isCodeInRange(\"409\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(409, body);\n        }\n        if (isCodeInRange(\"422\", response.httpStatusCode)) {\n            const body: HTTPValidationError = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HTTPValidationError\", \"\"\n            ) as HTTPValidationError;\n            throw new ApiException<HTTPValidationError>(422, body);\n        }\n        if (isCodeInRange(\"429\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(429, body);\n        }\n\n        // Work around for missing responses in specification, e.g. for petstore.yaml\n        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {\n            const body: MessageAttemptOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"MessageAttemptOut\", \"\"\n            ) as MessageAttemptOut;\n            return body;\n        }\n\n        let body = await response.body.text();\n        throw new ApiException<string>(response.httpStatusCode, body);\n    }\n\n    /**\n     * Unwraps the actual response sent by the server from the response context and deserializes the response content\n     * to the expected objects\n     *\n     * @params response Response returned by the server for a request to v1MessageAttemptGetHeaders\n     * @throws ApiException if the response code was not in [200, 299]\n     */\n     public async v1MessageAttemptGetHeaders(response: ResponseContext): Promise<MessageAttemptHeadersOut > {\n        const contentType = ObjectSerializer.normalizeMediaType(response.headers[\"content-type\"]);\n\n        if (isCodeInRange(\"200\", response.httpStatusCode)) {\n            const body: MessageAttemptHeadersOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"MessageAttemptHeadersOut\", \"\"\n            ) as MessageAttemptHeadersOut;\n            return body;\n        }\n        if (isCodeInRange(\"400\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(400, body);\n        }\n        if (isCodeInRange(\"401\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(401, body);\n        }\n        if (isCodeInRange(\"403\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(403, body);\n        }\n        if (isCodeInRange(\"404\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(404, body);\n        }\n        if (isCodeInRange(\"409\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(409, body);\n        }\n        if (isCodeInRange(\"422\", response.httpStatusCode)) {\n            const body: HTTPValidationError = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HTTPValidationError\", \"\"\n            ) as HTTPValidationError;\n            throw new ApiException<HTTPValidationError>(422, body);\n        }\n        if (isCodeInRange(\"429\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(429, body);\n        }\n\n        // Work around for missing responses in specification, e.g. for petstore.yaml\n        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {\n            const body: MessageAttemptHeadersOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"MessageAttemptHeadersOut\", \"\"\n            ) as MessageAttemptHeadersOut;\n            return body;\n        }\n\n        let body = await response.body.text();\n        throw new ApiException<string>(response.httpStatusCode, body);\n    }\n\n    /**\n     * Unwraps the actual response sent by the server from the response context and deserializes the response content\n     * to the expected objects\n     *\n     * @params response Response returned by the server for a request to v1MessageAttemptListAttemptedDestinations\n     * @throws ApiException if the response code was not in [200, 299]\n     */\n     public async v1MessageAttemptListAttemptedDestinations(response: ResponseContext): Promise<ListResponseMessageEndpointOut > {\n        const contentType = ObjectSerializer.normalizeMediaType(response.headers[\"content-type\"]);\n\n        if (isCodeInRange(\"200\", response.httpStatusCode)) {\n            const body: ListResponseMessageEndpointOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"ListResponseMessageEndpointOut\", \"\"\n            ) as ListResponseMessageEndpointOut;\n            return body;\n        }\n        if (isCodeInRange(\"400\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(400, body);\n        }\n        if (isCodeInRange(\"401\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(401, body);\n        }\n        if (isCodeInRange(\"403\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(403, body);\n        }\n        if (isCodeInRange(\"404\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(404, body);\n        }\n        if (isCodeInRange(\"409\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(409, body);\n        }\n        if (isCodeInRange(\"422\", response.httpStatusCode)) {\n            const body: HTTPValidationError = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HTTPValidationError\", \"\"\n            ) as HTTPValidationError;\n            throw new ApiException<HTTPValidationError>(422, body);\n        }\n        if (isCodeInRange(\"429\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(429, body);\n        }\n\n        // Work around for missing responses in specification, e.g. for petstore.yaml\n        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {\n            const body: ListResponseMessageEndpointOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"ListResponseMessageEndpointOut\", \"\"\n            ) as ListResponseMessageEndpointOut;\n            return body;\n        }\n\n        let body = await response.body.text();\n        throw new ApiException<string>(response.httpStatusCode, body);\n    }\n\n    /**\n     * Unwraps the actual response sent by the server from the response context and deserializes the response content\n     * to the expected objects\n     *\n     * @params response Response returned by the server for a request to v1MessageAttemptListAttemptedMessages\n     * @throws ApiException if the response code was not in [200, 299]\n     */\n     public async v1MessageAttemptListAttemptedMessages(response: ResponseContext): Promise<ListResponseEndpointMessageOut > {\n        const contentType = ObjectSerializer.normalizeMediaType(response.headers[\"content-type\"]);\n\n        if (isCodeInRange(\"200\", response.httpStatusCode)) {\n            const body: ListResponseEndpointMessageOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"ListResponseEndpointMessageOut\", \"\"\n            ) as ListResponseEndpointMessageOut;\n            return body;\n        }\n        if (isCodeInRange(\"400\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(400, body);\n        }\n        if (isCodeInRange(\"401\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(401, body);\n        }\n        if (isCodeInRange(\"403\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(403, body);\n        }\n        if (isCodeInRange(\"404\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(404, body);\n        }\n        if (isCodeInRange(\"409\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(409, body);\n        }\n        if (isCodeInRange(\"422\", response.httpStatusCode)) {\n            const body: HTTPValidationError = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HTTPValidationError\", \"\"\n            ) as HTTPValidationError;\n            throw new ApiException<HTTPValidationError>(422, body);\n        }\n        if (isCodeInRange(\"429\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(429, body);\n        }\n\n        // Work around for missing responses in specification, e.g. for petstore.yaml\n        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {\n            const body: ListResponseEndpointMessageOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"ListResponseEndpointMessageOut\", \"\"\n            ) as ListResponseEndpointMessageOut;\n            return body;\n        }\n\n        let body = await response.body.text();\n        throw new ApiException<string>(response.httpStatusCode, body);\n    }\n\n    /**\n     * Unwraps the actual response sent by the server from the response context and deserializes the response content\n     * to the expected objects\n     *\n     * @params response Response returned by the server for a request to v1MessageAttemptListByEndpoint\n     * @throws ApiException if the response code was not in [200, 299]\n     */\n     public async v1MessageAttemptListByEndpoint(response: ResponseContext): Promise<ListResponseMessageAttemptOut > {\n        const contentType = ObjectSerializer.normalizeMediaType(response.headers[\"content-type\"]);\n\n        if (isCodeInRange(\"200\", response.httpStatusCode)) {\n            const body: ListResponseMessageAttemptOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"ListResponseMessageAttemptOut\", \"\"\n            ) as ListResponseMessageAttemptOut;\n            return body;\n        }\n        if (isCodeInRange(\"400\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(400, body);\n        }\n        if (isCodeInRange(\"401\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(401, body);\n        }\n        if (isCodeInRange(\"403\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(403, body);\n        }\n        if (isCodeInRange(\"404\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(404, body);\n        }\n        if (isCodeInRange(\"409\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(409, body);\n        }\n        if (isCodeInRange(\"422\", response.httpStatusCode)) {\n            const body: HTTPValidationError = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HTTPValidationError\", \"\"\n            ) as HTTPValidationError;\n            throw new ApiException<HTTPValidationError>(422, body);\n        }\n        if (isCodeInRange(\"429\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(429, body);\n        }\n\n        // Work around for missing responses in specification, e.g. for petstore.yaml\n        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {\n            const body: ListResponseMessageAttemptOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"ListResponseMessageAttemptOut\", \"\"\n            ) as ListResponseMessageAttemptOut;\n            return body;\n        }\n\n        let body = await response.body.text();\n        throw new ApiException<string>(response.httpStatusCode, body);\n    }\n\n    /**\n     * Unwraps the actual response sent by the server from the response context and deserializes the response content\n     * to the expected objects\n     *\n     * @params response Response returned by the server for a request to v1MessageAttemptListByEndpointDeprecated\n     * @throws ApiException if the response code was not in [200, 299]\n     */\n     public async v1MessageAttemptListByEndpointDeprecated(response: ResponseContext): Promise<ListResponseMessageAttemptEndpointOut > {\n        const contentType = ObjectSerializer.normalizeMediaType(response.headers[\"content-type\"]);\n\n        if (isCodeInRange(\"200\", response.httpStatusCode)) {\n            const body: ListResponseMessageAttemptEndpointOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"ListResponseMessageAttemptEndpointOut\", \"\"\n            ) as ListResponseMessageAttemptEndpointOut;\n            return body;\n        }\n        if (isCodeInRange(\"400\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(400, body);\n        }\n        if (isCodeInRange(\"401\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(401, body);\n        }\n        if (isCodeInRange(\"403\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(403, body);\n        }\n        if (isCodeInRange(\"404\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(404, body);\n        }\n        if (isCodeInRange(\"409\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(409, body);\n        }\n        if (isCodeInRange(\"422\", response.httpStatusCode)) {\n            const body: HTTPValidationError = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HTTPValidationError\", \"\"\n            ) as HTTPValidationError;\n            throw new ApiException<HTTPValidationError>(422, body);\n        }\n        if (isCodeInRange(\"429\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(429, body);\n        }\n\n        // Work around for missing responses in specification, e.g. for petstore.yaml\n        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {\n            const body: ListResponseMessageAttemptEndpointOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"ListResponseMessageAttemptEndpointOut\", \"\"\n            ) as ListResponseMessageAttemptEndpointOut;\n            return body;\n        }\n\n        let body = await response.body.text();\n        throw new ApiException<string>(response.httpStatusCode, body);\n    }\n\n    /**\n     * Unwraps the actual response sent by the server from the response context and deserializes the response content\n     * to the expected objects\n     *\n     * @params response Response returned by the server for a request to v1MessageAttemptListByMsg\n     * @throws ApiException if the response code was not in [200, 299]\n     */\n     public async v1MessageAttemptListByMsg(response: ResponseContext): Promise<ListResponseMessageAttemptOut > {\n        const contentType = ObjectSerializer.normalizeMediaType(response.headers[\"content-type\"]);\n\n        if (isCodeInRange(\"200\", response.httpStatusCode)) {\n            const body: ListResponseMessageAttemptOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"ListResponseMessageAttemptOut\", \"\"\n            ) as ListResponseMessageAttemptOut;\n            return body;\n        }\n        if (isCodeInRange(\"400\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(400, body);\n        }\n        if (isCodeInRange(\"401\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(401, body);\n        }\n        if (isCodeInRange(\"403\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(403, body);\n        }\n        if (isCodeInRange(\"404\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(404, body);\n        }\n        if (isCodeInRange(\"409\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(409, body);\n        }\n        if (isCodeInRange(\"422\", response.httpStatusCode)) {\n            const body: HTTPValidationError = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HTTPValidationError\", \"\"\n            ) as HTTPValidationError;\n            throw new ApiException<HTTPValidationError>(422, body);\n        }\n        if (isCodeInRange(\"429\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(429, body);\n        }\n\n        // Work around for missing responses in specification, e.g. for petstore.yaml\n        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {\n            const body: ListResponseMessageAttemptOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"ListResponseMessageAttemptOut\", \"\"\n            ) as ListResponseMessageAttemptOut;\n            return body;\n        }\n\n        let body = await response.body.text();\n        throw new ApiException<string>(response.httpStatusCode, body);\n    }\n\n    /**\n     * Unwraps the actual response sent by the server from the response context and deserializes the response content\n     * to the expected objects\n     *\n     * @params response Response returned by the server for a request to v1MessageAttemptListByMsgDeprecated\n     * @throws ApiException if the response code was not in [200, 299]\n     */\n     public async v1MessageAttemptListByMsgDeprecated(response: ResponseContext): Promise<ListResponseMessageAttemptOut > {\n        const contentType = ObjectSerializer.normalizeMediaType(response.headers[\"content-type\"]);\n\n        if (isCodeInRange(\"200\", response.httpStatusCode)) {\n            const body: ListResponseMessageAttemptOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"ListResponseMessageAttemptOut\", \"\"\n            ) as ListResponseMessageAttemptOut;\n            return body;\n        }\n        if (isCodeInRange(\"400\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(400, body);\n        }\n        if (isCodeInRange(\"401\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(401, body);\n        }\n        if (isCodeInRange(\"403\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(403, body);\n        }\n        if (isCodeInRange(\"404\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(404, body);\n        }\n        if (isCodeInRange(\"409\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(409, body);\n        }\n        if (isCodeInRange(\"422\", response.httpStatusCode)) {\n            const body: HTTPValidationError = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HTTPValidationError\", \"\"\n            ) as HTTPValidationError;\n            throw new ApiException<HTTPValidationError>(422, body);\n        }\n        if (isCodeInRange(\"429\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(429, body);\n        }\n\n        // Work around for missing responses in specification, e.g. for petstore.yaml\n        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {\n            const body: ListResponseMessageAttemptOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"ListResponseMessageAttemptOut\", \"\"\n            ) as ListResponseMessageAttemptOut;\n            return body;\n        }\n\n        let body = await response.body.text();\n        throw new ApiException<string>(response.httpStatusCode, body);\n    }\n\n    /**\n     * Unwraps the actual response sent by the server from the response context and deserializes the response content\n     * to the expected objects\n     *\n     * @params response Response returned by the server for a request to v1MessageAttemptResend\n     * @throws ApiException if the response code was not in [200, 299]\n     */\n     public async v1MessageAttemptResend(response: ResponseContext): Promise<void > {\n        const contentType = ObjectSerializer.normalizeMediaType(response.headers[\"content-type\"]);\n\n        if (isCodeInRange(\"202\", response.httpStatusCode)) {\n            return;\n        }\n        if (isCodeInRange(\"400\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(400, body);\n        }\n        if (isCodeInRange(\"401\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(401, body);\n        }\n        if (isCodeInRange(\"403\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(403, body);\n        }\n        if (isCodeInRange(\"404\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(404, body);\n        }\n        if (isCodeInRange(\"409\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(409, body);\n        }\n        if (isCodeInRange(\"422\", response.httpStatusCode)) {\n            const body: HTTPValidationError = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HTTPValidationError\", \"\"\n            ) as HTTPValidationError;\n            throw new ApiException<HTTPValidationError>(422, body);\n        }\n        if (isCodeInRange(\"429\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(429, body);\n        }\n\n        // Work around for missing responses in specification, e.g. for petstore.yaml\n        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {\n            const body: void = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"void\", \"\"\n            ) as void;\n            return body;\n        }\n\n        let body = await response.body.text();\n        throw new ApiException<string>(response.httpStatusCode, body);\n    }\n\n}\n"],"names":[],"mappings":"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"}},
    {"offset": {"line": 6917, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 6921, "column": 0}, "map": {"version":3,"sources":["turbopack://[project]/node_modules/svix/src/openapi/apis/SinkApi.ts"],"sourcesContent":["// TODO: better import syntax?\nimport { BaseAPIRequestFactory, RequiredError } from './baseapi';\nimport {Configuration} from '../configuration';\nimport { RequestContext, HttpMethod, ResponseContext, HttpFile} from '../http/http';\nimport {ObjectSerializer} from '../models/ObjectSerializer';\nimport {ApiException} from './exception';\nimport {isCodeInRange} from '../util';\n\nimport { CreateStreamIn } from '../models/CreateStreamIn';\nimport { EventStreamOut } from '../models/EventStreamOut';\nimport { HTTPValidationError } from '../models/HTTPValidationError';\nimport { HttpErrorOut } from '../models/HttpErrorOut';\n\n/**\n * no description\n */\nexport class SinkApiRequestFactory extends BaseAPIRequestFactory {\n\n    /**\n     * Creates streaming events.\n     * Append To Stream\n     * @param streamId \n     * @param createStreamIn \n     * @param idempotencyKey The request&#39;s idempotency key\n     */\n    public async v1StreamCreateEvents(streamId: string, createStreamIn: CreateStreamIn, idempotencyKey?: string, _options?: Configuration): Promise<RequestContext> {\n        let _config = _options || this.configuration;\n\n        // verify required parameter 'streamId' is not null or undefined\n        if (streamId === null || streamId === undefined) {\n            throw new RequiredError('Required parameter streamId was null or undefined when calling v1StreamCreateEvents.');\n        }\n\n\n        // verify required parameter 'createStreamIn' is not null or undefined\n        if (createStreamIn === null || createStreamIn === undefined) {\n            throw new RequiredError('Required parameter createStreamIn was null or undefined when calling v1StreamCreateEvents.');\n        }\n\n\n\n        // Path Params\n        const localVarPath = '/api/v1/stream/{stream_id}/events'\n            .replace('{' + 'stream_id' + '}', encodeURIComponent(String(streamId)));\n\n        // Make Request Context\n        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.POST);\n        requestContext.setHeaderParam(\"Accept\", \"application/json, */*;q=0.8\")\n        const randomId = Math.floor(Math.random() * Math.pow(2, 32))\n        requestContext.setHeaderParam(\"svix-req-id\", randomId.toString())\n\n        // Query Params\n\n        // Header Params\n        if (idempotencyKey !== undefined) {\n            requestContext.setHeaderParam(\"idempotency-key\", ObjectSerializer.serialize(idempotencyKey, \"string\", \"\"));\n        }\n\n        // Form Params\n\n\n        // Body Params\n        const contentType = ObjectSerializer.getPreferredMediaType([\n            \"application/json\"\n        ]);\n        requestContext.setHeaderParam(\"Content-Type\", contentType);\n        const serializedBody = ObjectSerializer.stringify(\n            ObjectSerializer.serialize(createStreamIn, \"CreateStreamIn\", \"\"),\n            contentType\n        );\n        requestContext.setBody(serializedBody);\n\n        let authMethod = null;\n        // Apply auth methods\n        authMethod = _config.authMethods[\"HTTPBearer\"]\n        if (authMethod) {\n            await authMethod.applySecurityAuthentication(requestContext);\n        }\n\n        return requestContext;\n    }\n\n    /**\n     * Iterate over a stream of events.\n     * Stream Events\n     * @param streamId \n     * @param limit Limit the number of returned items\n     * @param iterator The iterator returned from a prior invocation\n     * @param after \n     */\n    public async v1StreamEventsGet(streamId: string, limit?: number, iterator?: string, after?: Date, _options?: Configuration): Promise<RequestContext> {\n        let _config = _options || this.configuration;\n\n        // verify required parameter 'streamId' is not null or undefined\n        if (streamId === null || streamId === undefined) {\n            throw new RequiredError('Required parameter streamId was null or undefined when calling v1StreamEventsGet.');\n        }\n\n\n\n\n\n        // Path Params\n        const localVarPath = '/api/v1/stream/{stream_id}/events'\n            .replace('{' + 'stream_id' + '}', encodeURIComponent(String(streamId)));\n\n        // Make Request Context\n        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.GET);\n        requestContext.setHeaderParam(\"Accept\", \"application/json, */*;q=0.8\")\n        const randomId = Math.floor(Math.random() * Math.pow(2, 32))\n        requestContext.setHeaderParam(\"svix-req-id\", randomId.toString())\n\n        // Query Params\n        if (limit !== undefined) {\n            requestContext.setQueryParam(\"limit\", ObjectSerializer.serialize(limit, \"number\", \"uint64\"));\n        }\n        if (iterator !== undefined) {\n            requestContext.setQueryParam(\"iterator\", ObjectSerializer.serialize(iterator, \"string\", \"\"));\n        }\n        if (after !== undefined) {\n            requestContext.setQueryParam(\"after\", ObjectSerializer.serialize(after, \"Date\", \"date-time\"));\n        }\n\n        // Header Params\n\n        // Form Params\n\n\n        // Body Params\n\n        let authMethod = null;\n        // Apply auth methods\n        authMethod = _config.authMethods[\"HTTPBearer\"]\n        if (authMethod) {\n            await authMethod.applySecurityAuthentication(requestContext);\n        }\n\n        return requestContext;\n    }\n\n}\n\nexport class SinkApiResponseProcessor {\n\n    /**\n     * Unwraps the actual response sent by the server from the response context and deserializes the response content\n     * to the expected objects\n     *\n     * @params response Response returned by the server for a request to v1StreamCreateEvents\n     * @throws ApiException if the response code was not in [200, 299]\n     */\n     public async v1StreamCreateEvents(response: ResponseContext): Promise<any > {\n        const contentType = ObjectSerializer.normalizeMediaType(response.headers[\"content-type\"]);\n\n        if (isCodeInRange(\"202\", response.httpStatusCode)) {\n            const body: any = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"any\", \"\"\n            ) as any;\n            return body;\n        }\n        if (isCodeInRange(\"400\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(400, body);\n        }\n        if (isCodeInRange(\"401\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(401, body);\n        }\n        if (isCodeInRange(\"403\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(403, body);\n        }\n        if (isCodeInRange(\"404\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(404, body);\n        }\n        if (isCodeInRange(\"409\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(409, body);\n        }\n        if (isCodeInRange(\"422\", response.httpStatusCode)) {\n            const body: HTTPValidationError = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HTTPValidationError\", \"\"\n            ) as HTTPValidationError;\n            throw new ApiException<HTTPValidationError>(422, body);\n        }\n        if (isCodeInRange(\"429\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(429, body);\n        }\n\n        // Work around for missing responses in specification, e.g. for petstore.yaml\n        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {\n            const body: any = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"any\", \"\"\n            ) as any;\n            return body;\n        }\n\n        let body = await response.body.text();\n        throw new ApiException<string>(response.httpStatusCode, body);\n    }\n\n    /**\n     * Unwraps the actual response sent by the server from the response context and deserializes the response content\n     * to the expected objects\n     *\n     * @params response Response returned by the server for a request to v1StreamEventsGet\n     * @throws ApiException if the response code was not in [200, 299]\n     */\n     public async v1StreamEventsGet(response: ResponseContext): Promise<EventStreamOut > {\n        const contentType = ObjectSerializer.normalizeMediaType(response.headers[\"content-type\"]);\n\n        if (isCodeInRange(\"200\", response.httpStatusCode)) {\n            const body: EventStreamOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"EventStreamOut\", \"\"\n            ) as EventStreamOut;\n            return body;\n        }\n        if (isCodeInRange(\"400\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(400, body);\n        }\n        if (isCodeInRange(\"401\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(401, body);\n        }\n        if (isCodeInRange(\"403\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(403, body);\n        }\n        if (isCodeInRange(\"404\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(404, body);\n        }\n        if (isCodeInRange(\"409\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(409, body);\n        }\n        if (isCodeInRange(\"422\", response.httpStatusCode)) {\n            const body: HTTPValidationError = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HTTPValidationError\", \"\"\n            ) as HTTPValidationError;\n            throw new ApiException<HTTPValidationError>(422, body);\n        }\n        if (isCodeInRange(\"429\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(429, body);\n        }\n\n        // Work around for missing responses in specification, e.g. for petstore.yaml\n        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {\n            const body: EventStreamOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"EventStreamOut\", \"\"\n            ) as EventStreamOut;\n            return body;\n        }\n\n        let body = await response.body.text();\n        throw new ApiException<string>(response.httpStatusCode, body);\n    }\n\n}\n"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA,MAAA;AAEA,MAAA;AACA,MAAA;AACA,MAAA;AACA,MAAA;AAUA,MAAa,8BAA8B,UAAA,qBAAqB;IAS/C,qBAAqB,QAAgB,EAAE,cAA8B,EAAE,cAAuB,EAAE,QAAwB,EAAA;;YACjI,IAAI,UAAU,YAAY,IAAI,CAAC,aAAa;YAG5C,IAAI,aAAa,QAAQ,aAAa,WAAW;gBAC7C,MAAM,IAAI,UAAA,aAAa,CAAC;;YAK5B,IAAI,mBAAmB,QAAQ,mBAAmB,WAAW;gBACzD,MAAM,IAAI,UAAA,aAAa,CAAC;;YAM5B,MAAM,eAAe,oCAChB,OAAO,CAAC,MAAM,cAAc,KAAK,mBAAmB,OAAO;YAGhE,MAAM,iBAAiB,QAAQ,UAAU,CAAC,kBAAkB,CAAC,cAAc,OAAA,UAAU,CAAC,IAAI;YAC1F,eAAe,cAAc,CAAC,UAAU;YACxC,MAAM,WAAW,KAAK,KAAK,CAAC,KAAK,MAAM,KAAK,KAAK,GAAG,CAAC,GAAG;YACxD,eAAe,cAAc,CAAC,eAAe,SAAS,QAAQ;YAK9D,IAAI,mBAAmB,WAAW;gBAC9B,eAAe,cAAc,CAAC,mBAAmB,mBAAA,gBAAgB,CAAC,SAAS,CAAC,gBAAgB,UAAU;;YAO1G,MAAM,cAAc,mBAAA,gBAAgB,CAAC,qBAAqB,CAAC;gBACvD;aACH;YACD,eAAe,cAAc,CAAC,gBAAgB;YAC9C,MAAM,iBAAiB,mBAAA,gBAAgB,CAAC,SAAS,CAC7C,mBAAA,gBAAgB,CAAC,SAAS,CAAC,gBAAgB,kBAAkB,KAC7D;YAEJ,eAAe,OAAO,CAAC;YAEvB,IAAI,aAAa;YAEjB,aAAa,QAAQ,WAAW,CAAC,aAAa;YAC9C,IAAI,YAAY;gBACZ,MAAM,WAAW,2BAA2B,CAAC;;YAGjD,OAAO;QACX;;IAUa,kBAAkB,QAAgB,EAAE,KAAc,EAAE,QAAiB,EAAE,KAAY,EAAE,QAAwB,EAAA;;YACtH,IAAI,UAAU,YAAY,IAAI,CAAC,aAAa;YAG5C,IAAI,aAAa,QAAQ,aAAa,WAAW;gBAC7C,MAAM,IAAI,UAAA,aAAa,CAAC;;YAQ5B,MAAM,eAAe,oCAChB,OAAO,CAAC,MAAM,cAAc,KAAK,mBAAmB,OAAO;YAGhE,MAAM,iBAAiB,QAAQ,UAAU,CAAC,kBAAkB,CAAC,cAAc,OAAA,UAAU,CAAC,GAAG;YACzF,eAAe,cAAc,CAAC,UAAU;YACxC,MAAM,WAAW,KAAK,KAAK,CAAC,KAAK,MAAM,KAAK,KAAK,GAAG,CAAC,GAAG;YACxD,eAAe,cAAc,CAAC,eAAe,SAAS,QAAQ;YAG9D,IAAI,UAAU,WAAW;gBACrB,eAAe,aAAa,CAAC,SAAS,mBAAA,gBAAgB,CAAC,SAAS,CAAC,OAAO,UAAU;;YAEtF,IAAI,aAAa,WAAW;gBACxB,eAAe,aAAa,CAAC,YAAY,mBAAA,gBAAgB,CAAC,SAAS,CAAC,UAAU,UAAU;;YAE5F,IAAI,UAAU,WAAW;gBACrB,eAAe,aAAa,CAAC,SAAS,mBAAA,gBAAgB,CAAC,SAAS,CAAC,OAAO,QAAQ;;YAUpF,IAAI,aAAa;YAEjB,aAAa,QAAQ,WAAW,CAAC,aAAa;YAC9C,IAAI,YAAY;gBACZ,MAAM,WAAW,2BAA2B,CAAC;;YAGjD,OAAO;QACX;;;AA1HJ,QAAA,qBAAA,GAAA;AA8HA,MAAa;IASK,qBAAqB,QAAyB,EAAA;;YACxD,MAAM,cAAc,mBAAA,gBAAgB,CAAC,kBAAkB,CAAC,SAAS,OAAO,CAAC,eAAe;YAExF,IAAI,OAAA,aAAa,CAAC,OAAO,SAAS,cAAc,GAAG;gBAC/C,MAAM,OAAY,mBAAA,gBAAgB,CAAC,WAAW,CAC1C,mBAAA,gBAAgB,CAAC,KAAK,CAAC,CAAA,MAAM,SAAS,IAAI,CAAC,IAAI,EAAA,GAAI,cACnD,OAAO;gBAEX,OAAO;;YAEX,IAAI,OAAA,aAAa,CAAC,OAAO,SAAS,cAAc,GAAG;gBAC/C,MAAM,OAAqB,mBAAA,gBAAgB,CAAC,WAAW,CACnD,mBAAA,gBAAgB,CAAC,KAAK,CAAC,CAAA,MAAM,SAAS,IAAI,CAAC,IAAI,EAAA,GAAI,cACnD,gBAAgB;gBAEpB,MAAM,IAAI,YAAA,YAAY,CAAe,KAAK;;YAE9C,IAAI,OAAA,aAAa,CAAC,OAAO,SAAS,cAAc,GAAG;gBAC/C,MAAM,OAAqB,mBAAA,gBAAgB,CAAC,WAAW,CACnD,mBAAA,gBAAgB,CAAC,KAAK,CAAC,CAAA,MAAM,SAAS,IAAI,CAAC,IAAI,EAAA,GAAI,cACnD,gBAAgB;gBAEpB,MAAM,IAAI,YAAA,YAAY,CAAe,KAAK;;YAE9C,IAAI,OAAA,aAAa,CAAC,OAAO,SAAS,cAAc,GAAG;gBAC/C,MAAM,OAAqB,mBAAA,gBAAgB,CAAC,WAAW,CACnD,mBAAA,gBAAgB,CAAC,KAAK,CAAC,CAAA,MAAM,SAAS,IAAI,CAAC,IAAI,EAAA,GAAI,cACnD,gBAAgB;gBAEpB,MAAM,IAAI,YAAA,YAAY,CAAe,KAAK;;YAE9C,IAAI,OAAA,aAAa,CAAC,OAAO,SAAS,cAAc,GAAG;gBAC/C,MAAM,OAAqB,mBAAA,gBAAgB,CAAC,WAAW,CACnD,mBAAA,gBAAgB,CAAC,KAAK,CAAC,CAAA,MAAM,SAAS,IAAI,CAAC,IAAI,EAAA,GAAI,cACnD,gBAAgB;gBAEpB,MAAM,IAAI,YAAA,YAAY,CAAe,KAAK;;YAE9C,IAAI,OAAA,aAAa,CAAC,OAAO,SAAS,cAAc,GAAG;gBAC/C,MAAM,OAAqB,mBAAA,gBAAgB,CAAC,WAAW,CACnD,mBAAA,gBAAgB,CAAC,KAAK,CAAC,CAAA,MAAM,SAAS,IAAI,CAAC,IAAI,EAAA,GAAI,cACnD,gBAAgB;gBAEpB,MAAM,IAAI,YAAA,YAAY,CAAe,KAAK;;YAE9C,IAAI,OAAA,aAAa,CAAC,OAAO,SAAS,cAAc,GAAG;gBAC/C,MAAM,OAA4B,mBAAA,gBAAgB,CAAC,WAAW,CAC1D,mBAAA,gBAAgB,CAAC,KAAK,CAAC,CAAA,MAAM,SAAS,IAAI,CAAC,IAAI,EAAA,GAAI,cACnD,uBAAuB;gBAE3B,MAAM,IAAI,YAAA,YAAY,CAAsB,KAAK;;YAErD,IAAI,OAAA,aAAa,CAAC,OAAO,SAAS,cAAc,GAAG;gBAC/C,MAAM,OAAqB,mBAAA,gBAAgB,CAAC,WAAW,CACnD,mBAAA,gBAAgB,CAAC,KAAK,CAAC,CAAA,MAAM,SAAS,IAAI,CAAC,IAAI,EAAA,GAAI,cACnD,gBAAgB;gBAEpB,MAAM,IAAI,YAAA,YAAY,CAAe,KAAK;;YAI9C,IAAI,SAAS,cAAc,IAAI,OAAO,SAAS,cAAc,IAAI,KAAK;gBAClE,MAAM,OAAY,mBAAA,gBAAgB,CAAC,WAAW,CAC1C,mBAAA,gBAAgB,CAAC,KAAK,CAAC,CAAA,MAAM,SAAS,IAAI,CAAC,IAAI,EAAA,GAAI,cACnD,OAAO;gBAEX,OAAO;;YAGX,IAAI,OAAO,MAAM,SAAS,IAAI,CAAC,IAAI;YACnC,MAAM,IAAI,YAAA,YAAY,CAAS,SAAS,cAAc,EAAE;QAC5D;;IASc,kBAAkB,QAAyB,EAAA;;YACrD,MAAM,cAAc,mBAAA,gBAAgB,CAAC,kBAAkB,CAAC,SAAS,OAAO,CAAC,eAAe;YAExF,IAAI,OAAA,aAAa,CAAC,OAAO,SAAS,cAAc,GAAG;gBAC/C,MAAM,OAAuB,mBAAA,gBAAgB,CAAC,WAAW,CACrD,mBAAA,gBAAgB,CAAC,KAAK,CAAC,CAAA,MAAM,SAAS,IAAI,CAAC,IAAI,EAAA,GAAI,cACnD,kBAAkB;gBAEtB,OAAO;;YAEX,IAAI,OAAA,aAAa,CAAC,OAAO,SAAS,cAAc,GAAG;gBAC/C,MAAM,OAAqB,mBAAA,gBAAgB,CAAC,WAAW,CACnD,mBAAA,gBAAgB,CAAC,KAAK,CAAC,CAAA,MAAM,SAAS,IAAI,CAAC,IAAI,EAAA,GAAI,cACnD,gBAAgB;gBAEpB,MAAM,IAAI,YAAA,YAAY,CAAe,KAAK;;YAE9C,IAAI,OAAA,aAAa,CAAC,OAAO,SAAS,cAAc,GAAG;gBAC/C,MAAM,OAAqB,mBAAA,gBAAgB,CAAC,WAAW,CACnD,mBAAA,gBAAgB,CAAC,KAAK,CAAC,CAAA,MAAM,SAAS,IAAI,CAAC,IAAI,EAAA,GAAI,cACnD,gBAAgB;gBAEpB,MAAM,IAAI,YAAA,YAAY,CAAe,KAAK;;YAE9C,IAAI,OAAA,aAAa,CAAC,OAAO,SAAS,cAAc,GAAG;gBAC/C,MAAM,OAAqB,mBAAA,gBAAgB,CAAC,WAAW,CACnD,mBAAA,gBAAgB,CAAC,KAAK,CAAC,CAAA,MAAM,SAAS,IAAI,CAAC,IAAI,EAAA,GAAI,cACnD,gBAAgB;gBAEpB,MAAM,IAAI,YAAA,YAAY,CAAe,KAAK;;YAE9C,IAAI,OAAA,aAAa,CAAC,OAAO,SAAS,cAAc,GAAG;gBAC/C,MAAM,OAAqB,mBAAA,gBAAgB,CAAC,WAAW,CACnD,mBAAA,gBAAgB,CAAC,KAAK,CAAC,CAAA,MAAM,SAAS,IAAI,CAAC,IAAI,EAAA,GAAI,cACnD,gBAAgB;gBAEpB,MAAM,IAAI,YAAA,YAAY,CAAe,KAAK;;YAE9C,IAAI,OAAA,aAAa,CAAC,OAAO,SAAS,cAAc,GAAG;gBAC/C,MAAM,OAAqB,mBAAA,gBAAgB,CAAC,WAAW,CACnD,mBAAA,gBAAgB,CAAC,KAAK,CAAC,CAAA,MAAM,SAAS,IAAI,CAAC,IAAI,EAAA,GAAI,cACnD,gBAAgB;gBAEpB,MAAM,IAAI,YAAA,YAAY,CAAe,KAAK;;YAE9C,IAAI,OAAA,aAAa,CAAC,OAAO,SAAS,cAAc,GAAG;gBAC/C,MAAM,OAA4B,mBAAA,gBAAgB,CAAC,WAAW,CAC1D,mBAAA,gBAAgB,CAAC,KAAK,CAAC,CAAA,MAAM,SAAS,IAAI,CAAC,IAAI,EAAA,GAAI,cACnD,uBAAuB;gBAE3B,MAAM,IAAI,YAAA,YAAY,CAAsB,KAAK;;YAErD,IAAI,OAAA,aAAa,CAAC,OAAO,SAAS,cAAc,GAAG;gBAC/C,MAAM,OAAqB,mBAAA,gBAAgB,CAAC,WAAW,CACnD,mBAAA,gBAAgB,CAAC,KAAK,CAAC,CAAA,MAAM,SAAS,IAAI,CAAC,IAAI,EAAA,GAAI,cACnD,gBAAgB;gBAEpB,MAAM,IAAI,YAAA,YAAY,CAAe,KAAK;;YAI9C,IAAI,SAAS,cAAc,IAAI,OAAO,SAAS,cAAc,IAAI,KAAK;gBAClE,MAAM,OAAuB,mBAAA,gBAAgB,CAAC,WAAW,CACrD,mBAAA,gBAAgB,CAAC,KAAK,CAAC,CAAA,MAAM,SAAS,IAAI,CAAC,IAAI,EAAA,GAAI,cACnD,kBAAkB;gBAEtB,OAAO;;YAGX,IAAI,OAAO,MAAM,SAAS,IAAI,CAAC,IAAI;YACnC,MAAM,IAAI,YAAA,YAAY,CAAS,SAAS,cAAc,EAAE;QAC5D;;;AAhKJ,QAAA,wBAAA,GAAA"}},
    {"offset": {"line": 7109, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 7113, "column": 0}, "map": {"version":3,"sources":["turbopack://[project]/node_modules/svix/src/openapi/apis/StatisticsApi.ts"],"sourcesContent":["// TODO: better import syntax?\nimport { BaseAPIRequestFactory, RequiredError } from './baseapi';\nimport {Configuration} from '../configuration';\nimport { RequestContext, HttpMethod, ResponseContext, HttpFile} from '../http/http';\nimport {ObjectSerializer} from '../models/ObjectSerializer';\nimport {ApiException} from './exception';\nimport {isCodeInRange} from '../util';\n\nimport { AggregateEventTypesOut } from '../models/AggregateEventTypesOut';\nimport { AppUsageStatsIn } from '../models/AppUsageStatsIn';\nimport { AppUsageStatsOut } from '../models/AppUsageStatsOut';\nimport { AttemptStatisticsResponse } from '../models/AttemptStatisticsResponse';\nimport { HTTPValidationError } from '../models/HTTPValidationError';\nimport { HttpErrorOut } from '../models/HttpErrorOut';\n\n/**\n * no description\n */\nexport class StatisticsApiRequestFactory extends BaseAPIRequestFactory {\n\n    /**\n     * Creates a background task to calculate the message destinations for all applications in the environment.  Note that this endpoint is asynchronous. You will need to poll the `Get Background Task` endpoint to retrieve the results of the operation.\n     * Aggregate App Stats\n     * @param appUsageStatsIn \n     * @param idempotencyKey The request&#39;s idempotency key\n     */\n    public async v1StatisticsAggregateAppStats(appUsageStatsIn: AppUsageStatsIn, idempotencyKey?: string, _options?: Configuration): Promise<RequestContext> {\n        let _config = _options || this.configuration;\n\n        // verify required parameter 'appUsageStatsIn' is not null or undefined\n        if (appUsageStatsIn === null || appUsageStatsIn === undefined) {\n            throw new RequiredError('Required parameter appUsageStatsIn was null or undefined when calling v1StatisticsAggregateAppStats.');\n        }\n\n\n\n        // Path Params\n        const localVarPath = '/api/v1/stats/usage/app';\n\n        // Make Request Context\n        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.POST);\n        requestContext.setHeaderParam(\"Accept\", \"application/json, */*;q=0.8\")\n        const randomId = Math.floor(Math.random() * Math.pow(2, 32))\n        requestContext.setHeaderParam(\"svix-req-id\", randomId.toString())\n\n        // Query Params\n\n        // Header Params\n        if (idempotencyKey !== undefined) {\n            requestContext.setHeaderParam(\"idempotency-key\", ObjectSerializer.serialize(idempotencyKey, \"string\", \"\"));\n        }\n\n        // Form Params\n\n\n        // Body Params\n        const contentType = ObjectSerializer.getPreferredMediaType([\n            \"application/json\"\n        ]);\n        requestContext.setHeaderParam(\"Content-Type\", contentType);\n        const serializedBody = ObjectSerializer.stringify(\n            ObjectSerializer.serialize(appUsageStatsIn, \"AppUsageStatsIn\", \"\"),\n            contentType\n        );\n        requestContext.setBody(serializedBody);\n\n        let authMethod = null;\n        // Apply auth methods\n        authMethod = _config.authMethods[\"HTTPBearer\"]\n        if (authMethod) {\n            await authMethod.applySecurityAuthentication(requestContext);\n        }\n\n        return requestContext;\n    }\n\n    /**\n     * Creates a background task to calculate the listed event types for all apps in the organization.  Note that this endpoint is asynchronous. You will need to poll the `Get Background Task` endpoint to retrieve the results of the operation.\n     * Aggregate Event Types\n     */\n    public async v1StatisticsAggregateEventTypes(_options?: Configuration): Promise<RequestContext> {\n        let _config = _options || this.configuration;\n\n        // Path Params\n        const localVarPath = '/api/v1/stats/usage/event-types';\n\n        // Make Request Context\n        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.PUT);\n        requestContext.setHeaderParam(\"Accept\", \"application/json, */*;q=0.8\")\n        const randomId = Math.floor(Math.random() * Math.pow(2, 32))\n        requestContext.setHeaderParam(\"svix-req-id\", randomId.toString())\n\n        // Query Params\n\n        // Header Params\n\n        // Form Params\n\n\n        // Body Params\n\n        let authMethod = null;\n        // Apply auth methods\n        authMethod = _config.authMethods[\"HTTPBearer\"]\n        if (authMethod) {\n            await authMethod.applySecurityAuthentication(requestContext);\n        }\n\n        return requestContext;\n    }\n\n    /**\n     * Returns application-level statistics on message attempts\n     * Get App Attempt Stats\n     * @param appId The app&#39;s ID or UID\n     * @param startDate Filter the range to data starting from this date\n     * @param endDate Filter the range to data ending by this date\n     */\n    public async v1StatsAppAttempts(appId: string, startDate?: Date, endDate?: Date, _options?: Configuration): Promise<RequestContext> {\n        let _config = _options || this.configuration;\n\n        // verify required parameter 'appId' is not null or undefined\n        if (appId === null || appId === undefined) {\n            throw new RequiredError('Required parameter appId was null or undefined when calling v1StatsAppAttempts.');\n        }\n\n\n\n\n        // Path Params\n        const localVarPath = '/api/v1/stats/app/{app_id}/attempt'\n            .replace('{' + 'app_id' + '}', encodeURIComponent(String(appId)));\n\n        // Make Request Context\n        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.GET);\n        requestContext.setHeaderParam(\"Accept\", \"application/json, */*;q=0.8\")\n        const randomId = Math.floor(Math.random() * Math.pow(2, 32))\n        requestContext.setHeaderParam(\"svix-req-id\", randomId.toString())\n\n        // Query Params\n        if (startDate !== undefined) {\n            requestContext.setQueryParam(\"startDate\", ObjectSerializer.serialize(startDate, \"Date\", \"date-time\"));\n        }\n        if (endDate !== undefined) {\n            requestContext.setQueryParam(\"endDate\", ObjectSerializer.serialize(endDate, \"Date\", \"date-time\"));\n        }\n\n        // Header Params\n\n        // Form Params\n\n\n        // Body Params\n\n        let authMethod = null;\n        // Apply auth methods\n        authMethod = _config.authMethods[\"HTTPBearer\"]\n        if (authMethod) {\n            await authMethod.applySecurityAuthentication(requestContext);\n        }\n\n        return requestContext;\n    }\n\n    /**\n     * Returns endpoint-level statistics on message attempts\n     * Get Ep Stats\n     * @param appId The app&#39;s ID or UID\n     * @param endpointId The ep&#39;s ID or UID\n     * @param startDate Filter the range to data starting from this date\n     * @param endDate Filter the range to data ending by this date\n     */\n    public async v1StatsEndpointAttempts(appId: string, endpointId: string, startDate?: Date, endDate?: Date, _options?: Configuration): Promise<RequestContext> {\n        let _config = _options || this.configuration;\n\n        // verify required parameter 'appId' is not null or undefined\n        if (appId === null || appId === undefined) {\n            throw new RequiredError('Required parameter appId was null or undefined when calling v1StatsEndpointAttempts.');\n        }\n\n\n        // verify required parameter 'endpointId' is not null or undefined\n        if (endpointId === null || endpointId === undefined) {\n            throw new RequiredError('Required parameter endpointId was null or undefined when calling v1StatsEndpointAttempts.');\n        }\n\n\n\n\n        // Path Params\n        const localVarPath = '/api/v1/stats/app/{app_id}/ep/{endpoint_id}/attempt'\n            .replace('{' + 'app_id' + '}', encodeURIComponent(String(appId)))\n            .replace('{' + 'endpoint_id' + '}', encodeURIComponent(String(endpointId)));\n\n        // Make Request Context\n        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.GET);\n        requestContext.setHeaderParam(\"Accept\", \"application/json, */*;q=0.8\")\n        const randomId = Math.floor(Math.random() * Math.pow(2, 32))\n        requestContext.setHeaderParam(\"svix-req-id\", randomId.toString())\n\n        // Query Params\n        if (startDate !== undefined) {\n            requestContext.setQueryParam(\"startDate\", ObjectSerializer.serialize(startDate, \"Date\", \"date-time\"));\n        }\n        if (endDate !== undefined) {\n            requestContext.setQueryParam(\"endDate\", ObjectSerializer.serialize(endDate, \"Date\", \"date-time\"));\n        }\n\n        // Header Params\n\n        // Form Params\n\n\n        // Body Params\n\n        let authMethod = null;\n        // Apply auth methods\n        authMethod = _config.authMethods[\"HTTPBearer\"]\n        if (authMethod) {\n            await authMethod.applySecurityAuthentication(requestContext);\n        }\n\n        return requestContext;\n    }\n\n}\n\nexport class StatisticsApiResponseProcessor {\n\n    /**\n     * Unwraps the actual response sent by the server from the response context and deserializes the response content\n     * to the expected objects\n     *\n     * @params response Response returned by the server for a request to v1StatisticsAggregateAppStats\n     * @throws ApiException if the response code was not in [200, 299]\n     */\n     public async v1StatisticsAggregateAppStats(response: ResponseContext): Promise<AppUsageStatsOut > {\n        const contentType = ObjectSerializer.normalizeMediaType(response.headers[\"content-type\"]);\n\n        if (isCodeInRange(\"202\", response.httpStatusCode)) {\n            const body: AppUsageStatsOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"AppUsageStatsOut\", \"\"\n            ) as AppUsageStatsOut;\n            return body;\n        }\n        if (isCodeInRange(\"400\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(400, body);\n        }\n        if (isCodeInRange(\"401\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(401, body);\n        }\n        if (isCodeInRange(\"403\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(403, body);\n        }\n        if (isCodeInRange(\"404\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(404, body);\n        }\n        if (isCodeInRange(\"409\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(409, body);\n        }\n        if (isCodeInRange(\"422\", response.httpStatusCode)) {\n            const body: HTTPValidationError = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HTTPValidationError\", \"\"\n            ) as HTTPValidationError;\n            throw new ApiException<HTTPValidationError>(422, body);\n        }\n        if (isCodeInRange(\"429\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(429, body);\n        }\n\n        // Work around for missing responses in specification, e.g. for petstore.yaml\n        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {\n            const body: AppUsageStatsOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"AppUsageStatsOut\", \"\"\n            ) as AppUsageStatsOut;\n            return body;\n        }\n\n        let body = await response.body.text();\n        throw new ApiException<string>(response.httpStatusCode, body);\n    }\n\n    /**\n     * Unwraps the actual response sent by the server from the response context and deserializes the response content\n     * to the expected objects\n     *\n     * @params response Response returned by the server for a request to v1StatisticsAggregateEventTypes\n     * @throws ApiException if the response code was not in [200, 299]\n     */\n     public async v1StatisticsAggregateEventTypes(response: ResponseContext): Promise<AggregateEventTypesOut > {\n        const contentType = ObjectSerializer.normalizeMediaType(response.headers[\"content-type\"]);\n\n        if (isCodeInRange(\"202\", response.httpStatusCode)) {\n            const body: AggregateEventTypesOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"AggregateEventTypesOut\", \"\"\n            ) as AggregateEventTypesOut;\n            return body;\n        }\n        if (isCodeInRange(\"400\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(400, body);\n        }\n        if (isCodeInRange(\"401\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(401, body);\n        }\n        if (isCodeInRange(\"403\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(403, body);\n        }\n        if (isCodeInRange(\"404\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(404, body);\n        }\n        if (isCodeInRange(\"409\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(409, body);\n        }\n        if (isCodeInRange(\"422\", response.httpStatusCode)) {\n            const body: HTTPValidationError = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HTTPValidationError\", \"\"\n            ) as HTTPValidationError;\n            throw new ApiException<HTTPValidationError>(422, body);\n        }\n        if (isCodeInRange(\"429\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(429, body);\n        }\n\n        // Work around for missing responses in specification, e.g. for petstore.yaml\n        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {\n            const body: AggregateEventTypesOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"AggregateEventTypesOut\", \"\"\n            ) as AggregateEventTypesOut;\n            return body;\n        }\n\n        let body = await response.body.text();\n        throw new ApiException<string>(response.httpStatusCode, body);\n    }\n\n    /**\n     * Unwraps the actual response sent by the server from the response context and deserializes the response content\n     * to the expected objects\n     *\n     * @params response Response returned by the server for a request to v1StatsAppAttempts\n     * @throws ApiException if the response code was not in [200, 299]\n     */\n     public async v1StatsAppAttempts(response: ResponseContext): Promise<AttemptStatisticsResponse > {\n        const contentType = ObjectSerializer.normalizeMediaType(response.headers[\"content-type\"]);\n\n        if (isCodeInRange(\"200\", response.httpStatusCode)) {\n            const body: AttemptStatisticsResponse = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"AttemptStatisticsResponse\", \"\"\n            ) as AttemptStatisticsResponse;\n            return body;\n        }\n        if (isCodeInRange(\"400\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(400, body);\n        }\n        if (isCodeInRange(\"401\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(401, body);\n        }\n        if (isCodeInRange(\"403\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(403, body);\n        }\n        if (isCodeInRange(\"404\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(404, body);\n        }\n        if (isCodeInRange(\"409\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(409, body);\n        }\n        if (isCodeInRange(\"422\", response.httpStatusCode)) {\n            const body: HTTPValidationError = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HTTPValidationError\", \"\"\n            ) as HTTPValidationError;\n            throw new ApiException<HTTPValidationError>(422, body);\n        }\n        if (isCodeInRange(\"429\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(429, body);\n        }\n\n        // Work around for missing responses in specification, e.g. for petstore.yaml\n        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {\n            const body: AttemptStatisticsResponse = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"AttemptStatisticsResponse\", \"\"\n            ) as AttemptStatisticsResponse;\n            return body;\n        }\n\n        let body = await response.body.text();\n        throw new ApiException<string>(response.httpStatusCode, body);\n    }\n\n    /**\n     * Unwraps the actual response sent by the server from the response context and deserializes the response content\n     * to the expected objects\n     *\n     * @params response Response returned by the server for a request to v1StatsEndpointAttempts\n     * @throws ApiException if the response code was not in [200, 299]\n     */\n     public async v1StatsEndpointAttempts(response: ResponseContext): Promise<AttemptStatisticsResponse > {\n        const contentType = ObjectSerializer.normalizeMediaType(response.headers[\"content-type\"]);\n\n        if (isCodeInRange(\"200\", response.httpStatusCode)) {\n            const body: AttemptStatisticsResponse = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"AttemptStatisticsResponse\", \"\"\n            ) as AttemptStatisticsResponse;\n            return body;\n        }\n        if (isCodeInRange(\"400\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(400, body);\n        }\n        if (isCodeInRange(\"401\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(401, body);\n        }\n        if (isCodeInRange(\"403\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(403, body);\n        }\n        if (isCodeInRange(\"404\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(404, body);\n        }\n        if (isCodeInRange(\"409\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(409, body);\n        }\n        if (isCodeInRange(\"422\", response.httpStatusCode)) {\n            const body: HTTPValidationError = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HTTPValidationError\", \"\"\n            ) as HTTPValidationError;\n            throw new ApiException<HTTPValidationError>(422, body);\n        }\n        if (isCodeInRange(\"429\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(429, body);\n        }\n\n        // Work around for missing responses in specification, e.g. for petstore.yaml\n        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {\n            const body: AttemptStatisticsResponse = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"AttemptStatisticsResponse\", \"\"\n            ) as AttemptStatisticsResponse;\n            return body;\n        }\n\n        let body = await response.body.text();\n        throw new ApiException<string>(response.httpStatusCode, body);\n    }\n\n}\n"],"names":[],"mappings":"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"}},
    {"offset": {"line": 7425, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 7429, "column": 0}, "map": {"version":3,"sources":["turbopack://[project]/node_modules/svix/src/openapi/apis/StreamApi.ts"],"sourcesContent":["// TODO: better import syntax?\nimport { BaseAPIRequestFactory, RequiredError } from './baseapi';\nimport {Configuration} from '../configuration';\nimport { RequestContext, HttpMethod, ResponseContext, HttpFile} from '../http/http';\nimport {ObjectSerializer} from '../models/ObjectSerializer';\nimport {ApiException} from './exception';\nimport {isCodeInRange} from '../util';\n\nimport { HTTPValidationError } from '../models/HTTPValidationError';\nimport { HttpErrorOut } from '../models/HttpErrorOut';\nimport { ListResponseStreamOut } from '../models/ListResponseStreamOut';\nimport { Ordering } from '../models/Ordering';\nimport { StreamIn } from '../models/StreamIn';\nimport { StreamOut } from '../models/StreamOut';\nimport { StreamPatch } from '../models/StreamPatch';\n\n/**\n * no description\n */\nexport class StreamApiRequestFactory extends BaseAPIRequestFactory {\n\n    /**\n     * Creates a new stream.\n     * Create Stream\n     * @param streamIn \n     * @param idempotencyKey The request&#39;s idempotency key\n     */\n    public async v1StreamCreate(streamIn: StreamIn, idempotencyKey?: string, _options?: Configuration): Promise<RequestContext> {\n        let _config = _options || this.configuration;\n\n        // verify required parameter 'streamIn' is not null or undefined\n        if (streamIn === null || streamIn === undefined) {\n            throw new RequiredError('Required parameter streamIn was null or undefined when calling v1StreamCreate.');\n        }\n\n\n\n        // Path Params\n        const localVarPath = '/api/v1/stream';\n\n        // Make Request Context\n        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.POST);\n        requestContext.setHeaderParam(\"Accept\", \"application/json, */*;q=0.8\")\n        const randomId = Math.floor(Math.random() * Math.pow(2, 32))\n        requestContext.setHeaderParam(\"svix-req-id\", randomId.toString())\n\n        // Query Params\n\n        // Header Params\n        if (idempotencyKey !== undefined) {\n            requestContext.setHeaderParam(\"idempotency-key\", ObjectSerializer.serialize(idempotencyKey, \"string\", \"\"));\n        }\n\n        // Form Params\n\n\n        // Body Params\n        const contentType = ObjectSerializer.getPreferredMediaType([\n            \"application/json\"\n        ]);\n        requestContext.setHeaderParam(\"Content-Type\", contentType);\n        const serializedBody = ObjectSerializer.stringify(\n            ObjectSerializer.serialize(streamIn, \"StreamIn\", \"\"),\n            contentType\n        );\n        requestContext.setBody(serializedBody);\n\n        let authMethod = null;\n        // Apply auth methods\n        authMethod = _config.authMethods[\"HTTPBearer\"]\n        if (authMethod) {\n            await authMethod.applySecurityAuthentication(requestContext);\n        }\n\n        return requestContext;\n    }\n\n    /**\n     * Delete a stream.\n     * Delete Stream\n     * @param streamId \n     */\n    public async v1StreamDelete(streamId: string, _options?: Configuration): Promise<RequestContext> {\n        let _config = _options || this.configuration;\n\n        // verify required parameter 'streamId' is not null or undefined\n        if (streamId === null || streamId === undefined) {\n            throw new RequiredError('Required parameter streamId was null or undefined when calling v1StreamDelete.');\n        }\n\n\n        // Path Params\n        const localVarPath = '/api/v1/stream/{stream_id}'\n            .replace('{' + 'stream_id' + '}', encodeURIComponent(String(streamId)));\n\n        // Make Request Context\n        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.DELETE);\n        requestContext.setHeaderParam(\"Accept\", \"application/json, */*;q=0.8\")\n        const randomId = Math.floor(Math.random() * Math.pow(2, 32))\n        requestContext.setHeaderParam(\"svix-req-id\", randomId.toString())\n\n        // Query Params\n\n        // Header Params\n\n        // Form Params\n\n\n        // Body Params\n\n        let authMethod = null;\n        // Apply auth methods\n        authMethod = _config.authMethods[\"HTTPBearer\"]\n        if (authMethod) {\n            await authMethod.applySecurityAuthentication(requestContext);\n        }\n\n        return requestContext;\n    }\n\n    /**\n     * Get a stream by id or uid.\n     * Get Stream\n     * @param streamId \n     */\n    public async v1StreamGet(streamId: string, _options?: Configuration): Promise<RequestContext> {\n        let _config = _options || this.configuration;\n\n        // verify required parameter 'streamId' is not null or undefined\n        if (streamId === null || streamId === undefined) {\n            throw new RequiredError('Required parameter streamId was null or undefined when calling v1StreamGet.');\n        }\n\n\n        // Path Params\n        const localVarPath = '/api/v1/stream/{stream_id}'\n            .replace('{' + 'stream_id' + '}', encodeURIComponent(String(streamId)));\n\n        // Make Request Context\n        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.GET);\n        requestContext.setHeaderParam(\"Accept\", \"application/json, */*;q=0.8\")\n        const randomId = Math.floor(Math.random() * Math.pow(2, 32))\n        requestContext.setHeaderParam(\"svix-req-id\", randomId.toString())\n\n        // Query Params\n\n        // Header Params\n\n        // Form Params\n\n\n        // Body Params\n\n        let authMethod = null;\n        // Apply auth methods\n        authMethod = _config.authMethods[\"HTTPBearer\"]\n        if (authMethod) {\n            await authMethod.applySecurityAuthentication(requestContext);\n        }\n\n        return requestContext;\n    }\n\n    /**\n     * List of all the organization's streams.\n     * List Streams\n     * @param limit Limit the number of returned items\n     * @param iterator The iterator returned from a prior invocation\n     * @param order The sorting order of the returned items\n     */\n    public async v1StreamList(limit?: number, iterator?: string, order?: Ordering, _options?: Configuration): Promise<RequestContext> {\n        let _config = _options || this.configuration;\n\n\n\n\n        // Path Params\n        const localVarPath = '/api/v1/stream';\n\n        // Make Request Context\n        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.GET);\n        requestContext.setHeaderParam(\"Accept\", \"application/json, */*;q=0.8\")\n        const randomId = Math.floor(Math.random() * Math.pow(2, 32))\n        requestContext.setHeaderParam(\"svix-req-id\", randomId.toString())\n\n        // Query Params\n        if (limit !== undefined) {\n            requestContext.setQueryParam(\"limit\", ObjectSerializer.serialize(limit, \"number\", \"uint64\"));\n        }\n        if (iterator !== undefined) {\n            requestContext.setQueryParam(\"iterator\", ObjectSerializer.serialize(iterator, \"string\", \"\"));\n        }\n        if (order !== undefined) {\n            requestContext.setQueryParam(\"order\", ObjectSerializer.serialize(order, \"Ordering\", \"\"));\n        }\n\n        // Header Params\n\n        // Form Params\n\n\n        // Body Params\n\n        let authMethod = null;\n        // Apply auth methods\n        authMethod = _config.authMethods[\"HTTPBearer\"]\n        if (authMethod) {\n            await authMethod.applySecurityAuthentication(requestContext);\n        }\n\n        return requestContext;\n    }\n\n    /**\n     * Partially update a stream.\n     * Patch Stream\n     * @param streamId \n     * @param streamPatch \n     */\n    public async v1StreamPatch(streamId: string, streamPatch: StreamPatch, _options?: Configuration): Promise<RequestContext> {\n        let _config = _options || this.configuration;\n\n        // verify required parameter 'streamId' is not null or undefined\n        if (streamId === null || streamId === undefined) {\n            throw new RequiredError('Required parameter streamId was null or undefined when calling v1StreamPatch.');\n        }\n\n\n        // verify required parameter 'streamPatch' is not null or undefined\n        if (streamPatch === null || streamPatch === undefined) {\n            throw new RequiredError('Required parameter streamPatch was null or undefined when calling v1StreamPatch.');\n        }\n\n\n        // Path Params\n        const localVarPath = '/api/v1/stream/{stream_id}'\n            .replace('{' + 'stream_id' + '}', encodeURIComponent(String(streamId)));\n\n        // Make Request Context\n        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.PATCH);\n        requestContext.setHeaderParam(\"Accept\", \"application/json, */*;q=0.8\")\n        const randomId = Math.floor(Math.random() * Math.pow(2, 32))\n        requestContext.setHeaderParam(\"svix-req-id\", randomId.toString())\n\n        // Query Params\n\n        // Header Params\n\n        // Form Params\n\n\n        // Body Params\n        const contentType = ObjectSerializer.getPreferredMediaType([\n            \"application/json\"\n        ]);\n        requestContext.setHeaderParam(\"Content-Type\", contentType);\n        const serializedBody = ObjectSerializer.stringify(\n            ObjectSerializer.serialize(streamPatch, \"StreamPatch\", \"\"),\n            contentType\n        );\n        requestContext.setBody(serializedBody);\n\n        let authMethod = null;\n        // Apply auth methods\n        authMethod = _config.authMethods[\"HTTPBearer\"]\n        if (authMethod) {\n            await authMethod.applySecurityAuthentication(requestContext);\n        }\n\n        return requestContext;\n    }\n\n    /**\n     * Update a stream.\n     * Update Stream\n     * @param streamId \n     * @param streamIn \n     */\n    public async v1StreamUpdate(streamId: string, streamIn: StreamIn, _options?: Configuration): Promise<RequestContext> {\n        let _config = _options || this.configuration;\n\n        // verify required parameter 'streamId' is not null or undefined\n        if (streamId === null || streamId === undefined) {\n            throw new RequiredError('Required parameter streamId was null or undefined when calling v1StreamUpdate.');\n        }\n\n\n        // verify required parameter 'streamIn' is not null or undefined\n        if (streamIn === null || streamIn === undefined) {\n            throw new RequiredError('Required parameter streamIn was null or undefined when calling v1StreamUpdate.');\n        }\n\n\n        // Path Params\n        const localVarPath = '/api/v1/stream/{stream_id}'\n            .replace('{' + 'stream_id' + '}', encodeURIComponent(String(streamId)));\n\n        // Make Request Context\n        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.PUT);\n        requestContext.setHeaderParam(\"Accept\", \"application/json, */*;q=0.8\")\n        const randomId = Math.floor(Math.random() * Math.pow(2, 32))\n        requestContext.setHeaderParam(\"svix-req-id\", randomId.toString())\n\n        // Query Params\n\n        // Header Params\n\n        // Form Params\n\n\n        // Body Params\n        const contentType = ObjectSerializer.getPreferredMediaType([\n            \"application/json\"\n        ]);\n        requestContext.setHeaderParam(\"Content-Type\", contentType);\n        const serializedBody = ObjectSerializer.stringify(\n            ObjectSerializer.serialize(streamIn, \"StreamIn\", \"\"),\n            contentType\n        );\n        requestContext.setBody(serializedBody);\n\n        let authMethod = null;\n        // Apply auth methods\n        authMethod = _config.authMethods[\"HTTPBearer\"]\n        if (authMethod) {\n            await authMethod.applySecurityAuthentication(requestContext);\n        }\n\n        return requestContext;\n    }\n\n}\n\nexport class StreamApiResponseProcessor {\n\n    /**\n     * Unwraps the actual response sent by the server from the response context and deserializes the response content\n     * to the expected objects\n     *\n     * @params response Response returned by the server for a request to v1StreamCreate\n     * @throws ApiException if the response code was not in [200, 299]\n     */\n     public async v1StreamCreate(response: ResponseContext): Promise<StreamOut > {\n        const contentType = ObjectSerializer.normalizeMediaType(response.headers[\"content-type\"]);\n\n        if (isCodeInRange(\"200\", response.httpStatusCode)) {\n            const body: StreamOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"StreamOut\", \"\"\n            ) as StreamOut;\n            return body;\n        }\n        if (isCodeInRange(\"201\", response.httpStatusCode)) {\n            const body: StreamOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"StreamOut\", \"\"\n            ) as StreamOut;\n            return body;\n        }\n        if (isCodeInRange(\"400\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(400, body);\n        }\n        if (isCodeInRange(\"401\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(401, body);\n        }\n        if (isCodeInRange(\"403\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(403, body);\n        }\n        if (isCodeInRange(\"404\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(404, body);\n        }\n        if (isCodeInRange(\"409\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(409, body);\n        }\n        if (isCodeInRange(\"422\", response.httpStatusCode)) {\n            const body: HTTPValidationError = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HTTPValidationError\", \"\"\n            ) as HTTPValidationError;\n            throw new ApiException<HTTPValidationError>(422, body);\n        }\n        if (isCodeInRange(\"429\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(429, body);\n        }\n\n        // Work around for missing responses in specification, e.g. for petstore.yaml\n        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {\n            const body: StreamOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"StreamOut\", \"\"\n            ) as StreamOut;\n            return body;\n        }\n\n        let body = await response.body.text();\n        throw new ApiException<string>(response.httpStatusCode, body);\n    }\n\n    /**\n     * Unwraps the actual response sent by the server from the response context and deserializes the response content\n     * to the expected objects\n     *\n     * @params response Response returned by the server for a request to v1StreamDelete\n     * @throws ApiException if the response code was not in [200, 299]\n     */\n     public async v1StreamDelete(response: ResponseContext): Promise<void > {\n        const contentType = ObjectSerializer.normalizeMediaType(response.headers[\"content-type\"]);\n\n        if (isCodeInRange(\"204\", response.httpStatusCode)) {\n            return;\n        }\n        if (isCodeInRange(\"400\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(400, body);\n        }\n        if (isCodeInRange(\"401\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(401, body);\n        }\n        if (isCodeInRange(\"403\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(403, body);\n        }\n        if (isCodeInRange(\"404\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(404, body);\n        }\n        if (isCodeInRange(\"409\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(409, body);\n        }\n        if (isCodeInRange(\"422\", response.httpStatusCode)) {\n            const body: HTTPValidationError = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HTTPValidationError\", \"\"\n            ) as HTTPValidationError;\n            throw new ApiException<HTTPValidationError>(422, body);\n        }\n        if (isCodeInRange(\"429\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(429, body);\n        }\n\n        // Work around for missing responses in specification, e.g. for petstore.yaml\n        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {\n            const body: void = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"void\", \"\"\n            ) as void;\n            return body;\n        }\n\n        let body = await response.body.text();\n        throw new ApiException<string>(response.httpStatusCode, body);\n    }\n\n    /**\n     * Unwraps the actual response sent by the server from the response context and deserializes the response content\n     * to the expected objects\n     *\n     * @params response Response returned by the server for a request to v1StreamGet\n     * @throws ApiException if the response code was not in [200, 299]\n     */\n     public async v1StreamGet(response: ResponseContext): Promise<StreamOut > {\n        const contentType = ObjectSerializer.normalizeMediaType(response.headers[\"content-type\"]);\n\n        if (isCodeInRange(\"200\", response.httpStatusCode)) {\n            const body: StreamOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"StreamOut\", \"\"\n            ) as StreamOut;\n            return body;\n        }\n        if (isCodeInRange(\"400\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(400, body);\n        }\n        if (isCodeInRange(\"401\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(401, body);\n        }\n        if (isCodeInRange(\"403\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(403, body);\n        }\n        if (isCodeInRange(\"404\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(404, body);\n        }\n        if (isCodeInRange(\"409\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(409, body);\n        }\n        if (isCodeInRange(\"422\", response.httpStatusCode)) {\n            const body: HTTPValidationError = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HTTPValidationError\", \"\"\n            ) as HTTPValidationError;\n            throw new ApiException<HTTPValidationError>(422, body);\n        }\n        if (isCodeInRange(\"429\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(429, body);\n        }\n\n        // Work around for missing responses in specification, e.g. for petstore.yaml\n        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {\n            const body: StreamOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"StreamOut\", \"\"\n            ) as StreamOut;\n            return body;\n        }\n\n        let body = await response.body.text();\n        throw new ApiException<string>(response.httpStatusCode, body);\n    }\n\n    /**\n     * Unwraps the actual response sent by the server from the response context and deserializes the response content\n     * to the expected objects\n     *\n     * @params response Response returned by the server for a request to v1StreamList\n     * @throws ApiException if the response code was not in [200, 299]\n     */\n     public async v1StreamList(response: ResponseContext): Promise<ListResponseStreamOut > {\n        const contentType = ObjectSerializer.normalizeMediaType(response.headers[\"content-type\"]);\n\n        if (isCodeInRange(\"200\", response.httpStatusCode)) {\n            const body: ListResponseStreamOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"ListResponseStreamOut\", \"\"\n            ) as ListResponseStreamOut;\n            return body;\n        }\n        if (isCodeInRange(\"400\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(400, body);\n        }\n        if (isCodeInRange(\"401\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(401, body);\n        }\n        if (isCodeInRange(\"403\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(403, body);\n        }\n        if (isCodeInRange(\"404\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(404, body);\n        }\n        if (isCodeInRange(\"409\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(409, body);\n        }\n        if (isCodeInRange(\"422\", response.httpStatusCode)) {\n            const body: HTTPValidationError = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HTTPValidationError\", \"\"\n            ) as HTTPValidationError;\n            throw new ApiException<HTTPValidationError>(422, body);\n        }\n        if (isCodeInRange(\"429\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(429, body);\n        }\n\n        // Work around for missing responses in specification, e.g. for petstore.yaml\n        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {\n            const body: ListResponseStreamOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"ListResponseStreamOut\", \"\"\n            ) as ListResponseStreamOut;\n            return body;\n        }\n\n        let body = await response.body.text();\n        throw new ApiException<string>(response.httpStatusCode, body);\n    }\n\n    /**\n     * Unwraps the actual response sent by the server from the response context and deserializes the response content\n     * to the expected objects\n     *\n     * @params response Response returned by the server for a request to v1StreamPatch\n     * @throws ApiException if the response code was not in [200, 299]\n     */\n     public async v1StreamPatch(response: ResponseContext): Promise<StreamOut > {\n        const contentType = ObjectSerializer.normalizeMediaType(response.headers[\"content-type\"]);\n\n        if (isCodeInRange(\"200\", response.httpStatusCode)) {\n            const body: StreamOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"StreamOut\", \"\"\n            ) as StreamOut;\n            return body;\n        }\n        if (isCodeInRange(\"400\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(400, body);\n        }\n        if (isCodeInRange(\"401\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(401, body);\n        }\n        if (isCodeInRange(\"403\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(403, body);\n        }\n        if (isCodeInRange(\"404\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(404, body);\n        }\n        if (isCodeInRange(\"409\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(409, body);\n        }\n        if (isCodeInRange(\"422\", response.httpStatusCode)) {\n            const body: HTTPValidationError = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HTTPValidationError\", \"\"\n            ) as HTTPValidationError;\n            throw new ApiException<HTTPValidationError>(422, body);\n        }\n        if (isCodeInRange(\"429\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(429, body);\n        }\n\n        // Work around for missing responses in specification, e.g. for petstore.yaml\n        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {\n            const body: StreamOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"StreamOut\", \"\"\n            ) as StreamOut;\n            return body;\n        }\n\n        let body = await response.body.text();\n        throw new ApiException<string>(response.httpStatusCode, body);\n    }\n\n    /**\n     * Unwraps the actual response sent by the server from the response context and deserializes the response content\n     * to the expected objects\n     *\n     * @params response Response returned by the server for a request to v1StreamUpdate\n     * @throws ApiException if the response code was not in [200, 299]\n     */\n     public async v1StreamUpdate(response: ResponseContext): Promise<StreamOut > {\n        const contentType = ObjectSerializer.normalizeMediaType(response.headers[\"content-type\"]);\n\n        if (isCodeInRange(\"200\", response.httpStatusCode)) {\n            const body: StreamOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"StreamOut\", \"\"\n            ) as StreamOut;\n            return body;\n        }\n        if (isCodeInRange(\"201\", response.httpStatusCode)) {\n            const body: StreamOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"StreamOut\", \"\"\n            ) as StreamOut;\n            return body;\n        }\n        if (isCodeInRange(\"400\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(400, body);\n        }\n        if (isCodeInRange(\"401\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(401, body);\n        }\n        if (isCodeInRange(\"403\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(403, body);\n        }\n        if (isCodeInRange(\"404\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(404, body);\n        }\n        if (isCodeInRange(\"409\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(409, body);\n        }\n        if (isCodeInRange(\"422\", response.httpStatusCode)) {\n            const body: HTTPValidationError = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HTTPValidationError\", \"\"\n            ) as HTTPValidationError;\n            throw new ApiException<HTTPValidationError>(422, body);\n        }\n        if (isCodeInRange(\"429\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(429, body);\n        }\n\n        // Work around for missing responses in specification, e.g. for petstore.yaml\n        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {\n            const body: StreamOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"StreamOut\", \"\"\n            ) as StreamOut;\n            return body;\n        }\n\n        let body = await response.body.text();\n        throw new ApiException<string>(response.httpStatusCode, body);\n    }\n\n}\n"],"names":[],"mappings":"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"}},
    {"offset": {"line": 7884, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 7888, "column": 0}, "map": {"version":3,"sources":["turbopack://[project]/node_modules/svix/src/openapi/apis/TransformationTemplateApi.ts"],"sourcesContent":["// TODO: better import syntax?\nimport { BaseAPIRequestFactory, RequiredError } from './baseapi';\nimport {Configuration} from '../configuration';\nimport { RequestContext, HttpMethod, ResponseContext, HttpFile} from '../http/http';\nimport {ObjectSerializer} from '../models/ObjectSerializer';\nimport {ApiException} from './exception';\nimport {isCodeInRange} from '../util';\n\nimport { GenerateIn } from '../models/GenerateIn';\nimport { GenerateOut } from '../models/GenerateOut';\nimport { HTTPValidationError } from '../models/HTTPValidationError';\nimport { HttpErrorOut } from '../models/HttpErrorOut';\nimport { HubspotOauthConfigIn } from '../models/HubspotOauthConfigIn';\nimport { IncomingWebhookPayloadOut } from '../models/IncomingWebhookPayloadOut';\nimport { ListResponseTemplateOut } from '../models/ListResponseTemplateOut';\nimport { OAuthPayloadIn } from '../models/OAuthPayloadIn';\nimport { OAuthPayloadOut } from '../models/OAuthPayloadOut';\nimport { Ordering } from '../models/Ordering';\nimport { TemplateIn } from '../models/TemplateIn';\nimport { TemplateOut } from '../models/TemplateOut';\nimport { TemplatePatch } from '../models/TemplatePatch';\nimport { TemplateUpdate } from '../models/TemplateUpdate';\nimport { TransformationSimulateIn } from '../models/TransformationSimulateIn';\nimport { TransformationSimulateOut } from '../models/TransformationSimulateOut';\n\n/**\n * no description\n */\nexport class TransformationTemplateApiRequestFactory extends BaseAPIRequestFactory {\n\n    /**\n     * Create/update endpoint Hubsport OAuth configuration Specific private endpoint just for us, to avoid exposing the Hubspot secret to the client.\n     * Update Hubspot Oauth Config\n     * @param appId The app&#39;s ID or UID\n     * @param endpointId The ep&#39;s ID or UID\n     * @param hubspotOauthConfigIn \n     */\n    public async v1EndpointUpdateHubspotOauthConfig(appId: string, endpointId: string, hubspotOauthConfigIn: HubspotOauthConfigIn, _options?: Configuration): Promise<RequestContext> {\n        let _config = _options || this.configuration;\n\n        // verify required parameter 'appId' is not null or undefined\n        if (appId === null || appId === undefined) {\n            throw new RequiredError('Required parameter appId was null or undefined when calling v1EndpointUpdateHubspotOauthConfig.');\n        }\n\n\n        // verify required parameter 'endpointId' is not null or undefined\n        if (endpointId === null || endpointId === undefined) {\n            throw new RequiredError('Required parameter endpointId was null or undefined when calling v1EndpointUpdateHubspotOauthConfig.');\n        }\n\n\n        // verify required parameter 'hubspotOauthConfigIn' is not null or undefined\n        if (hubspotOauthConfigIn === null || hubspotOauthConfigIn === undefined) {\n            throw new RequiredError('Required parameter hubspotOauthConfigIn was null or undefined when calling v1EndpointUpdateHubspotOauthConfig.');\n        }\n\n\n        // Path Params\n        const localVarPath = '/api/v1/app/{app_id}/endpoint/{endpoint_id}/transformation-template/oauth/hubspot'\n            .replace('{' + 'app_id' + '}', encodeURIComponent(String(appId)))\n            .replace('{' + 'endpoint_id' + '}', encodeURIComponent(String(endpointId)));\n\n        // Make Request Context\n        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.PUT);\n        requestContext.setHeaderParam(\"Accept\", \"application/json, */*;q=0.8\")\n        const randomId = Math.floor(Math.random() * Math.pow(2, 32))\n        requestContext.setHeaderParam(\"svix-req-id\", randomId.toString())\n\n        // Query Params\n\n        // Header Params\n\n        // Form Params\n\n\n        // Body Params\n        const contentType = ObjectSerializer.getPreferredMediaType([\n            \"application/json\"\n        ]);\n        requestContext.setHeaderParam(\"Content-Type\", contentType);\n        const serializedBody = ObjectSerializer.stringify(\n            ObjectSerializer.serialize(hubspotOauthConfigIn, \"HubspotOauthConfigIn\", \"\"),\n            contentType\n        );\n        requestContext.setBody(serializedBody);\n\n        let authMethod = null;\n        // Apply auth methods\n        authMethod = _config.authMethods[\"HTTPBearer\"]\n        if (authMethod) {\n            await authMethod.applySecurityAuthentication(requestContext);\n        }\n\n        return requestContext;\n    }\n\n    /**\n     * Create a new transformation template\n     * Create Transformation Template\n     * @param templateIn \n     * @param idempotencyKey The request&#39;s idempotency key\n     */\n    public async v1TransformationTemplateCreate(templateIn: TemplateIn, idempotencyKey?: string, _options?: Configuration): Promise<RequestContext> {\n        let _config = _options || this.configuration;\n\n        // verify required parameter 'templateIn' is not null or undefined\n        if (templateIn === null || templateIn === undefined) {\n            throw new RequiredError('Required parameter templateIn was null or undefined when calling v1TransformationTemplateCreate.');\n        }\n\n\n\n        // Path Params\n        const localVarPath = '/api/v1/transformation-template';\n\n        // Make Request Context\n        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.POST);\n        requestContext.setHeaderParam(\"Accept\", \"application/json, */*;q=0.8\")\n        const randomId = Math.floor(Math.random() * Math.pow(2, 32))\n        requestContext.setHeaderParam(\"svix-req-id\", randomId.toString())\n\n        // Query Params\n\n        // Header Params\n        if (idempotencyKey !== undefined) {\n            requestContext.setHeaderParam(\"idempotency-key\", ObjectSerializer.serialize(idempotencyKey, \"string\", \"\"));\n        }\n\n        // Form Params\n\n\n        // Body Params\n        const contentType = ObjectSerializer.getPreferredMediaType([\n            \"application/json\"\n        ]);\n        requestContext.setHeaderParam(\"Content-Type\", contentType);\n        const serializedBody = ObjectSerializer.stringify(\n            ObjectSerializer.serialize(templateIn, \"TemplateIn\", \"\"),\n            contentType\n        );\n        requestContext.setBody(serializedBody);\n\n        let authMethod = null;\n        // Apply auth methods\n        authMethod = _config.authMethods[\"HTTPBearer\"]\n        if (authMethod) {\n            await authMethod.applySecurityAuthentication(requestContext);\n        }\n\n        return requestContext;\n    }\n\n    /**\n     * Delete a transformation template\n     * Delete Transformation Template\n     * @param transformationTemplateId \n     */\n    public async v1TransformationTemplateDelete(transformationTemplateId: string, _options?: Configuration): Promise<RequestContext> {\n        let _config = _options || this.configuration;\n\n        // verify required parameter 'transformationTemplateId' is not null or undefined\n        if (transformationTemplateId === null || transformationTemplateId === undefined) {\n            throw new RequiredError('Required parameter transformationTemplateId was null or undefined when calling v1TransformationTemplateDelete.');\n        }\n\n\n        // Path Params\n        const localVarPath = '/api/v1/transformation-template/{transformation_template_id}'\n            .replace('{' + 'transformation_template_id' + '}', encodeURIComponent(String(transformationTemplateId)));\n\n        // Make Request Context\n        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.DELETE);\n        requestContext.setHeaderParam(\"Accept\", \"application/json, */*;q=0.8\")\n        const randomId = Math.floor(Math.random() * Math.pow(2, 32))\n        requestContext.setHeaderParam(\"svix-req-id\", randomId.toString())\n\n        // Query Params\n\n        // Header Params\n\n        // Form Params\n\n\n        // Body Params\n\n        let authMethod = null;\n        // Apply auth methods\n        authMethod = _config.authMethods[\"HTTPBearer\"]\n        if (authMethod) {\n            await authMethod.applySecurityAuthentication(requestContext);\n        }\n\n        return requestContext;\n    }\n\n    /**\n     * Use OpenAI's Completion API to generate code for a transformation template\n     * Generate\n     * @param generateIn \n     * @param idempotencyKey The request&#39;s idempotency key\n     */\n    public async v1TransformationTemplateGenerate(generateIn: GenerateIn, idempotencyKey?: string, _options?: Configuration): Promise<RequestContext> {\n        let _config = _options || this.configuration;\n\n        // verify required parameter 'generateIn' is not null or undefined\n        if (generateIn === null || generateIn === undefined) {\n            throw new RequiredError('Required parameter generateIn was null or undefined when calling v1TransformationTemplateGenerate.');\n        }\n\n\n\n        // Path Params\n        const localVarPath = '/api/v1/transformation-template/generate';\n\n        // Make Request Context\n        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.POST);\n        requestContext.setHeaderParam(\"Accept\", \"application/json, */*;q=0.8\")\n        const randomId = Math.floor(Math.random() * Math.pow(2, 32))\n        requestContext.setHeaderParam(\"svix-req-id\", randomId.toString())\n\n        // Query Params\n\n        // Header Params\n        if (idempotencyKey !== undefined) {\n            requestContext.setHeaderParam(\"idempotency-key\", ObjectSerializer.serialize(idempotencyKey, \"string\", \"\"));\n        }\n\n        // Form Params\n\n\n        // Body Params\n        const contentType = ObjectSerializer.getPreferredMediaType([\n            \"application/json\"\n        ]);\n        requestContext.setHeaderParam(\"Content-Type\", contentType);\n        const serializedBody = ObjectSerializer.stringify(\n            ObjectSerializer.serialize(generateIn, \"GenerateIn\", \"\"),\n            contentType\n        );\n        requestContext.setBody(serializedBody);\n\n        let authMethod = null;\n        // Apply auth methods\n        authMethod = _config.authMethods[\"HTTPBearer\"]\n        if (authMethod) {\n            await authMethod.applySecurityAuthentication(requestContext);\n        }\n\n        return requestContext;\n    }\n\n    /**\n     * Get a transformation template\n     * Get Transformation Template\n     * @param transformationTemplateId \n     */\n    public async v1TransformationTemplateGet(transformationTemplateId: string, _options?: Configuration): Promise<RequestContext> {\n        let _config = _options || this.configuration;\n\n        // verify required parameter 'transformationTemplateId' is not null or undefined\n        if (transformationTemplateId === null || transformationTemplateId === undefined) {\n            throw new RequiredError('Required parameter transformationTemplateId was null or undefined when calling v1TransformationTemplateGet.');\n        }\n\n\n        // Path Params\n        const localVarPath = '/api/v1/transformation-template/{transformation_template_id}'\n            .replace('{' + 'transformation_template_id' + '}', encodeURIComponent(String(transformationTemplateId)));\n\n        // Make Request Context\n        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.GET);\n        requestContext.setHeaderParam(\"Accept\", \"application/json, */*;q=0.8\")\n        const randomId = Math.floor(Math.random() * Math.pow(2, 32))\n        requestContext.setHeaderParam(\"svix-req-id\", randomId.toString())\n\n        // Query Params\n\n        // Header Params\n\n        // Form Params\n\n\n        // Body Params\n\n        let authMethod = null;\n        // Apply auth methods\n        authMethod = _config.authMethods[\"HTTPBearer\"]\n        if (authMethod) {\n            await authMethod.applySecurityAuthentication(requestContext);\n        }\n\n        return requestContext;\n    }\n\n    /**\n     * List all transformation templates for an application\n     * List Transformation Templates\n     * @param limit Limit the number of returned items\n     * @param iterator The iterator returned from a prior invocation\n     * @param order The sorting order of the returned items\n     */\n    public async v1TransformationTemplateList(limit?: number, iterator?: string, order?: Ordering, _options?: Configuration): Promise<RequestContext> {\n        let _config = _options || this.configuration;\n\n\n\n\n        // Path Params\n        const localVarPath = '/api/v1/transformation-template';\n\n        // Make Request Context\n        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.GET);\n        requestContext.setHeaderParam(\"Accept\", \"application/json, */*;q=0.8\")\n        const randomId = Math.floor(Math.random() * Math.pow(2, 32))\n        requestContext.setHeaderParam(\"svix-req-id\", randomId.toString())\n\n        // Query Params\n        if (limit !== undefined) {\n            requestContext.setQueryParam(\"limit\", ObjectSerializer.serialize(limit, \"number\", \"uint64\"));\n        }\n        if (iterator !== undefined) {\n            requestContext.setQueryParam(\"iterator\", ObjectSerializer.serialize(iterator, \"string\", \"\"));\n        }\n        if (order !== undefined) {\n            requestContext.setQueryParam(\"order\", ObjectSerializer.serialize(order, \"Ordering\", \"\"));\n        }\n\n        // Header Params\n\n        // Form Params\n\n\n        // Body Params\n\n        let authMethod = null;\n        // Apply auth methods\n        authMethod = _config.authMethods[\"HTTPBearer\"]\n        if (authMethod) {\n            await authMethod.applySecurityAuthentication(requestContext);\n        }\n\n        return requestContext;\n    }\n\n    /**\n     * Get Discord Incoming webhook URL\n     * Authorize Discord\n     * @param oAuthPayloadIn \n     * @param idempotencyKey The request&#39;s idempotency key\n     */\n    public async v1TransformationTemplateOauthDiscord(oAuthPayloadIn: OAuthPayloadIn, idempotencyKey?: string, _options?: Configuration): Promise<RequestContext> {\n        let _config = _options || this.configuration;\n\n        // verify required parameter 'oAuthPayloadIn' is not null or undefined\n        if (oAuthPayloadIn === null || oAuthPayloadIn === undefined) {\n            throw new RequiredError('Required parameter oAuthPayloadIn was null or undefined when calling v1TransformationTemplateOauthDiscord.');\n        }\n\n\n\n        // Path Params\n        const localVarPath = '/api/v1/transformation-template/oauth/discord';\n\n        // Make Request Context\n        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.POST);\n        requestContext.setHeaderParam(\"Accept\", \"application/json, */*;q=0.8\")\n        const randomId = Math.floor(Math.random() * Math.pow(2, 32))\n        requestContext.setHeaderParam(\"svix-req-id\", randomId.toString())\n\n        // Query Params\n\n        // Header Params\n        if (idempotencyKey !== undefined) {\n            requestContext.setHeaderParam(\"idempotency-key\", ObjectSerializer.serialize(idempotencyKey, \"string\", \"\"));\n        }\n\n        // Form Params\n\n\n        // Body Params\n        const contentType = ObjectSerializer.getPreferredMediaType([\n            \"application/json\"\n        ]);\n        requestContext.setHeaderParam(\"Content-Type\", contentType);\n        const serializedBody = ObjectSerializer.stringify(\n            ObjectSerializer.serialize(oAuthPayloadIn, \"OAuthPayloadIn\", \"\"),\n            contentType\n        );\n        requestContext.setBody(serializedBody);\n\n        let authMethod = null;\n        // Apply auth methods\n        authMethod = _config.authMethods[\"HTTPBearer\"]\n        if (authMethod) {\n            await authMethod.applySecurityAuthentication(requestContext);\n        }\n\n        return requestContext;\n    }\n\n    /**\n     * Get Hubspot access token using authorization code\n     * Authorize Hubspot\n     * @param oAuthPayloadIn \n     * @param idempotencyKey The request&#39;s idempotency key\n     */\n    public async v1TransformationTemplateOauthHubspot(oAuthPayloadIn: OAuthPayloadIn, idempotencyKey?: string, _options?: Configuration): Promise<RequestContext> {\n        let _config = _options || this.configuration;\n\n        // verify required parameter 'oAuthPayloadIn' is not null or undefined\n        if (oAuthPayloadIn === null || oAuthPayloadIn === undefined) {\n            throw new RequiredError('Required parameter oAuthPayloadIn was null or undefined when calling v1TransformationTemplateOauthHubspot.');\n        }\n\n\n\n        // Path Params\n        const localVarPath = '/api/v1/transformation-template/oauth/hubspot';\n\n        // Make Request Context\n        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.POST);\n        requestContext.setHeaderParam(\"Accept\", \"application/json, */*;q=0.8\")\n        const randomId = Math.floor(Math.random() * Math.pow(2, 32))\n        requestContext.setHeaderParam(\"svix-req-id\", randomId.toString())\n\n        // Query Params\n\n        // Header Params\n        if (idempotencyKey !== undefined) {\n            requestContext.setHeaderParam(\"idempotency-key\", ObjectSerializer.serialize(idempotencyKey, \"string\", \"\"));\n        }\n\n        // Form Params\n\n\n        // Body Params\n        const contentType = ObjectSerializer.getPreferredMediaType([\n            \"application/json\"\n        ]);\n        requestContext.setHeaderParam(\"Content-Type\", contentType);\n        const serializedBody = ObjectSerializer.stringify(\n            ObjectSerializer.serialize(oAuthPayloadIn, \"OAuthPayloadIn\", \"\"),\n            contentType\n        );\n        requestContext.setBody(serializedBody);\n\n        let authMethod = null;\n        // Apply auth methods\n        authMethod = _config.authMethods[\"HTTPBearer\"]\n        if (authMethod) {\n            await authMethod.applySecurityAuthentication(requestContext);\n        }\n\n        return requestContext;\n    }\n\n    /**\n     * Get Slack Incoming webhook URL\n     * Authorize Slack\n     * @param oAuthPayloadIn \n     * @param idempotencyKey The request&#39;s idempotency key\n     */\n    public async v1TransformationTemplateOauthSlack(oAuthPayloadIn: OAuthPayloadIn, idempotencyKey?: string, _options?: Configuration): Promise<RequestContext> {\n        let _config = _options || this.configuration;\n\n        // verify required parameter 'oAuthPayloadIn' is not null or undefined\n        if (oAuthPayloadIn === null || oAuthPayloadIn === undefined) {\n            throw new RequiredError('Required parameter oAuthPayloadIn was null or undefined when calling v1TransformationTemplateOauthSlack.');\n        }\n\n\n\n        // Path Params\n        const localVarPath = '/api/v1/transformation-template/oauth/slack';\n\n        // Make Request Context\n        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.POST);\n        requestContext.setHeaderParam(\"Accept\", \"application/json, */*;q=0.8\")\n        const randomId = Math.floor(Math.random() * Math.pow(2, 32))\n        requestContext.setHeaderParam(\"svix-req-id\", randomId.toString())\n\n        // Query Params\n\n        // Header Params\n        if (idempotencyKey !== undefined) {\n            requestContext.setHeaderParam(\"idempotency-key\", ObjectSerializer.serialize(idempotencyKey, \"string\", \"\"));\n        }\n\n        // Form Params\n\n\n        // Body Params\n        const contentType = ObjectSerializer.getPreferredMediaType([\n            \"application/json\"\n        ]);\n        requestContext.setHeaderParam(\"Content-Type\", contentType);\n        const serializedBody = ObjectSerializer.stringify(\n            ObjectSerializer.serialize(oAuthPayloadIn, \"OAuthPayloadIn\", \"\"),\n            contentType\n        );\n        requestContext.setBody(serializedBody);\n\n        let authMethod = null;\n        // Apply auth methods\n        authMethod = _config.authMethods[\"HTTPBearer\"]\n        if (authMethod) {\n            await authMethod.applySecurityAuthentication(requestContext);\n        }\n\n        return requestContext;\n    }\n\n    /**\n     * Partially update a transformation template\n     * Patch Transformation Template\n     * @param transformationTemplateId \n     * @param templatePatch \n     */\n    public async v1TransformationTemplatePatch(transformationTemplateId: string, templatePatch: TemplatePatch, _options?: Configuration): Promise<RequestContext> {\n        let _config = _options || this.configuration;\n\n        // verify required parameter 'transformationTemplateId' is not null or undefined\n        if (transformationTemplateId === null || transformationTemplateId === undefined) {\n            throw new RequiredError('Required parameter transformationTemplateId was null or undefined when calling v1TransformationTemplatePatch.');\n        }\n\n\n        // verify required parameter 'templatePatch' is not null or undefined\n        if (templatePatch === null || templatePatch === undefined) {\n            throw new RequiredError('Required parameter templatePatch was null or undefined when calling v1TransformationTemplatePatch.');\n        }\n\n\n        // Path Params\n        const localVarPath = '/api/v1/transformation-template/{transformation_template_id}'\n            .replace('{' + 'transformation_template_id' + '}', encodeURIComponent(String(transformationTemplateId)));\n\n        // Make Request Context\n        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.PATCH);\n        requestContext.setHeaderParam(\"Accept\", \"application/json, */*;q=0.8\")\n        const randomId = Math.floor(Math.random() * Math.pow(2, 32))\n        requestContext.setHeaderParam(\"svix-req-id\", randomId.toString())\n\n        // Query Params\n\n        // Header Params\n\n        // Form Params\n\n\n        // Body Params\n        const contentType = ObjectSerializer.getPreferredMediaType([\n            \"application/json\"\n        ]);\n        requestContext.setHeaderParam(\"Content-Type\", contentType);\n        const serializedBody = ObjectSerializer.stringify(\n            ObjectSerializer.serialize(templatePatch, \"TemplatePatch\", \"\"),\n            contentType\n        );\n        requestContext.setBody(serializedBody);\n\n        let authMethod = null;\n        // Apply auth methods\n        authMethod = _config.authMethods[\"HTTPBearer\"]\n        if (authMethod) {\n            await authMethod.applySecurityAuthentication(requestContext);\n        }\n\n        return requestContext;\n    }\n\n    /**\n     * Simulate running the transformation on the payload and code\n     * Simulate\n     * @param transformationSimulateIn \n     * @param idempotencyKey The request&#39;s idempotency key\n     */\n    public async v1TransformationTemplateSimulate(transformationSimulateIn: TransformationSimulateIn, idempotencyKey?: string, _options?: Configuration): Promise<RequestContext> {\n        let _config = _options || this.configuration;\n\n        // verify required parameter 'transformationSimulateIn' is not null or undefined\n        if (transformationSimulateIn === null || transformationSimulateIn === undefined) {\n            throw new RequiredError('Required parameter transformationSimulateIn was null or undefined when calling v1TransformationTemplateSimulate.');\n        }\n\n\n\n        // Path Params\n        const localVarPath = '/api/v1/transformation-template/simulate';\n\n        // Make Request Context\n        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.POST);\n        requestContext.setHeaderParam(\"Accept\", \"application/json, */*;q=0.8\")\n        const randomId = Math.floor(Math.random() * Math.pow(2, 32))\n        requestContext.setHeaderParam(\"svix-req-id\", randomId.toString())\n\n        // Query Params\n\n        // Header Params\n        if (idempotencyKey !== undefined) {\n            requestContext.setHeaderParam(\"idempotency-key\", ObjectSerializer.serialize(idempotencyKey, \"string\", \"\"));\n        }\n\n        // Form Params\n\n\n        // Body Params\n        const contentType = ObjectSerializer.getPreferredMediaType([\n            \"application/json\"\n        ]);\n        requestContext.setHeaderParam(\"Content-Type\", contentType);\n        const serializedBody = ObjectSerializer.stringify(\n            ObjectSerializer.serialize(transformationSimulateIn, \"TransformationSimulateIn\", \"\"),\n            contentType\n        );\n        requestContext.setBody(serializedBody);\n\n        let authMethod = null;\n        // Apply auth methods\n        authMethod = _config.authMethods[\"HTTPBearer\"]\n        if (authMethod) {\n            await authMethod.applySecurityAuthentication(requestContext);\n        }\n\n        return requestContext;\n    }\n\n    /**\n     * Update a transformation template\n     * Update Transformation Template\n     * @param transformationTemplateId \n     * @param templateUpdate \n     */\n    public async v1TransformationTemplateUpdate(transformationTemplateId: string, templateUpdate: TemplateUpdate, _options?: Configuration): Promise<RequestContext> {\n        let _config = _options || this.configuration;\n\n        // verify required parameter 'transformationTemplateId' is not null or undefined\n        if (transformationTemplateId === null || transformationTemplateId === undefined) {\n            throw new RequiredError('Required parameter transformationTemplateId was null or undefined when calling v1TransformationTemplateUpdate.');\n        }\n\n\n        // verify required parameter 'templateUpdate' is not null or undefined\n        if (templateUpdate === null || templateUpdate === undefined) {\n            throw new RequiredError('Required parameter templateUpdate was null or undefined when calling v1TransformationTemplateUpdate.');\n        }\n\n\n        // Path Params\n        const localVarPath = '/api/v1/transformation-template/{transformation_template_id}'\n            .replace('{' + 'transformation_template_id' + '}', encodeURIComponent(String(transformationTemplateId)));\n\n        // Make Request Context\n        const requestContext = _config.baseServer.makeRequestContext(localVarPath, HttpMethod.PUT);\n        requestContext.setHeaderParam(\"Accept\", \"application/json, */*;q=0.8\")\n        const randomId = Math.floor(Math.random() * Math.pow(2, 32))\n        requestContext.setHeaderParam(\"svix-req-id\", randomId.toString())\n\n        // Query Params\n\n        // Header Params\n\n        // Form Params\n\n\n        // Body Params\n        const contentType = ObjectSerializer.getPreferredMediaType([\n            \"application/json\"\n        ]);\n        requestContext.setHeaderParam(\"Content-Type\", contentType);\n        const serializedBody = ObjectSerializer.stringify(\n            ObjectSerializer.serialize(templateUpdate, \"TemplateUpdate\", \"\"),\n            contentType\n        );\n        requestContext.setBody(serializedBody);\n\n        let authMethod = null;\n        // Apply auth methods\n        authMethod = _config.authMethods[\"HTTPBearer\"]\n        if (authMethod) {\n            await authMethod.applySecurityAuthentication(requestContext);\n        }\n\n        return requestContext;\n    }\n\n}\n\nexport class TransformationTemplateApiResponseProcessor {\n\n    /**\n     * Unwraps the actual response sent by the server from the response context and deserializes the response content\n     * to the expected objects\n     *\n     * @params response Response returned by the server for a request to v1EndpointUpdateHubspotOauthConfig\n     * @throws ApiException if the response code was not in [200, 299]\n     */\n     public async v1EndpointUpdateHubspotOauthConfig(response: ResponseContext): Promise<void > {\n        const contentType = ObjectSerializer.normalizeMediaType(response.headers[\"content-type\"]);\n\n        if (isCodeInRange(\"204\", response.httpStatusCode)) {\n            return;\n        }\n        if (isCodeInRange(\"400\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(400, body);\n        }\n        if (isCodeInRange(\"401\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(401, body);\n        }\n        if (isCodeInRange(\"403\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(403, body);\n        }\n        if (isCodeInRange(\"404\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(404, body);\n        }\n        if (isCodeInRange(\"409\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(409, body);\n        }\n        if (isCodeInRange(\"422\", response.httpStatusCode)) {\n            const body: HTTPValidationError = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HTTPValidationError\", \"\"\n            ) as HTTPValidationError;\n            throw new ApiException<HTTPValidationError>(422, body);\n        }\n        if (isCodeInRange(\"429\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(429, body);\n        }\n\n        // Work around for missing responses in specification, e.g. for petstore.yaml\n        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {\n            const body: void = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"void\", \"\"\n            ) as void;\n            return body;\n        }\n\n        let body = await response.body.text();\n        throw new ApiException<string>(response.httpStatusCode, body);\n    }\n\n    /**\n     * Unwraps the actual response sent by the server from the response context and deserializes the response content\n     * to the expected objects\n     *\n     * @params response Response returned by the server for a request to v1TransformationTemplateCreate\n     * @throws ApiException if the response code was not in [200, 299]\n     */\n     public async v1TransformationTemplateCreate(response: ResponseContext): Promise<TemplateOut > {\n        const contentType = ObjectSerializer.normalizeMediaType(response.headers[\"content-type\"]);\n\n        if (isCodeInRange(\"201\", response.httpStatusCode)) {\n            const body: TemplateOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"TemplateOut\", \"\"\n            ) as TemplateOut;\n            return body;\n        }\n        if (isCodeInRange(\"400\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(400, body);\n        }\n        if (isCodeInRange(\"401\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(401, body);\n        }\n        if (isCodeInRange(\"403\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(403, body);\n        }\n        if (isCodeInRange(\"404\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(404, body);\n        }\n        if (isCodeInRange(\"409\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(409, body);\n        }\n        if (isCodeInRange(\"422\", response.httpStatusCode)) {\n            const body: HTTPValidationError = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HTTPValidationError\", \"\"\n            ) as HTTPValidationError;\n            throw new ApiException<HTTPValidationError>(422, body);\n        }\n        if (isCodeInRange(\"429\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(429, body);\n        }\n\n        // Work around for missing responses in specification, e.g. for petstore.yaml\n        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {\n            const body: TemplateOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"TemplateOut\", \"\"\n            ) as TemplateOut;\n            return body;\n        }\n\n        let body = await response.body.text();\n        throw new ApiException<string>(response.httpStatusCode, body);\n    }\n\n    /**\n     * Unwraps the actual response sent by the server from the response context and deserializes the response content\n     * to the expected objects\n     *\n     * @params response Response returned by the server for a request to v1TransformationTemplateDelete\n     * @throws ApiException if the response code was not in [200, 299]\n     */\n     public async v1TransformationTemplateDelete(response: ResponseContext): Promise<void > {\n        const contentType = ObjectSerializer.normalizeMediaType(response.headers[\"content-type\"]);\n\n        if (isCodeInRange(\"204\", response.httpStatusCode)) {\n            return;\n        }\n        if (isCodeInRange(\"400\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(400, body);\n        }\n        if (isCodeInRange(\"401\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(401, body);\n        }\n        if (isCodeInRange(\"403\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(403, body);\n        }\n        if (isCodeInRange(\"404\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(404, body);\n        }\n        if (isCodeInRange(\"409\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(409, body);\n        }\n        if (isCodeInRange(\"422\", response.httpStatusCode)) {\n            const body: HTTPValidationError = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HTTPValidationError\", \"\"\n            ) as HTTPValidationError;\n            throw new ApiException<HTTPValidationError>(422, body);\n        }\n        if (isCodeInRange(\"429\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(429, body);\n        }\n\n        // Work around for missing responses in specification, e.g. for petstore.yaml\n        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {\n            const body: void = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"void\", \"\"\n            ) as void;\n            return body;\n        }\n\n        let body = await response.body.text();\n        throw new ApiException<string>(response.httpStatusCode, body);\n    }\n\n    /**\n     * Unwraps the actual response sent by the server from the response context and deserializes the response content\n     * to the expected objects\n     *\n     * @params response Response returned by the server for a request to v1TransformationTemplateGenerate\n     * @throws ApiException if the response code was not in [200, 299]\n     */\n     public async v1TransformationTemplateGenerate(response: ResponseContext): Promise<GenerateOut > {\n        const contentType = ObjectSerializer.normalizeMediaType(response.headers[\"content-type\"]);\n\n        if (isCodeInRange(\"200\", response.httpStatusCode)) {\n            const body: GenerateOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"GenerateOut\", \"\"\n            ) as GenerateOut;\n            return body;\n        }\n        if (isCodeInRange(\"400\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(400, body);\n        }\n        if (isCodeInRange(\"401\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(401, body);\n        }\n        if (isCodeInRange(\"403\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(403, body);\n        }\n        if (isCodeInRange(\"404\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(404, body);\n        }\n        if (isCodeInRange(\"409\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(409, body);\n        }\n        if (isCodeInRange(\"422\", response.httpStatusCode)) {\n            const body: HTTPValidationError = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HTTPValidationError\", \"\"\n            ) as HTTPValidationError;\n            throw new ApiException<HTTPValidationError>(422, body);\n        }\n        if (isCodeInRange(\"429\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(429, body);\n        }\n\n        // Work around for missing responses in specification, e.g. for petstore.yaml\n        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {\n            const body: GenerateOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"GenerateOut\", \"\"\n            ) as GenerateOut;\n            return body;\n        }\n\n        let body = await response.body.text();\n        throw new ApiException<string>(response.httpStatusCode, body);\n    }\n\n    /**\n     * Unwraps the actual response sent by the server from the response context and deserializes the response content\n     * to the expected objects\n     *\n     * @params response Response returned by the server for a request to v1TransformationTemplateGet\n     * @throws ApiException if the response code was not in [200, 299]\n     */\n     public async v1TransformationTemplateGet(response: ResponseContext): Promise<TemplateOut > {\n        const contentType = ObjectSerializer.normalizeMediaType(response.headers[\"content-type\"]);\n\n        if (isCodeInRange(\"200\", response.httpStatusCode)) {\n            const body: TemplateOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"TemplateOut\", \"\"\n            ) as TemplateOut;\n            return body;\n        }\n        if (isCodeInRange(\"400\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(400, body);\n        }\n        if (isCodeInRange(\"401\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(401, body);\n        }\n        if (isCodeInRange(\"403\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(403, body);\n        }\n        if (isCodeInRange(\"404\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(404, body);\n        }\n        if (isCodeInRange(\"409\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(409, body);\n        }\n        if (isCodeInRange(\"422\", response.httpStatusCode)) {\n            const body: HTTPValidationError = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HTTPValidationError\", \"\"\n            ) as HTTPValidationError;\n            throw new ApiException<HTTPValidationError>(422, body);\n        }\n        if (isCodeInRange(\"429\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(429, body);\n        }\n\n        // Work around for missing responses in specification, e.g. for petstore.yaml\n        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {\n            const body: TemplateOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"TemplateOut\", \"\"\n            ) as TemplateOut;\n            return body;\n        }\n\n        let body = await response.body.text();\n        throw new ApiException<string>(response.httpStatusCode, body);\n    }\n\n    /**\n     * Unwraps the actual response sent by the server from the response context and deserializes the response content\n     * to the expected objects\n     *\n     * @params response Response returned by the server for a request to v1TransformationTemplateList\n     * @throws ApiException if the response code was not in [200, 299]\n     */\n     public async v1TransformationTemplateList(response: ResponseContext): Promise<ListResponseTemplateOut > {\n        const contentType = ObjectSerializer.normalizeMediaType(response.headers[\"content-type\"]);\n\n        if (isCodeInRange(\"200\", response.httpStatusCode)) {\n            const body: ListResponseTemplateOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"ListResponseTemplateOut\", \"\"\n            ) as ListResponseTemplateOut;\n            return body;\n        }\n        if (isCodeInRange(\"400\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(400, body);\n        }\n        if (isCodeInRange(\"401\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(401, body);\n        }\n        if (isCodeInRange(\"403\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(403, body);\n        }\n        if (isCodeInRange(\"404\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(404, body);\n        }\n        if (isCodeInRange(\"409\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(409, body);\n        }\n        if (isCodeInRange(\"422\", response.httpStatusCode)) {\n            const body: HTTPValidationError = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HTTPValidationError\", \"\"\n            ) as HTTPValidationError;\n            throw new ApiException<HTTPValidationError>(422, body);\n        }\n        if (isCodeInRange(\"429\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(429, body);\n        }\n\n        // Work around for missing responses in specification, e.g. for petstore.yaml\n        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {\n            const body: ListResponseTemplateOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"ListResponseTemplateOut\", \"\"\n            ) as ListResponseTemplateOut;\n            return body;\n        }\n\n        let body = await response.body.text();\n        throw new ApiException<string>(response.httpStatusCode, body);\n    }\n\n    /**\n     * Unwraps the actual response sent by the server from the response context and deserializes the response content\n     * to the expected objects\n     *\n     * @params response Response returned by the server for a request to v1TransformationTemplateOauthDiscord\n     * @throws ApiException if the response code was not in [200, 299]\n     */\n     public async v1TransformationTemplateOauthDiscord(response: ResponseContext): Promise<IncomingWebhookPayloadOut > {\n        const contentType = ObjectSerializer.normalizeMediaType(response.headers[\"content-type\"]);\n\n        if (isCodeInRange(\"200\", response.httpStatusCode)) {\n            const body: IncomingWebhookPayloadOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"IncomingWebhookPayloadOut\", \"\"\n            ) as IncomingWebhookPayloadOut;\n            return body;\n        }\n        if (isCodeInRange(\"400\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(400, body);\n        }\n        if (isCodeInRange(\"401\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(401, body);\n        }\n        if (isCodeInRange(\"403\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(403, body);\n        }\n        if (isCodeInRange(\"404\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(404, body);\n        }\n        if (isCodeInRange(\"409\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(409, body);\n        }\n        if (isCodeInRange(\"422\", response.httpStatusCode)) {\n            const body: HTTPValidationError = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HTTPValidationError\", \"\"\n            ) as HTTPValidationError;\n            throw new ApiException<HTTPValidationError>(422, body);\n        }\n        if (isCodeInRange(\"429\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(429, body);\n        }\n\n        // Work around for missing responses in specification, e.g. for petstore.yaml\n        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {\n            const body: IncomingWebhookPayloadOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"IncomingWebhookPayloadOut\", \"\"\n            ) as IncomingWebhookPayloadOut;\n            return body;\n        }\n\n        let body = await response.body.text();\n        throw new ApiException<string>(response.httpStatusCode, body);\n    }\n\n    /**\n     * Unwraps the actual response sent by the server from the response context and deserializes the response content\n     * to the expected objects\n     *\n     * @params response Response returned by the server for a request to v1TransformationTemplateOauthHubspot\n     * @throws ApiException if the response code was not in [200, 299]\n     */\n     public async v1TransformationTemplateOauthHubspot(response: ResponseContext): Promise<OAuthPayloadOut > {\n        const contentType = ObjectSerializer.normalizeMediaType(response.headers[\"content-type\"]);\n\n        if (isCodeInRange(\"200\", response.httpStatusCode)) {\n            const body: OAuthPayloadOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"OAuthPayloadOut\", \"\"\n            ) as OAuthPayloadOut;\n            return body;\n        }\n        if (isCodeInRange(\"400\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(400, body);\n        }\n        if (isCodeInRange(\"401\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(401, body);\n        }\n        if (isCodeInRange(\"403\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(403, body);\n        }\n        if (isCodeInRange(\"404\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(404, body);\n        }\n        if (isCodeInRange(\"409\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(409, body);\n        }\n        if (isCodeInRange(\"422\", response.httpStatusCode)) {\n            const body: HTTPValidationError = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HTTPValidationError\", \"\"\n            ) as HTTPValidationError;\n            throw new ApiException<HTTPValidationError>(422, body);\n        }\n        if (isCodeInRange(\"429\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(429, body);\n        }\n\n        // Work around for missing responses in specification, e.g. for petstore.yaml\n        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {\n            const body: OAuthPayloadOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"OAuthPayloadOut\", \"\"\n            ) as OAuthPayloadOut;\n            return body;\n        }\n\n        let body = await response.body.text();\n        throw new ApiException<string>(response.httpStatusCode, body);\n    }\n\n    /**\n     * Unwraps the actual response sent by the server from the response context and deserializes the response content\n     * to the expected objects\n     *\n     * @params response Response returned by the server for a request to v1TransformationTemplateOauthSlack\n     * @throws ApiException if the response code was not in [200, 299]\n     */\n     public async v1TransformationTemplateOauthSlack(response: ResponseContext): Promise<IncomingWebhookPayloadOut > {\n        const contentType = ObjectSerializer.normalizeMediaType(response.headers[\"content-type\"]);\n\n        if (isCodeInRange(\"200\", response.httpStatusCode)) {\n            const body: IncomingWebhookPayloadOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"IncomingWebhookPayloadOut\", \"\"\n            ) as IncomingWebhookPayloadOut;\n            return body;\n        }\n        if (isCodeInRange(\"400\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(400, body);\n        }\n        if (isCodeInRange(\"401\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(401, body);\n        }\n        if (isCodeInRange(\"403\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(403, body);\n        }\n        if (isCodeInRange(\"404\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(404, body);\n        }\n        if (isCodeInRange(\"409\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(409, body);\n        }\n        if (isCodeInRange(\"422\", response.httpStatusCode)) {\n            const body: HTTPValidationError = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HTTPValidationError\", \"\"\n            ) as HTTPValidationError;\n            throw new ApiException<HTTPValidationError>(422, body);\n        }\n        if (isCodeInRange(\"429\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(429, body);\n        }\n\n        // Work around for missing responses in specification, e.g. for petstore.yaml\n        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {\n            const body: IncomingWebhookPayloadOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"IncomingWebhookPayloadOut\", \"\"\n            ) as IncomingWebhookPayloadOut;\n            return body;\n        }\n\n        let body = await response.body.text();\n        throw new ApiException<string>(response.httpStatusCode, body);\n    }\n\n    /**\n     * Unwraps the actual response sent by the server from the response context and deserializes the response content\n     * to the expected objects\n     *\n     * @params response Response returned by the server for a request to v1TransformationTemplatePatch\n     * @throws ApiException if the response code was not in [200, 299]\n     */\n     public async v1TransformationTemplatePatch(response: ResponseContext): Promise<TemplateOut > {\n        const contentType = ObjectSerializer.normalizeMediaType(response.headers[\"content-type\"]);\n\n        if (isCodeInRange(\"200\", response.httpStatusCode)) {\n            const body: TemplateOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"TemplateOut\", \"\"\n            ) as TemplateOut;\n            return body;\n        }\n        if (isCodeInRange(\"400\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(400, body);\n        }\n        if (isCodeInRange(\"401\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(401, body);\n        }\n        if (isCodeInRange(\"403\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(403, body);\n        }\n        if (isCodeInRange(\"404\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(404, body);\n        }\n        if (isCodeInRange(\"409\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(409, body);\n        }\n        if (isCodeInRange(\"422\", response.httpStatusCode)) {\n            const body: HTTPValidationError = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HTTPValidationError\", \"\"\n            ) as HTTPValidationError;\n            throw new ApiException<HTTPValidationError>(422, body);\n        }\n        if (isCodeInRange(\"429\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(429, body);\n        }\n\n        // Work around for missing responses in specification, e.g. for petstore.yaml\n        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {\n            const body: TemplateOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"TemplateOut\", \"\"\n            ) as TemplateOut;\n            return body;\n        }\n\n        let body = await response.body.text();\n        throw new ApiException<string>(response.httpStatusCode, body);\n    }\n\n    /**\n     * Unwraps the actual response sent by the server from the response context and deserializes the response content\n     * to the expected objects\n     *\n     * @params response Response returned by the server for a request to v1TransformationTemplateSimulate\n     * @throws ApiException if the response code was not in [200, 299]\n     */\n     public async v1TransformationTemplateSimulate(response: ResponseContext): Promise<TransformationSimulateOut > {\n        const contentType = ObjectSerializer.normalizeMediaType(response.headers[\"content-type\"]);\n\n        if (isCodeInRange(\"200\", response.httpStatusCode)) {\n            const body: TransformationSimulateOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"TransformationSimulateOut\", \"\"\n            ) as TransformationSimulateOut;\n            return body;\n        }\n        if (isCodeInRange(\"400\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(400, body);\n        }\n        if (isCodeInRange(\"401\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(401, body);\n        }\n        if (isCodeInRange(\"403\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(403, body);\n        }\n        if (isCodeInRange(\"404\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(404, body);\n        }\n        if (isCodeInRange(\"409\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(409, body);\n        }\n        if (isCodeInRange(\"422\", response.httpStatusCode)) {\n            const body: HTTPValidationError = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HTTPValidationError\", \"\"\n            ) as HTTPValidationError;\n            throw new ApiException<HTTPValidationError>(422, body);\n        }\n        if (isCodeInRange(\"429\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(429, body);\n        }\n\n        // Work around for missing responses in specification, e.g. for petstore.yaml\n        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {\n            const body: TransformationSimulateOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"TransformationSimulateOut\", \"\"\n            ) as TransformationSimulateOut;\n            return body;\n        }\n\n        let body = await response.body.text();\n        throw new ApiException<string>(response.httpStatusCode, body);\n    }\n\n    /**\n     * Unwraps the actual response sent by the server from the response context and deserializes the response content\n     * to the expected objects\n     *\n     * @params response Response returned by the server for a request to v1TransformationTemplateUpdate\n     * @throws ApiException if the response code was not in [200, 299]\n     */\n     public async v1TransformationTemplateUpdate(response: ResponseContext): Promise<TemplateOut > {\n        const contentType = ObjectSerializer.normalizeMediaType(response.headers[\"content-type\"]);\n\n        if (isCodeInRange(\"200\", response.httpStatusCode)) {\n            const body: TemplateOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"TemplateOut\", \"\"\n            ) as TemplateOut;\n            return body;\n        }\n        if (isCodeInRange(\"201\", response.httpStatusCode)) {\n            const body: TemplateOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"TemplateOut\", \"\"\n            ) as TemplateOut;\n            return body;\n        }\n        if (isCodeInRange(\"400\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(400, body);\n        }\n        if (isCodeInRange(\"401\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(401, body);\n        }\n        if (isCodeInRange(\"403\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(403, body);\n        }\n        if (isCodeInRange(\"404\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(404, body);\n        }\n        if (isCodeInRange(\"409\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(409, body);\n        }\n        if (isCodeInRange(\"422\", response.httpStatusCode)) {\n            const body: HTTPValidationError = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HTTPValidationError\", \"\"\n            ) as HTTPValidationError;\n            throw new ApiException<HTTPValidationError>(422, body);\n        }\n        if (isCodeInRange(\"429\", response.httpStatusCode)) {\n            const body: HttpErrorOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"HttpErrorOut\", \"\"\n            ) as HttpErrorOut;\n            throw new ApiException<HttpErrorOut>(429, body);\n        }\n\n        // Work around for missing responses in specification, e.g. for petstore.yaml\n        if (response.httpStatusCode >= 200 && response.httpStatusCode <= 299) {\n            const body: TemplateOut = ObjectSerializer.deserialize(\n                ObjectSerializer.parse(await response.body.text(), contentType),\n                \"TemplateOut\", \"\"\n            ) as TemplateOut;\n            return body;\n        }\n\n        let body = await response.body.text();\n        throw new ApiException<string>(response.httpStatusCode, body);\n    }\n\n}\n"],"names":[],"mappings":"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"}},
    {"offset": {"line": 8767, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}