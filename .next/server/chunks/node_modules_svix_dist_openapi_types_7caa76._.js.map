{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 4, "column": 0}, "map": {"version":3,"sources":["turbopack://[project]/node_modules/svix/src/openapi/types/ObservableAPI.ts"],"sourcesContent":["import { ResponseContext, RequestContext, HttpFile } from '../http/http';\nimport * as models from '../models/all';\nimport { Configuration} from '../configuration'\nimport { Observable, of, from } from '../rxjsStub';\nimport {mergeMap, map} from  '../rxjsStub';\nimport { AggregateEventTypesOut } from '../models/AggregateEventTypesOut';\nimport { AppPortalAccessIn } from '../models/AppPortalAccessIn';\nimport { AppPortalAccessOut } from '../models/AppPortalAccessOut';\nimport { AppUsageStatsIn } from '../models/AppUsageStatsIn';\nimport { AppUsageStatsOut } from '../models/AppUsageStatsOut';\nimport { ApplicationIn } from '../models/ApplicationIn';\nimport { ApplicationOut } from '../models/ApplicationOut';\nimport { ApplicationPatch } from '../models/ApplicationPatch';\nimport { ApplicationStats } from '../models/ApplicationStats';\nimport { ApplicationTokenExpireIn } from '../models/ApplicationTokenExpireIn';\nimport { AttemptStatisticsData } from '../models/AttemptStatisticsData';\nimport { AttemptStatisticsResponse } from '../models/AttemptStatisticsResponse';\nimport { AuthTokenOut } from '../models/AuthTokenOut';\nimport { AzureBlobStorageConfig } from '../models/AzureBlobStorageConfig';\nimport { BackgroundTaskOut } from '../models/BackgroundTaskOut';\nimport { BackgroundTaskStatus } from '../models/BackgroundTaskStatus';\nimport { BackgroundTaskType } from '../models/BackgroundTaskType';\nimport { BorderRadiusConfig } from '../models/BorderRadiusConfig';\nimport { BorderRadiusEnum } from '../models/BorderRadiusEnum';\nimport { ClientSecretJwtParamsIn } from '../models/ClientSecretJwtParamsIn';\nimport { CompletionChoice } from '../models/CompletionChoice';\nimport { CompletionMessage } from '../models/CompletionMessage';\nimport { CreateMessageTokenIn } from '../models/CreateMessageTokenIn';\nimport { CreateStreamIn } from '../models/CreateStreamIn';\nimport { CustomColorPalette } from '../models/CustomColorPalette';\nimport { CustomStringsOverride } from '../models/CustomStringsOverride';\nimport { CustomThemeOverride } from '../models/CustomThemeOverride';\nimport { DashboardAccessOut } from '../models/DashboardAccessOut';\nimport { Duration } from '../models/Duration';\nimport { EndpointCreatedEvent } from '../models/EndpointCreatedEvent';\nimport { EndpointCreatedEventData } from '../models/EndpointCreatedEventData';\nimport { EndpointDeletedEvent } from '../models/EndpointDeletedEvent';\nimport { EndpointDeletedEventData } from '../models/EndpointDeletedEventData';\nimport { EndpointDisabledEvent } from '../models/EndpointDisabledEvent';\nimport { EndpointDisabledEventData } from '../models/EndpointDisabledEventData';\nimport { EndpointHeadersIn } from '../models/EndpointHeadersIn';\nimport { EndpointHeadersOut } from '../models/EndpointHeadersOut';\nimport { EndpointHeadersPatchIn } from '../models/EndpointHeadersPatchIn';\nimport { EndpointIn } from '../models/EndpointIn';\nimport { EndpointMessageOut } from '../models/EndpointMessageOut';\nimport { EndpointMtlsConfigIn } from '../models/EndpointMtlsConfigIn';\nimport { EndpointOauthConfigIn } from '../models/EndpointOauthConfigIn';\nimport { EndpointOut } from '../models/EndpointOut';\nimport { EndpointPatch } from '../models/EndpointPatch';\nimport { EndpointSecretOut } from '../models/EndpointSecretOut';\nimport { EndpointSecretRotateIn } from '../models/EndpointSecretRotateIn';\nimport { EndpointStats } from '../models/EndpointStats';\nimport { EndpointTransformationIn } from '../models/EndpointTransformationIn';\nimport { EndpointTransformationOut } from '../models/EndpointTransformationOut';\nimport { EndpointTransformationSimulateIn } from '../models/EndpointTransformationSimulateIn';\nimport { EndpointTransformationSimulateOut } from '../models/EndpointTransformationSimulateOut';\nimport { EndpointUpdate } from '../models/EndpointUpdate';\nimport { EndpointUpdatedEvent } from '../models/EndpointUpdatedEvent';\nimport { EndpointUpdatedEventData } from '../models/EndpointUpdatedEventData';\nimport { EnvironmentIn } from '../models/EnvironmentIn';\nimport { EnvironmentOut } from '../models/EnvironmentOut';\nimport { EnvironmentSettingsOut } from '../models/EnvironmentSettingsOut';\nimport { EventExampleIn } from '../models/EventExampleIn';\nimport { EventIn } from '../models/EventIn';\nimport { EventOut } from '../models/EventOut';\nimport { EventStreamOut } from '../models/EventStreamOut';\nimport { EventTypeExampleOut } from '../models/EventTypeExampleOut';\nimport { EventTypeFromOpenApi } from '../models/EventTypeFromOpenApi';\nimport { EventTypeImportOpenApiIn } from '../models/EventTypeImportOpenApiIn';\nimport { EventTypeImportOpenApiOut } from '../models/EventTypeImportOpenApiOut';\nimport { EventTypeImportOpenApiOutData } from '../models/EventTypeImportOpenApiOutData';\nimport { EventTypeIn } from '../models/EventTypeIn';\nimport { EventTypeOut } from '../models/EventTypeOut';\nimport { EventTypePatch } from '../models/EventTypePatch';\nimport { EventTypeSchemaIn } from '../models/EventTypeSchemaIn';\nimport { EventTypeUpdate } from '../models/EventTypeUpdate';\nimport { ExportEventTypeOut } from '../models/ExportEventTypeOut';\nimport { FontSizeConfig } from '../models/FontSizeConfig';\nimport { GenerateIn } from '../models/GenerateIn';\nimport { GenerateOut } from '../models/GenerateOut';\nimport { GoogleCloudStorageConfig } from '../models/GoogleCloudStorageConfig';\nimport { HTTPValidationError } from '../models/HTTPValidationError';\nimport { HttpErrorOut } from '../models/HttpErrorOut';\nimport { HubspotOauthConfigIn } from '../models/HubspotOauthConfigIn';\nimport { InboundPathParams } from '../models/InboundPathParams';\nimport { IncomingWebhookPayloadOut } from '../models/IncomingWebhookPayloadOut';\nimport { IntegrationIn } from '../models/IntegrationIn';\nimport { IntegrationKeyOut } from '../models/IntegrationKeyOut';\nimport { IntegrationOut } from '../models/IntegrationOut';\nimport { IntegrationUpdate } from '../models/IntegrationUpdate';\nimport { KafkaSecurityProtocolType } from '../models/KafkaSecurityProtocolType';\nimport { ListResponseApplicationOut } from '../models/ListResponseApplicationOut';\nimport { ListResponseApplicationStats } from '../models/ListResponseApplicationStats';\nimport { ListResponseBackgroundTaskOut } from '../models/ListResponseBackgroundTaskOut';\nimport { ListResponseEndpointMessageOut } from '../models/ListResponseEndpointMessageOut';\nimport { ListResponseEndpointOut } from '../models/ListResponseEndpointOut';\nimport { ListResponseEventTypeOut } from '../models/ListResponseEventTypeOut';\nimport { ListResponseIntegrationOut } from '../models/ListResponseIntegrationOut';\nimport { ListResponseMessageAttemptEndpointOut } from '../models/ListResponseMessageAttemptEndpointOut';\nimport { ListResponseMessageAttemptOut } from '../models/ListResponseMessageAttemptOut';\nimport { ListResponseMessageEndpointOut } from '../models/ListResponseMessageEndpointOut';\nimport { ListResponseMessageOut } from '../models/ListResponseMessageOut';\nimport { ListResponseSinkOut } from '../models/ListResponseSinkOut';\nimport { ListResponseStreamOut } from '../models/ListResponseStreamOut';\nimport { ListResponseStreamSinkOut } from '../models/ListResponseStreamSinkOut';\nimport { ListResponseTemplateOut } from '../models/ListResponseTemplateOut';\nimport { MessageAttemptEndpointOut } from '../models/MessageAttemptEndpointOut';\nimport { MessageAttemptExhaustedEvent } from '../models/MessageAttemptExhaustedEvent';\nimport { MessageAttemptExhaustedEventData } from '../models/MessageAttemptExhaustedEventData';\nimport { MessageAttemptFailedData } from '../models/MessageAttemptFailedData';\nimport { MessageAttemptFailingEvent } from '../models/MessageAttemptFailingEvent';\nimport { MessageAttemptFailingEventData } from '../models/MessageAttemptFailingEventData';\nimport { MessageAttemptHeadersOut } from '../models/MessageAttemptHeadersOut';\nimport { MessageAttemptOut } from '../models/MessageAttemptOut';\nimport { MessageAttemptRecoveredEvent } from '../models/MessageAttemptRecoveredEvent';\nimport { MessageAttemptRecoveredEventData } from '../models/MessageAttemptRecoveredEventData';\nimport { MessageAttemptTriggerType } from '../models/MessageAttemptTriggerType';\nimport { MessageBroadcastIn } from '../models/MessageBroadcastIn';\nimport { MessageBroadcastOut } from '../models/MessageBroadcastOut';\nimport { MessageEndpointOut } from '../models/MessageEndpointOut';\nimport { MessageEventsOut } from '../models/MessageEventsOut';\nimport { MessageIn } from '../models/MessageIn';\nimport { MessageOut } from '../models/MessageOut';\nimport { MessageRawPayloadOut } from '../models/MessageRawPayloadOut';\nimport { MessageStatus } from '../models/MessageStatus';\nimport { MessageSubscriberAuthTokenOut } from '../models/MessageSubscriberAuthTokenOut';\nimport { OAuthPayloadIn } from '../models/OAuthPayloadIn';\nimport { OAuthPayloadOut } from '../models/OAuthPayloadOut';\nimport { Oauth2AuthMethodIn } from '../models/Oauth2AuthMethodIn';\nimport { Oauth2GrantTypeIn } from '../models/Oauth2GrantTypeIn';\nimport { OauthJwsSigningAlgorithm } from '../models/OauthJwsSigningAlgorithm';\nimport { OneTimeTokenIn } from '../models/OneTimeTokenIn';\nimport { OneTimeTokenOut } from '../models/OneTimeTokenOut';\nimport { Ordering } from '../models/Ordering';\nimport { RecoverIn } from '../models/RecoverIn';\nimport { RecoverOut } from '../models/RecoverOut';\nimport { RedshiftConfig } from '../models/RedshiftConfig';\nimport { ReplayIn } from '../models/ReplayIn';\nimport { ReplayOut } from '../models/ReplayOut';\nimport { RetryScheduleInOut } from '../models/RetryScheduleInOut';\nimport { RotatedUrlOut } from '../models/RotatedUrlOut';\nimport { S3Config } from '../models/S3Config';\nimport { SettingsIn } from '../models/SettingsIn';\nimport { SettingsOut } from '../models/SettingsOut';\nimport { SinkHttpConfig } from '../models/SinkHttpConfig';\nimport { SinkIn } from '../models/SinkIn';\nimport { SinkInOneOf } from '../models/SinkInOneOf';\nimport { SinkInOneOf1 } from '../models/SinkInOneOf1';\nimport { SinkInOneOf2 } from '../models/SinkInOneOf2';\nimport { SinkInOneOf3 } from '../models/SinkInOneOf3';\nimport { SinkOtelV1Config } from '../models/SinkOtelV1Config';\nimport { SinkOut } from '../models/SinkOut';\nimport { SinkPayloadFormat } from '../models/SinkPayloadFormat';\nimport { SinkStatus } from '../models/SinkStatus';\nimport { SinkStatusIn } from '../models/SinkStatusIn';\nimport { SinkTransformIn } from '../models/SinkTransformIn';\nimport { SinkTransformationOut } from '../models/SinkTransformationOut';\nimport { SnowflakeConfig } from '../models/SnowflakeConfig';\nimport { StatisticsPeriod } from '../models/StatisticsPeriod';\nimport { StatusCodeClass } from '../models/StatusCodeClass';\nimport { StreamIn } from '../models/StreamIn';\nimport { StreamOut } from '../models/StreamOut';\nimport { StreamPatch } from '../models/StreamPatch';\nimport { StreamSinkIn } from '../models/StreamSinkIn';\nimport { StreamSinkInOneOf } from '../models/StreamSinkInOneOf';\nimport { StreamSinkInOneOf1 } from '../models/StreamSinkInOneOf1';\nimport { StreamSinkInOneOf2 } from '../models/StreamSinkInOneOf2';\nimport { StreamSinkInOneOf3 } from '../models/StreamSinkInOneOf3';\nimport { StreamSinkInOneOf4 } from '../models/StreamSinkInOneOf4';\nimport { StreamSinkInOneOf5 } from '../models/StreamSinkInOneOf5';\nimport { StreamSinkInOneOf6 } from '../models/StreamSinkInOneOf6';\nimport { StreamSinkOut } from '../models/StreamSinkOut';\nimport { StreamSinkPatch } from '../models/StreamSinkPatch';\nimport { TemplateIn } from '../models/TemplateIn';\nimport { TemplateOut } from '../models/TemplateOut';\nimport { TemplatePatch } from '../models/TemplatePatch';\nimport { TemplateUpdate } from '../models/TemplateUpdate';\nimport { TransformationHttpMethod } from '../models/TransformationHttpMethod';\nimport { TransformationSimulateIn } from '../models/TransformationSimulateIn';\nimport { TransformationSimulateOut } from '../models/TransformationSimulateOut';\nimport { TransformationTemplateKind } from '../models/TransformationTemplateKind';\nimport { ValidationError } from '../models/ValidationError';\n\nimport { ApplicationApiRequestFactory, ApplicationApiResponseProcessor} from \"../apis/ApplicationApi\";\nexport class ObservableApplicationApi {\n    private requestFactory: ApplicationApiRequestFactory;\n    private responseProcessor: ApplicationApiResponseProcessor;\n    private configuration: Configuration;\n\n    public constructor(\n        configuration: Configuration,\n        requestFactory?: ApplicationApiRequestFactory,\n        responseProcessor?: ApplicationApiResponseProcessor\n    ) {\n        this.configuration = configuration;\n        this.requestFactory = requestFactory || new ApplicationApiRequestFactory(configuration);\n        this.responseProcessor = responseProcessor || new ApplicationApiResponseProcessor();\n    }\n\n    /**\n     * Get basic statistics for all applications.\n     * Get App Usage Stats\n     * @param since Filter the range to data after this date\n     * @param until Filter the range to data before this date\n     * @param limit Limit the number of returned items\n     * @param iterator The iterator to use (depends on the chosen ordering)\n     */\n    public getAppUsageStatsApiV1AppStatsUsageGet(since: Date, until: Date, limit?: number, iterator?: string, _options?: Configuration): Observable<ListResponseApplicationStats> {\n        const requestContextPromise = this.requestFactory.getAppUsageStatsApiV1AppStatsUsageGet(since, until, limit, iterator, _options);\n\n        // build promise chain\n        let middlewarePreObservable = from<RequestContext>(requestContextPromise);\n        for (let middleware of this.configuration.middleware) {\n            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));\n        }\n\n        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => this.configuration.httpApi.send(ctx))).\n            pipe(mergeMap((response: ResponseContext) => {\n                let middlewarePostObservable = of(response);\n                for (let middleware of this.configuration.middleware) {\n                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));\n                }\n                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.getAppUsageStatsApiV1AppStatsUsageGet(rsp)));\n            }));\n    }\n \n    /**\n     * Create a new application.\n     * Create Application\n     * @param applicationIn \n     * @param getIfExists Get an existing application, or create a new one if doesn&#39;t exist. It&#39;s two separate functions in the libs.\n     * @param idempotencyKey The request&#39;s idempotency key\n     */\n    public v1ApplicationCreate(applicationIn: ApplicationIn, getIfExists?: boolean, idempotencyKey?: string, _options?: Configuration): Observable<ApplicationOut> {\n        const requestContextPromise = this.requestFactory.v1ApplicationCreate(applicationIn, getIfExists, idempotencyKey, _options);\n\n        // build promise chain\n        let middlewarePreObservable = from<RequestContext>(requestContextPromise);\n        for (let middleware of this.configuration.middleware) {\n            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));\n        }\n\n        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => this.configuration.httpApi.send(ctx))).\n            pipe(mergeMap((response: ResponseContext) => {\n                let middlewarePostObservable = of(response);\n                for (let middleware of this.configuration.middleware) {\n                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));\n                }\n                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.v1ApplicationCreate(rsp)));\n            }));\n    }\n \n    /**\n     * Delete an application.\n     * Delete Application\n     * @param appId The app&#39;s ID or UID\n     */\n    public v1ApplicationDelete(appId: string, _options?: Configuration): Observable<void> {\n        const requestContextPromise = this.requestFactory.v1ApplicationDelete(appId, _options);\n\n        // build promise chain\n        let middlewarePreObservable = from<RequestContext>(requestContextPromise);\n        for (let middleware of this.configuration.middleware) {\n            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));\n        }\n\n        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => this.configuration.httpApi.send(ctx))).\n            pipe(mergeMap((response: ResponseContext) => {\n                let middlewarePostObservable = of(response);\n                for (let middleware of this.configuration.middleware) {\n                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));\n                }\n                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.v1ApplicationDelete(rsp)));\n            }));\n    }\n \n    /**\n     * Get an application.\n     * Get Application\n     * @param appId The app&#39;s ID or UID\n     */\n    public v1ApplicationGet(appId: string, _options?: Configuration): Observable<ApplicationOut> {\n        const requestContextPromise = this.requestFactory.v1ApplicationGet(appId, _options);\n\n        // build promise chain\n        let middlewarePreObservable = from<RequestContext>(requestContextPromise);\n        for (let middleware of this.configuration.middleware) {\n            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));\n        }\n\n        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => this.configuration.httpApi.send(ctx))).\n            pipe(mergeMap((response: ResponseContext) => {\n                let middlewarePostObservable = of(response);\n                for (let middleware of this.configuration.middleware) {\n                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));\n                }\n                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.v1ApplicationGet(rsp)));\n            }));\n    }\n \n    /**\n     * Get basic statistics for the application\n     * Get App Stats\n     * @param since Filter the range to data starting from this date\n     * @param until Filter the range to data ending by this date\n     * @param appId The app&#39;s ID or UID\n     */\n    public v1ApplicationGetStats(since: Date, until: Date, appId: string, _options?: Configuration): Observable<ApplicationStats> {\n        const requestContextPromise = this.requestFactory.v1ApplicationGetStats(since, until, appId, _options);\n\n        // build promise chain\n        let middlewarePreObservable = from<RequestContext>(requestContextPromise);\n        for (let middleware of this.configuration.middleware) {\n            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));\n        }\n\n        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => this.configuration.httpApi.send(ctx))).\n            pipe(mergeMap((response: ResponseContext) => {\n                let middlewarePostObservable = of(response);\n                for (let middleware of this.configuration.middleware) {\n                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));\n                }\n                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.v1ApplicationGetStats(rsp)));\n            }));\n    }\n \n    /**\n     * List of all the organization's applications.\n     * List Applications\n     * @param limit Limit the number of returned items\n     * @param iterator The iterator returned from a prior invocation\n     * @param order The sorting order of the returned items\n     */\n    public v1ApplicationList(limit?: number, iterator?: string, order?: Ordering, _options?: Configuration): Observable<ListResponseApplicationOut> {\n        const requestContextPromise = this.requestFactory.v1ApplicationList(limit, iterator, order, _options);\n\n        // build promise chain\n        let middlewarePreObservable = from<RequestContext>(requestContextPromise);\n        for (let middleware of this.configuration.middleware) {\n            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));\n        }\n\n        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => this.configuration.httpApi.send(ctx))).\n            pipe(mergeMap((response: ResponseContext) => {\n                let middlewarePostObservable = of(response);\n                for (let middleware of this.configuration.middleware) {\n                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));\n                }\n                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.v1ApplicationList(rsp)));\n            }));\n    }\n \n    /**\n     * Partially update an application.\n     * Patch Application\n     * @param appId The app&#39;s ID or UID\n     * @param applicationPatch \n     */\n    public v1ApplicationPatch(appId: string, applicationPatch: ApplicationPatch, _options?: Configuration): Observable<ApplicationOut> {\n        const requestContextPromise = this.requestFactory.v1ApplicationPatch(appId, applicationPatch, _options);\n\n        // build promise chain\n        let middlewarePreObservable = from<RequestContext>(requestContextPromise);\n        for (let middleware of this.configuration.middleware) {\n            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));\n        }\n\n        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => this.configuration.httpApi.send(ctx))).\n            pipe(mergeMap((response: ResponseContext) => {\n                let middlewarePostObservable = of(response);\n                for (let middleware of this.configuration.middleware) {\n                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));\n                }\n                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.v1ApplicationPatch(rsp)));\n            }));\n    }\n \n    /**\n     * Update an application.\n     * Update Application\n     * @param appId The app&#39;s ID or UID\n     * @param applicationIn \n     */\n    public v1ApplicationUpdate(appId: string, applicationIn: ApplicationIn, _options?: Configuration): Observable<ApplicationOut> {\n        const requestContextPromise = this.requestFactory.v1ApplicationUpdate(appId, applicationIn, _options);\n\n        // build promise chain\n        let middlewarePreObservable = from<RequestContext>(requestContextPromise);\n        for (let middleware of this.configuration.middleware) {\n            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));\n        }\n\n        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => this.configuration.httpApi.send(ctx))).\n            pipe(mergeMap((response: ResponseContext) => {\n                let middlewarePostObservable = of(response);\n                for (let middleware of this.configuration.middleware) {\n                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));\n                }\n                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.v1ApplicationUpdate(rsp)));\n            }));\n    }\n \n}\n\nimport { AuthenticationApiRequestFactory, AuthenticationApiResponseProcessor} from \"../apis/AuthenticationApi\";\nexport class ObservableAuthenticationApi {\n    private requestFactory: AuthenticationApiRequestFactory;\n    private responseProcessor: AuthenticationApiResponseProcessor;\n    private configuration: Configuration;\n\n    public constructor(\n        configuration: Configuration,\n        requestFactory?: AuthenticationApiRequestFactory,\n        responseProcessor?: AuthenticationApiResponseProcessor\n    ) {\n        this.configuration = configuration;\n        this.requestFactory = requestFactory || new AuthenticationApiRequestFactory(configuration);\n        this.responseProcessor = responseProcessor || new AuthenticationApiResponseProcessor();\n    }\n\n    /**\n     * Use this function to get magic links (and authentication codes) for connecting your users to the Consumer Application Portal.\n     * Get Consumer App Portal Access\n     * @param appId The app&#39;s ID or UID\n     * @param appPortalAccessIn \n     * @param idempotencyKey The request&#39;s idempotency key\n     */\n    public v1AuthenticationAppPortalAccess(appId: string, appPortalAccessIn: AppPortalAccessIn, idempotencyKey?: string, _options?: Configuration): Observable<AppPortalAccessOut> {\n        const requestContextPromise = this.requestFactory.v1AuthenticationAppPortalAccess(appId, appPortalAccessIn, idempotencyKey, _options);\n\n        // build promise chain\n        let middlewarePreObservable = from<RequestContext>(requestContextPromise);\n        for (let middleware of this.configuration.middleware) {\n            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));\n        }\n\n        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => this.configuration.httpApi.send(ctx))).\n            pipe(mergeMap((response: ResponseContext) => {\n                let middlewarePostObservable = of(response);\n                for (let middleware of this.configuration.middleware) {\n                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));\n                }\n                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.v1AuthenticationAppPortalAccess(rsp)));\n            }));\n    }\n \n    /**\n     * Create a new access token that only allows creating messages inside this application.\n     * Create Cmg Token\n     * @param appId The app&#39;s ID or UID\n     * @param createMessageTokenIn \n     * @param idempotencyKey The request&#39;s idempotency key\n     */\n    public v1AuthenticationCreateMessageToken(appId: string, createMessageTokenIn: CreateMessageTokenIn, idempotencyKey?: string, _options?: Configuration): Observable<AuthTokenOut> {\n        const requestContextPromise = this.requestFactory.v1AuthenticationCreateMessageToken(appId, createMessageTokenIn, idempotencyKey, _options);\n\n        // build promise chain\n        let middlewarePreObservable = from<RequestContext>(requestContextPromise);\n        for (let middleware of this.configuration.middleware) {\n            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));\n        }\n\n        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => this.configuration.httpApi.send(ctx))).\n            pipe(mergeMap((response: ResponseContext) => {\n                let middlewarePostObservable = of(response);\n                for (let middleware of this.configuration.middleware) {\n                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));\n                }\n                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.v1AuthenticationCreateMessageToken(rsp)));\n            }));\n    }\n \n    /**\n     * DEPRECATED: Please use `app-portal-access` instead.  Use this function to get magic links (and authentication codes) for connecting your users to the Consumer Application Portal.\n     * Dashboard Access\n     * @param appId The app&#39;s ID or UID\n     * @param idempotencyKey The request&#39;s idempotency key\n     */\n    public v1AuthenticationDashboardAccess(appId: string, idempotencyKey?: string, _options?: Configuration): Observable<DashboardAccessOut> {\n        const requestContextPromise = this.requestFactory.v1AuthenticationDashboardAccess(appId, idempotencyKey, _options);\n\n        // build promise chain\n        let middlewarePreObservable = from<RequestContext>(requestContextPromise);\n        for (let middleware of this.configuration.middleware) {\n            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));\n        }\n\n        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => this.configuration.httpApi.send(ctx))).\n            pipe(mergeMap((response: ResponseContext) => {\n                let middlewarePostObservable = of(response);\n                for (let middleware of this.configuration.middleware) {\n                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));\n                }\n                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.v1AuthenticationDashboardAccess(rsp)));\n            }));\n    }\n \n    /**\n     * This is a one time token\n     * Exchange One Time Token\n     * @param oneTimeTokenIn \n     * @param idempotencyKey The request&#39;s idempotency key\n     */\n    public v1AuthenticationExchangeOneTimeToken(oneTimeTokenIn: OneTimeTokenIn, idempotencyKey?: string, _options?: Configuration): Observable<OneTimeTokenOut> {\n        const requestContextPromise = this.requestFactory.v1AuthenticationExchangeOneTimeToken(oneTimeTokenIn, idempotencyKey, _options);\n\n        // build promise chain\n        let middlewarePreObservable = from<RequestContext>(requestContextPromise);\n        for (let middleware of this.configuration.middleware) {\n            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));\n        }\n\n        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => this.configuration.httpApi.send(ctx))).\n            pipe(mergeMap((response: ResponseContext) => {\n                let middlewarePostObservable = of(response);\n                for (let middleware of this.configuration.middleware) {\n                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));\n                }\n                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.v1AuthenticationExchangeOneTimeToken(rsp)));\n            }));\n    }\n \n    /**\n     * Expire all of the tokens associated with a specific Application\n     * Expire All\n     * @param appId The app&#39;s ID or UID\n     * @param applicationTokenExpireIn \n     * @param idempotencyKey The request&#39;s idempotency key\n     */\n    public v1AuthenticationExpireAll(appId: string, applicationTokenExpireIn: ApplicationTokenExpireIn, idempotencyKey?: string, _options?: Configuration): Observable<void> {\n        const requestContextPromise = this.requestFactory.v1AuthenticationExpireAll(appId, applicationTokenExpireIn, idempotencyKey, _options);\n\n        // build promise chain\n        let middlewarePreObservable = from<RequestContext>(requestContextPromise);\n        for (let middleware of this.configuration.middleware) {\n            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));\n        }\n\n        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => this.configuration.httpApi.send(ctx))).\n            pipe(mergeMap((response: ResponseContext) => {\n                let middlewarePostObservable = of(response);\n                for (let middleware of this.configuration.middleware) {\n                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));\n                }\n                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.v1AuthenticationExpireAll(rsp)));\n            }));\n    }\n \n    /**\n     * Logout an app token.  Trying to log out other tokens will fail.\n     * Logout\n     * @param idempotencyKey The request&#39;s idempotency key\n     */\n    public v1AuthenticationLogout(idempotencyKey?: string, _options?: Configuration): Observable<void> {\n        const requestContextPromise = this.requestFactory.v1AuthenticationLogout(idempotencyKey, _options);\n\n        // build promise chain\n        let middlewarePreObservable = from<RequestContext>(requestContextPromise);\n        for (let middleware of this.configuration.middleware) {\n            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));\n        }\n\n        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => this.configuration.httpApi.send(ctx))).\n            pipe(mergeMap((response: ResponseContext) => {\n                let middlewarePostObservable = of(response);\n                for (let middleware of this.configuration.middleware) {\n                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));\n                }\n                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.v1AuthenticationLogout(rsp)));\n            }));\n    }\n \n}\n\nimport { BackgroundTasksApiRequestFactory, BackgroundTasksApiResponseProcessor} from \"../apis/BackgroundTasksApi\";\nexport class ObservableBackgroundTasksApi {\n    private requestFactory: BackgroundTasksApiRequestFactory;\n    private responseProcessor: BackgroundTasksApiResponseProcessor;\n    private configuration: Configuration;\n\n    public constructor(\n        configuration: Configuration,\n        requestFactory?: BackgroundTasksApiRequestFactory,\n        responseProcessor?: BackgroundTasksApiResponseProcessor\n    ) {\n        this.configuration = configuration;\n        this.requestFactory = requestFactory || new BackgroundTasksApiRequestFactory(configuration);\n        this.responseProcessor = responseProcessor || new BackgroundTasksApiResponseProcessor();\n    }\n\n    /**\n     * Get a background task by ID.\n     * Get Background Task\n     * @param taskId \n     */\n    public getBackgroundTask(taskId: string, _options?: Configuration): Observable<BackgroundTaskOut> {\n        const requestContextPromise = this.requestFactory.getBackgroundTask(taskId, _options);\n\n        // build promise chain\n        let middlewarePreObservable = from<RequestContext>(requestContextPromise);\n        for (let middleware of this.configuration.middleware) {\n            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));\n        }\n\n        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => this.configuration.httpApi.send(ctx))).\n            pipe(mergeMap((response: ResponseContext) => {\n                let middlewarePostObservable = of(response);\n                for (let middleware of this.configuration.middleware) {\n                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));\n                }\n                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.getBackgroundTask(rsp)));\n            }));\n    }\n \n    /**\n     * List background tasks executed in the past 90 days.\n     * List Background Tasks\n     * @param status Filter the response based on the status\n     * @param task Filter the response based on the type\n     * @param limit Limit the number of returned items\n     * @param iterator The iterator returned from a prior invocation\n     * @param order The sorting order of the returned items\n     */\n    public listBackgroundTasks(status?: BackgroundTaskStatus, task?: BackgroundTaskType, limit?: number, iterator?: string, order?: Ordering, _options?: Configuration): Observable<ListResponseBackgroundTaskOut> {\n        const requestContextPromise = this.requestFactory.listBackgroundTasks(status, task, limit, iterator, order, _options);\n\n        // build promise chain\n        let middlewarePreObservable = from<RequestContext>(requestContextPromise);\n        for (let middleware of this.configuration.middleware) {\n            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));\n        }\n\n        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => this.configuration.httpApi.send(ctx))).\n            pipe(mergeMap((response: ResponseContext) => {\n                let middlewarePostObservable = of(response);\n                for (let middleware of this.configuration.middleware) {\n                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));\n                }\n                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.listBackgroundTasks(rsp)));\n            }));\n    }\n \n}\n\nimport { BroadcastApiRequestFactory, BroadcastApiResponseProcessor} from \"../apis/BroadcastApi\";\nexport class ObservableBroadcastApi {\n    private requestFactory: BroadcastApiRequestFactory;\n    private responseProcessor: BroadcastApiResponseProcessor;\n    private configuration: Configuration;\n\n    public constructor(\n        configuration: Configuration,\n        requestFactory?: BroadcastApiRequestFactory,\n        responseProcessor?: BroadcastApiResponseProcessor\n    ) {\n        this.configuration = configuration;\n        this.requestFactory = requestFactory || new BroadcastApiRequestFactory(configuration);\n        this.responseProcessor = responseProcessor || new BroadcastApiResponseProcessor();\n    }\n\n    /**\n     * Creates a background task to send the same message to each application in your organization\n     * Create Broadcast Message\n     * @param messageBroadcastIn \n     * @param idempotencyKey The request&#39;s idempotency key\n     */\n    public createBroadcastMessage(messageBroadcastIn: MessageBroadcastIn, idempotencyKey?: string, _options?: Configuration): Observable<MessageBroadcastOut> {\n        const requestContextPromise = this.requestFactory.createBroadcastMessage(messageBroadcastIn, idempotencyKey, _options);\n\n        // build promise chain\n        let middlewarePreObservable = from<RequestContext>(requestContextPromise);\n        for (let middleware of this.configuration.middleware) {\n            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));\n        }\n\n        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => this.configuration.httpApi.send(ctx))).\n            pipe(mergeMap((response: ResponseContext) => {\n                let middlewarePostObservable = of(response);\n                for (let middleware of this.configuration.middleware) {\n                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));\n                }\n                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.createBroadcastMessage(rsp)));\n            }));\n    }\n \n}\n\nimport { EndpointApiRequestFactory, EndpointApiResponseProcessor} from \"../apis/EndpointApi\";\nexport class ObservableEndpointApi {\n    private requestFactory: EndpointApiRequestFactory;\n    private responseProcessor: EndpointApiResponseProcessor;\n    private configuration: Configuration;\n\n    public constructor(\n        configuration: Configuration,\n        requestFactory?: EndpointApiRequestFactory,\n        responseProcessor?: EndpointApiResponseProcessor\n    ) {\n        this.configuration = configuration;\n        this.requestFactory = requestFactory || new EndpointApiRequestFactory(configuration);\n        this.responseProcessor = responseProcessor || new EndpointApiResponseProcessor();\n    }\n\n    /**\n     * Create a new endpoint for the application.  When `secret` is `null` the secret is automatically generated (recommended)\n     * Create Endpoint\n     * @param appId The app&#39;s ID or UID\n     * @param endpointIn \n     * @param idempotencyKey The request&#39;s idempotency key\n     */\n    public v1EndpointCreate(appId: string, endpointIn: EndpointIn, idempotencyKey?: string, _options?: Configuration): Observable<EndpointOut> {\n        const requestContextPromise = this.requestFactory.v1EndpointCreate(appId, endpointIn, idempotencyKey, _options);\n\n        // build promise chain\n        let middlewarePreObservable = from<RequestContext>(requestContextPromise);\n        for (let middleware of this.configuration.middleware) {\n            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));\n        }\n\n        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => this.configuration.httpApi.send(ctx))).\n            pipe(mergeMap((response: ResponseContext) => {\n                let middlewarePostObservable = of(response);\n                for (let middleware of this.configuration.middleware) {\n                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));\n                }\n                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.v1EndpointCreate(rsp)));\n            }));\n    }\n \n    /**\n     * Delete an endpoint.\n     * Delete Endpoint\n     * @param appId The app&#39;s ID or UID\n     * @param endpointId The ep&#39;s ID or UID\n     */\n    public v1EndpointDelete(appId: string, endpointId: string, _options?: Configuration): Observable<void> {\n        const requestContextPromise = this.requestFactory.v1EndpointDelete(appId, endpointId, _options);\n\n        // build promise chain\n        let middlewarePreObservable = from<RequestContext>(requestContextPromise);\n        for (let middleware of this.configuration.middleware) {\n            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));\n        }\n\n        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => this.configuration.httpApi.send(ctx))).\n            pipe(mergeMap((response: ResponseContext) => {\n                let middlewarePostObservable = of(response);\n                for (let middleware of this.configuration.middleware) {\n                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));\n                }\n                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.v1EndpointDelete(rsp)));\n            }));\n    }\n \n    /**\n     * Delete endpoint mTLS configuration\n     * Delete Endpoint Mtls Config\n     * @param appId The app&#39;s ID or UID\n     * @param endpointId The ep&#39;s ID or UID\n     */\n    public v1EndpointDeleteMtlsConfig(appId: string, endpointId: string, _options?: Configuration): Observable<void> {\n        const requestContextPromise = this.requestFactory.v1EndpointDeleteMtlsConfig(appId, endpointId, _options);\n\n        // build promise chain\n        let middlewarePreObservable = from<RequestContext>(requestContextPromise);\n        for (let middleware of this.configuration.middleware) {\n            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));\n        }\n\n        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => this.configuration.httpApi.send(ctx))).\n            pipe(mergeMap((response: ResponseContext) => {\n                let middlewarePostObservable = of(response);\n                for (let middleware of this.configuration.middleware) {\n                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));\n                }\n                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.v1EndpointDeleteMtlsConfig(rsp)));\n            }));\n    }\n \n    /**\n     * Delete endpoint OAuth configuration\n     * Delete Endpoint Oauth Config\n     * @param appId The app&#39;s ID or UID\n     * @param endpointId The ep&#39;s ID or UID\n     */\n    public v1EndpointDeleteOauthConfig(appId: string, endpointId: string, _options?: Configuration): Observable<void> {\n        const requestContextPromise = this.requestFactory.v1EndpointDeleteOauthConfig(appId, endpointId, _options);\n\n        // build promise chain\n        let middlewarePreObservable = from<RequestContext>(requestContextPromise);\n        for (let middleware of this.configuration.middleware) {\n            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));\n        }\n\n        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => this.configuration.httpApi.send(ctx))).\n            pipe(mergeMap((response: ResponseContext) => {\n                let middlewarePostObservable = of(response);\n                for (let middleware of this.configuration.middleware) {\n                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));\n                }\n                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.v1EndpointDeleteOauthConfig(rsp)));\n            }));\n    }\n \n    /**\n     * Get an endpoint.\n     * Get Endpoint\n     * @param appId The app&#39;s ID or UID\n     * @param endpointId The ep&#39;s ID or UID\n     */\n    public v1EndpointGet(appId: string, endpointId: string, _options?: Configuration): Observable<EndpointOut> {\n        const requestContextPromise = this.requestFactory.v1EndpointGet(appId, endpointId, _options);\n\n        // build promise chain\n        let middlewarePreObservable = from<RequestContext>(requestContextPromise);\n        for (let middleware of this.configuration.middleware) {\n            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));\n        }\n\n        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => this.configuration.httpApi.send(ctx))).\n            pipe(mergeMap((response: ResponseContext) => {\n                let middlewarePostObservable = of(response);\n                for (let middleware of this.configuration.middleware) {\n                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));\n                }\n                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.v1EndpointGet(rsp)));\n            }));\n    }\n \n    /**\n     * Get the additional headers to be sent with the webhook\n     * Get Endpoint Headers\n     * @param appId The app&#39;s ID or UID\n     * @param endpointId The ep&#39;s ID or UID\n     */\n    public v1EndpointGetHeaders(appId: string, endpointId: string, _options?: Configuration): Observable<EndpointHeadersOut> {\n        const requestContextPromise = this.requestFactory.v1EndpointGetHeaders(appId, endpointId, _options);\n\n        // build promise chain\n        let middlewarePreObservable = from<RequestContext>(requestContextPromise);\n        for (let middleware of this.configuration.middleware) {\n            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));\n        }\n\n        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => this.configuration.httpApi.send(ctx))).\n            pipe(mergeMap((response: ResponseContext) => {\n                let middlewarePostObservable = of(response);\n                for (let middleware of this.configuration.middleware) {\n                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));\n                }\n                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.v1EndpointGetHeaders(rsp)));\n            }));\n    }\n \n    /**\n     * Get the endpoint's signing secret.  This is used to verify the authenticity of the webhook. For more information please refer to [the consuming webhooks docs](https://docs.svix.com/consuming-webhooks/).\n     * Get Endpoint Secret\n     * @param appId The app&#39;s ID or UID\n     * @param endpointId The ep&#39;s ID or UID\n     */\n    public v1EndpointGetSecret(appId: string, endpointId: string, _options?: Configuration): Observable<EndpointSecretOut> {\n        const requestContextPromise = this.requestFactory.v1EndpointGetSecret(appId, endpointId, _options);\n\n        // build promise chain\n        let middlewarePreObservable = from<RequestContext>(requestContextPromise);\n        for (let middleware of this.configuration.middleware) {\n            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));\n        }\n\n        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => this.configuration.httpApi.send(ctx))).\n            pipe(mergeMap((response: ResponseContext) => {\n                let middlewarePostObservable = of(response);\n                for (let middleware of this.configuration.middleware) {\n                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));\n                }\n                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.v1EndpointGetSecret(rsp)));\n            }));\n    }\n \n    /**\n     * Get basic statistics for the endpoint.\n     * Endpoint Stats\n     * @param appId The app&#39;s ID or UID\n     * @param endpointId The ep&#39;s ID or UID\n     * @param since Filter the range to data starting from this date\n     * @param until Filter the range to data ending by this date\n     */\n    public v1EndpointGetStats(appId: string, endpointId: string, since?: Date, until?: Date, _options?: Configuration): Observable<EndpointStats> {\n        const requestContextPromise = this.requestFactory.v1EndpointGetStats(appId, endpointId, since, until, _options);\n\n        // build promise chain\n        let middlewarePreObservable = from<RequestContext>(requestContextPromise);\n        for (let middleware of this.configuration.middleware) {\n            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));\n        }\n\n        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => this.configuration.httpApi.send(ctx))).\n            pipe(mergeMap((response: ResponseContext) => {\n                let middlewarePostObservable = of(response);\n                for (let middleware of this.configuration.middleware) {\n                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));\n                }\n                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.v1EndpointGetStats(rsp)));\n            }));\n    }\n \n    /**\n     * List the application's endpoints.\n     * List Endpoints\n     * @param appId The app&#39;s ID or UID\n     * @param limit Limit the number of returned items\n     * @param iterator The iterator returned from a prior invocation\n     * @param order The sorting order of the returned items\n     */\n    public v1EndpointList(appId: string, limit?: number, iterator?: string, order?: Ordering, _options?: Configuration): Observable<ListResponseEndpointOut> {\n        const requestContextPromise = this.requestFactory.v1EndpointList(appId, limit, iterator, order, _options);\n\n        // build promise chain\n        let middlewarePreObservable = from<RequestContext>(requestContextPromise);\n        for (let middleware of this.configuration.middleware) {\n            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));\n        }\n\n        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => this.configuration.httpApi.send(ctx))).\n            pipe(mergeMap((response: ResponseContext) => {\n                let middlewarePostObservable = of(response);\n                for (let middleware of this.configuration.middleware) {\n                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));\n                }\n                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.v1EndpointList(rsp)));\n            }));\n    }\n \n    /**\n     * Partially update an endpoint.\n     * Patch Endpoint\n     * @param appId The app&#39;s ID or UID\n     * @param endpointId The ep&#39;s ID or UID\n     * @param endpointPatch \n     */\n    public v1EndpointPatch(appId: string, endpointId: string, endpointPatch: EndpointPatch, _options?: Configuration): Observable<EndpointOut> {\n        const requestContextPromise = this.requestFactory.v1EndpointPatch(appId, endpointId, endpointPatch, _options);\n\n        // build promise chain\n        let middlewarePreObservable = from<RequestContext>(requestContextPromise);\n        for (let middleware of this.configuration.middleware) {\n            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));\n        }\n\n        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => this.configuration.httpApi.send(ctx))).\n            pipe(mergeMap((response: ResponseContext) => {\n                let middlewarePostObservable = of(response);\n                for (let middleware of this.configuration.middleware) {\n                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));\n                }\n                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.v1EndpointPatch(rsp)));\n            }));\n    }\n \n    /**\n     * Partially set the additional headers to be sent with the webhook\n     * Patch Endpoint Headers\n     * @param appId The app&#39;s ID or UID\n     * @param endpointId The ep&#39;s ID or UID\n     * @param endpointHeadersPatchIn \n     */\n    public v1EndpointPatchHeaders(appId: string, endpointId: string, endpointHeadersPatchIn: EndpointHeadersPatchIn, _options?: Configuration): Observable<void> {\n        const requestContextPromise = this.requestFactory.v1EndpointPatchHeaders(appId, endpointId, endpointHeadersPatchIn, _options);\n\n        // build promise chain\n        let middlewarePreObservable = from<RequestContext>(requestContextPromise);\n        for (let middleware of this.configuration.middleware) {\n            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));\n        }\n\n        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => this.configuration.httpApi.send(ctx))).\n            pipe(mergeMap((response: ResponseContext) => {\n                let middlewarePostObservable = of(response);\n                for (let middleware of this.configuration.middleware) {\n                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));\n                }\n                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.v1EndpointPatchHeaders(rsp)));\n            }));\n    }\n \n    /**\n     * Resend all failed messages since a given time.\n     * Recover Failed Webhooks\n     * @param appId The app&#39;s ID or UID\n     * @param endpointId The ep&#39;s ID or UID\n     * @param recoverIn \n     * @param idempotencyKey The request&#39;s idempotency key\n     */\n    public v1EndpointRecover(appId: string, endpointId: string, recoverIn: RecoverIn, idempotencyKey?: string, _options?: Configuration): Observable<RecoverOut> {\n        const requestContextPromise = this.requestFactory.v1EndpointRecover(appId, endpointId, recoverIn, idempotencyKey, _options);\n\n        // build promise chain\n        let middlewarePreObservable = from<RequestContext>(requestContextPromise);\n        for (let middleware of this.configuration.middleware) {\n            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));\n        }\n\n        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => this.configuration.httpApi.send(ctx))).\n            pipe(mergeMap((response: ResponseContext) => {\n                let middlewarePostObservable = of(response);\n                for (let middleware of this.configuration.middleware) {\n                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));\n                }\n                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.v1EndpointRecover(rsp)));\n            }));\n    }\n \n    /**\n     * Replays messages to the endpoint. Only messages that were created after `since` will be sent. Messages that were previously sent to the endpoint are not resent.\n     * Replay Missing Webhooks\n     * @param appId The app&#39;s ID or UID\n     * @param endpointId The ep&#39;s ID or UID\n     * @param replayIn \n     * @param idempotencyKey The request&#39;s idempotency key\n     */\n    public v1EndpointReplay(appId: string, endpointId: string, replayIn: ReplayIn, idempotencyKey?: string, _options?: Configuration): Observable<ReplayOut> {\n        const requestContextPromise = this.requestFactory.v1EndpointReplay(appId, endpointId, replayIn, idempotencyKey, _options);\n\n        // build promise chain\n        let middlewarePreObservable = from<RequestContext>(requestContextPromise);\n        for (let middleware of this.configuration.middleware) {\n            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));\n        }\n\n        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => this.configuration.httpApi.send(ctx))).\n            pipe(mergeMap((response: ResponseContext) => {\n                let middlewarePostObservable = of(response);\n                for (let middleware of this.configuration.middleware) {\n                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));\n                }\n                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.v1EndpointReplay(rsp)));\n            }));\n    }\n \n    /**\n     * Rotates the endpoint's signing secret.  The previous secret will be valid for the next 24 hours.\n     * Rotate Endpoint Secret\n     * @param appId The app&#39;s ID or UID\n     * @param endpointId The ep&#39;s ID or UID\n     * @param endpointSecretRotateIn \n     * @param idempotencyKey The request&#39;s idempotency key\n     */\n    public v1EndpointRotateSecret(appId: string, endpointId: string, endpointSecretRotateIn: EndpointSecretRotateIn, idempotencyKey?: string, _options?: Configuration): Observable<void> {\n        const requestContextPromise = this.requestFactory.v1EndpointRotateSecret(appId, endpointId, endpointSecretRotateIn, idempotencyKey, _options);\n\n        // build promise chain\n        let middlewarePreObservable = from<RequestContext>(requestContextPromise);\n        for (let middleware of this.configuration.middleware) {\n            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));\n        }\n\n        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => this.configuration.httpApi.send(ctx))).\n            pipe(mergeMap((response: ResponseContext) => {\n                let middlewarePostObservable = of(response);\n                for (let middleware of this.configuration.middleware) {\n                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));\n                }\n                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.v1EndpointRotateSecret(rsp)));\n            }));\n    }\n \n    /**\n     * Send an example message for an event\n     * Send Event Type Example Message\n     * @param appId The app&#39;s ID or UID\n     * @param endpointId The ep&#39;s ID or UID\n     * @param eventExampleIn \n     * @param idempotencyKey The request&#39;s idempotency key\n     */\n    public v1EndpointSendExample(appId: string, endpointId: string, eventExampleIn: EventExampleIn, idempotencyKey?: string, _options?: Configuration): Observable<MessageOut> {\n        const requestContextPromise = this.requestFactory.v1EndpointSendExample(appId, endpointId, eventExampleIn, idempotencyKey, _options);\n\n        // build promise chain\n        let middlewarePreObservable = from<RequestContext>(requestContextPromise);\n        for (let middleware of this.configuration.middleware) {\n            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));\n        }\n\n        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => this.configuration.httpApi.send(ctx))).\n            pipe(mergeMap((response: ResponseContext) => {\n                let middlewarePostObservable = of(response);\n                for (let middleware of this.configuration.middleware) {\n                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));\n                }\n                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.v1EndpointSendExample(rsp)));\n            }));\n    }\n \n    /**\n     * Get the transformation code associated with this endpoint\n     * Get Endpoint Transformation\n     * @param appId The app&#39;s ID or UID\n     * @param endpointId The ep&#39;s ID or UID\n     */\n    public v1EndpointTransformationGet(appId: string, endpointId: string, _options?: Configuration): Observable<EndpointTransformationOut> {\n        const requestContextPromise = this.requestFactory.v1EndpointTransformationGet(appId, endpointId, _options);\n\n        // build promise chain\n        let middlewarePreObservable = from<RequestContext>(requestContextPromise);\n        for (let middleware of this.configuration.middleware) {\n            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));\n        }\n\n        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => this.configuration.httpApi.send(ctx))).\n            pipe(mergeMap((response: ResponseContext) => {\n                let middlewarePostObservable = of(response);\n                for (let middleware of this.configuration.middleware) {\n                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));\n                }\n                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.v1EndpointTransformationGet(rsp)));\n            }));\n    }\n \n    /**\n     * Set or unset the transformation code associated with this endpoint\n     * Set Endpoint Transformation\n     * @param appId The app&#39;s ID or UID\n     * @param endpointId The ep&#39;s ID or UID\n     * @param endpointTransformationIn \n     */\n    public v1EndpointTransformationPartialUpdate(appId: string, endpointId: string, endpointTransformationIn: EndpointTransformationIn, _options?: Configuration): Observable<void> {\n        const requestContextPromise = this.requestFactory.v1EndpointTransformationPartialUpdate(appId, endpointId, endpointTransformationIn, _options);\n\n        // build promise chain\n        let middlewarePreObservable = from<RequestContext>(requestContextPromise);\n        for (let middleware of this.configuration.middleware) {\n            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));\n        }\n\n        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => this.configuration.httpApi.send(ctx))).\n            pipe(mergeMap((response: ResponseContext) => {\n                let middlewarePostObservable = of(response);\n                for (let middleware of this.configuration.middleware) {\n                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));\n                }\n                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.v1EndpointTransformationPartialUpdate(rsp)));\n            }));\n    }\n \n    /**\n     * Simulate running the transformation on the payload and code\n     * Simulate\n     * @param appId The app&#39;s ID or UID\n     * @param endpointId The ep&#39;s ID or UID\n     * @param endpointTransformationSimulateIn \n     * @param idempotencyKey The request&#39;s idempotency key\n     */\n    public v1EndpointTransformationSimulate(appId: string, endpointId: string, endpointTransformationSimulateIn: EndpointTransformationSimulateIn, idempotencyKey?: string, _options?: Configuration): Observable<EndpointTransformationSimulateOut> {\n        const requestContextPromise = this.requestFactory.v1EndpointTransformationSimulate(appId, endpointId, endpointTransformationSimulateIn, idempotencyKey, _options);\n\n        // build promise chain\n        let middlewarePreObservable = from<RequestContext>(requestContextPromise);\n        for (let middleware of this.configuration.middleware) {\n            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));\n        }\n\n        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => this.configuration.httpApi.send(ctx))).\n            pipe(mergeMap((response: ResponseContext) => {\n                let middlewarePostObservable = of(response);\n                for (let middleware of this.configuration.middleware) {\n                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));\n                }\n                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.v1EndpointTransformationSimulate(rsp)));\n            }));\n    }\n \n    /**\n     * Update an endpoint.\n     * Update Endpoint\n     * @param appId The app&#39;s ID or UID\n     * @param endpointId The ep&#39;s ID or UID\n     * @param endpointUpdate \n     */\n    public v1EndpointUpdate(appId: string, endpointId: string, endpointUpdate: EndpointUpdate, _options?: Configuration): Observable<EndpointOut> {\n        const requestContextPromise = this.requestFactory.v1EndpointUpdate(appId, endpointId, endpointUpdate, _options);\n\n        // build promise chain\n        let middlewarePreObservable = from<RequestContext>(requestContextPromise);\n        for (let middleware of this.configuration.middleware) {\n            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));\n        }\n\n        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => this.configuration.httpApi.send(ctx))).\n            pipe(mergeMap((response: ResponseContext) => {\n                let middlewarePostObservable = of(response);\n                for (let middleware of this.configuration.middleware) {\n                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));\n                }\n                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.v1EndpointUpdate(rsp)));\n            }));\n    }\n \n    /**\n     * Set the additional headers to be sent with the webhook\n     * Update Endpoint Headers\n     * @param appId The app&#39;s ID or UID\n     * @param endpointId The ep&#39;s ID or UID\n     * @param endpointHeadersIn \n     */\n    public v1EndpointUpdateHeaders(appId: string, endpointId: string, endpointHeadersIn: EndpointHeadersIn, _options?: Configuration): Observable<void> {\n        const requestContextPromise = this.requestFactory.v1EndpointUpdateHeaders(appId, endpointId, endpointHeadersIn, _options);\n\n        // build promise chain\n        let middlewarePreObservable = from<RequestContext>(requestContextPromise);\n        for (let middleware of this.configuration.middleware) {\n            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));\n        }\n\n        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => this.configuration.httpApi.send(ctx))).\n            pipe(mergeMap((response: ResponseContext) => {\n                let middlewarePostObservable = of(response);\n                for (let middleware of this.configuration.middleware) {\n                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));\n                }\n                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.v1EndpointUpdateHeaders(rsp)));\n            }));\n    }\n \n    /**\n     * Create/update endpoint mTLS configuration\n     * Update Endpoint Mtls Config\n     * @param appId The app&#39;s ID or UID\n     * @param endpointId The ep&#39;s ID or UID\n     * @param endpointMtlsConfigIn \n     */\n    public v1EndpointUpdateMtlsConfig(appId: string, endpointId: string, endpointMtlsConfigIn: EndpointMtlsConfigIn, _options?: Configuration): Observable<void> {\n        const requestContextPromise = this.requestFactory.v1EndpointUpdateMtlsConfig(appId, endpointId, endpointMtlsConfigIn, _options);\n\n        // build promise chain\n        let middlewarePreObservable = from<RequestContext>(requestContextPromise);\n        for (let middleware of this.configuration.middleware) {\n            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));\n        }\n\n        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => this.configuration.httpApi.send(ctx))).\n            pipe(mergeMap((response: ResponseContext) => {\n                let middlewarePostObservable = of(response);\n                for (let middleware of this.configuration.middleware) {\n                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));\n                }\n                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.v1EndpointUpdateMtlsConfig(rsp)));\n            }));\n    }\n \n    /**\n     * Create/update endpoint OAuth configuration\n     * Update Endpoint Oauth Config\n     * @param appId The app&#39;s ID or UID\n     * @param endpointId The ep&#39;s ID or UID\n     * @param endpointOauthConfigIn \n     */\n    public v1EndpointUpdateOauthConfig(appId: string, endpointId: string, endpointOauthConfigIn: EndpointOauthConfigIn, _options?: Configuration): Observable<void> {\n        const requestContextPromise = this.requestFactory.v1EndpointUpdateOauthConfig(appId, endpointId, endpointOauthConfigIn, _options);\n\n        // build promise chain\n        let middlewarePreObservable = from<RequestContext>(requestContextPromise);\n        for (let middleware of this.configuration.middleware) {\n            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));\n        }\n\n        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => this.configuration.httpApi.send(ctx))).\n            pipe(mergeMap((response: ResponseContext) => {\n                let middlewarePostObservable = of(response);\n                for (let middleware of this.configuration.middleware) {\n                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));\n                }\n                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.v1EndpointUpdateOauthConfig(rsp)));\n            }));\n    }\n \n    /**\n     * Create a new sink for the application.\n     * Create Sink\n     * @param appId The app&#39;s ID or UID\n     * @param sinkIn \n     * @param idempotencyKey The request&#39;s idempotency key\n     */\n    public v1SinkCreate(appId: string, sinkIn: SinkIn, idempotencyKey?: string, _options?: Configuration): Observable<SinkOut> {\n        const requestContextPromise = this.requestFactory.v1SinkCreate(appId, sinkIn, idempotencyKey, _options);\n\n        // build promise chain\n        let middlewarePreObservable = from<RequestContext>(requestContextPromise);\n        for (let middleware of this.configuration.middleware) {\n            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));\n        }\n\n        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => this.configuration.httpApi.send(ctx))).\n            pipe(mergeMap((response: ResponseContext) => {\n                let middlewarePostObservable = of(response);\n                for (let middleware of this.configuration.middleware) {\n                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));\n                }\n                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.v1SinkCreate(rsp)));\n            }));\n    }\n \n    /**\n     * Get a sink.\n     * Get Sink\n     * @param appId The app&#39;s ID or UID\n     * @param sinkId The ep&#39;s ID or UID\n     */\n    public v1SinkGet(appId: string, sinkId: string, _options?: Configuration): Observable<SinkOut> {\n        const requestContextPromise = this.requestFactory.v1SinkGet(appId, sinkId, _options);\n\n        // build promise chain\n        let middlewarePreObservable = from<RequestContext>(requestContextPromise);\n        for (let middleware of this.configuration.middleware) {\n            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));\n        }\n\n        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => this.configuration.httpApi.send(ctx))).\n            pipe(mergeMap((response: ResponseContext) => {\n                let middlewarePostObservable = of(response);\n                for (let middleware of this.configuration.middleware) {\n                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));\n                }\n                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.v1SinkGet(rsp)));\n            }));\n    }\n \n    /**\n     * List the application's sinks.\n     * List Sinks\n     * @param appId The app&#39;s ID or UID\n     * @param limit Limit the number of returned items\n     * @param iterator The iterator returned from a prior invocation\n     * @param order The sorting order of the returned items\n     */\n    public v1SinkList(appId: string, limit?: number, iterator?: string, order?: Ordering, _options?: Configuration): Observable<ListResponseSinkOut> {\n        const requestContextPromise = this.requestFactory.v1SinkList(appId, limit, iterator, order, _options);\n\n        // build promise chain\n        let middlewarePreObservable = from<RequestContext>(requestContextPromise);\n        for (let middleware of this.configuration.middleware) {\n            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));\n        }\n\n        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => this.configuration.httpApi.send(ctx))).\n            pipe(mergeMap((response: ResponseContext) => {\n                let middlewarePostObservable = of(response);\n                for (let middleware of this.configuration.middleware) {\n                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));\n                }\n                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.v1SinkList(rsp)));\n            }));\n    }\n \n}\n\nimport { EnvironmentApiRequestFactory, EnvironmentApiResponseProcessor} from \"../apis/EnvironmentApi\";\nexport class ObservableEnvironmentApi {\n    private requestFactory: EnvironmentApiRequestFactory;\n    private responseProcessor: EnvironmentApiResponseProcessor;\n    private configuration: Configuration;\n\n    public constructor(\n        configuration: Configuration,\n        requestFactory?: EnvironmentApiRequestFactory,\n        responseProcessor?: EnvironmentApiResponseProcessor\n    ) {\n        this.configuration = configuration;\n        this.requestFactory = requestFactory || new EnvironmentApiRequestFactory(configuration);\n        this.responseProcessor = responseProcessor || new EnvironmentApiResponseProcessor();\n    }\n\n    /**\n     * Download a JSON file containing all org-settings and event types\n     * Export Environment Configuration\n     * @param idempotencyKey The request&#39;s idempotency key\n     */\n    public v1EnvironmentExport(idempotencyKey?: string, _options?: Configuration): Observable<EnvironmentOut> {\n        const requestContextPromise = this.requestFactory.v1EnvironmentExport(idempotencyKey, _options);\n\n        // build promise chain\n        let middlewarePreObservable = from<RequestContext>(requestContextPromise);\n        for (let middleware of this.configuration.middleware) {\n            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));\n        }\n\n        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => this.configuration.httpApi.send(ctx))).\n            pipe(mergeMap((response: ResponseContext) => {\n                let middlewarePostObservable = of(response);\n                for (let middleware of this.configuration.middleware) {\n                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));\n                }\n                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.v1EnvironmentExport(rsp)));\n            }));\n    }\n \n    /**\n     * Download a JSON file containing all org-settings and event types\n     * Export Environment Configuration\n     */\n    public v1EnvironmentExportGet(_options?: Configuration): Observable<EnvironmentOut> {\n        const requestContextPromise = this.requestFactory.v1EnvironmentExportGet(_options);\n\n        // build promise chain\n        let middlewarePreObservable = from<RequestContext>(requestContextPromise);\n        for (let middleware of this.configuration.middleware) {\n            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));\n        }\n\n        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => this.configuration.httpApi.send(ctx))).\n            pipe(mergeMap((response: ResponseContext) => {\n                let middlewarePostObservable = of(response);\n                for (let middleware of this.configuration.middleware) {\n                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));\n                }\n                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.v1EnvironmentExportGet(rsp)));\n            }));\n    }\n \n    /**\n     * Import a configuration into the active organization. It doesn't delete anything, only adds/updates what was passed to it.\n     * Import Environment Configuration\n     * @param environmentIn \n     * @param idempotencyKey The request&#39;s idempotency key\n     */\n    public v1EnvironmentImport(environmentIn: EnvironmentIn, idempotencyKey?: string, _options?: Configuration): Observable<void> {\n        const requestContextPromise = this.requestFactory.v1EnvironmentImport(environmentIn, idempotencyKey, _options);\n\n        // build promise chain\n        let middlewarePreObservable = from<RequestContext>(requestContextPromise);\n        for (let middleware of this.configuration.middleware) {\n            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));\n        }\n\n        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => this.configuration.httpApi.send(ctx))).\n            pipe(mergeMap((response: ResponseContext) => {\n                let middlewarePostObservable = of(response);\n                for (let middleware of this.configuration.middleware) {\n                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));\n                }\n                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.v1EnvironmentImport(rsp)));\n            }));\n    }\n \n}\n\nimport { EnvironmentSettingsApiRequestFactory, EnvironmentSettingsApiResponseProcessor} from \"../apis/EnvironmentSettingsApi\";\nexport class ObservableEnvironmentSettingsApi {\n    private requestFactory: EnvironmentSettingsApiRequestFactory;\n    private responseProcessor: EnvironmentSettingsApiResponseProcessor;\n    private configuration: Configuration;\n\n    public constructor(\n        configuration: Configuration,\n        requestFactory?: EnvironmentSettingsApiRequestFactory,\n        responseProcessor?: EnvironmentSettingsApiResponseProcessor\n    ) {\n        this.configuration = configuration;\n        this.requestFactory = requestFactory || new EnvironmentSettingsApiRequestFactory(configuration);\n        this.responseProcessor = responseProcessor || new EnvironmentSettingsApiResponseProcessor();\n    }\n\n    /**\n     * Get the environment's settings\n     * Get Org Settings\n     */\n    public v1EnvironmentGetSettings(_options?: Configuration): Observable<EnvironmentSettingsOut> {\n        const requestContextPromise = this.requestFactory.v1EnvironmentGetSettings(_options);\n\n        // build promise chain\n        let middlewarePreObservable = from<RequestContext>(requestContextPromise);\n        for (let middleware of this.configuration.middleware) {\n            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));\n        }\n\n        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => this.configuration.httpApi.send(ctx))).\n            pipe(mergeMap((response: ResponseContext) => {\n                let middlewarePostObservable = of(response);\n                for (let middleware of this.configuration.middleware) {\n                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));\n                }\n                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.v1EnvironmentGetSettings(rsp)));\n            }));\n    }\n \n}\n\nimport { EventTypeApiRequestFactory, EventTypeApiResponseProcessor} from \"../apis/EventTypeApi\";\nexport class ObservableEventTypeApi {\n    private requestFactory: EventTypeApiRequestFactory;\n    private responseProcessor: EventTypeApiResponseProcessor;\n    private configuration: Configuration;\n\n    public constructor(\n        configuration: Configuration,\n        requestFactory?: EventTypeApiRequestFactory,\n        responseProcessor?: EventTypeApiResponseProcessor\n    ) {\n        this.configuration = configuration;\n        this.requestFactory = requestFactory || new EventTypeApiRequestFactory(configuration);\n        this.responseProcessor = responseProcessor || new EventTypeApiResponseProcessor();\n    }\n\n    /**\n     * Create new or unarchive existing event type.  Unarchiving an event type will allow endpoints to filter on it and messages to be sent with it. Endpoints filtering on the event type before archival will continue to filter on it. This operation does not preserve the description and schemas.\n     * Create Event Type\n     * @param eventTypeIn \n     * @param idempotencyKey The request&#39;s idempotency key\n     */\n    public v1EventTypeCreate(eventTypeIn: EventTypeIn, idempotencyKey?: string, _options?: Configuration): Observable<EventTypeOut> {\n        const requestContextPromise = this.requestFactory.v1EventTypeCreate(eventTypeIn, idempotencyKey, _options);\n\n        // build promise chain\n        let middlewarePreObservable = from<RequestContext>(requestContextPromise);\n        for (let middleware of this.configuration.middleware) {\n            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));\n        }\n\n        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => this.configuration.httpApi.send(ctx))).\n            pipe(mergeMap((response: ResponseContext) => {\n                let middlewarePostObservable = of(response);\n                for (let middleware of this.configuration.middleware) {\n                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));\n                }\n                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.v1EventTypeCreate(rsp)));\n            }));\n    }\n \n    /**\n     * Archive an event type.  Endpoints already configured to filter on an event type will continue to do so after archival. However, new messages can not be sent with it and endpoints can not filter on it. An event type can be unarchived with the [create operation](#operation/create_event_type_api_v1_event_type__post).\n     * Delete Event Type\n     * @param eventTypeName The event type&#39;s name\n     * @param expunge By default event types are archived when \\&quot;deleted\\&quot;. Passing this to &#x60;true&#x60; deletes them entirely.\n     */\n    public v1EventTypeDelete(eventTypeName: string, expunge?: boolean, _options?: Configuration): Observable<void> {\n        const requestContextPromise = this.requestFactory.v1EventTypeDelete(eventTypeName, expunge, _options);\n\n        // build promise chain\n        let middlewarePreObservable = from<RequestContext>(requestContextPromise);\n        for (let middleware of this.configuration.middleware) {\n            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));\n        }\n\n        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => this.configuration.httpApi.send(ctx))).\n            pipe(mergeMap((response: ResponseContext) => {\n                let middlewarePostObservable = of(response);\n                for (let middleware of this.configuration.middleware) {\n                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));\n                }\n                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.v1EventTypeDelete(rsp)));\n            }));\n    }\n \n    /**\n     * Exports event type definitions based on the OpenAPI schemas associated with each existing event type\n     * Event Type Export From Openapi\n     * @param idempotencyKey The request&#39;s idempotency key\n     */\n    public v1EventTypeExportOpenapi(idempotencyKey?: string, _options?: Configuration): Observable<ExportEventTypeOut> {\n        const requestContextPromise = this.requestFactory.v1EventTypeExportOpenapi(idempotencyKey, _options);\n\n        // build promise chain\n        let middlewarePreObservable = from<RequestContext>(requestContextPromise);\n        for (let middleware of this.configuration.middleware) {\n            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));\n        }\n\n        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => this.configuration.httpApi.send(ctx))).\n            pipe(mergeMap((response: ResponseContext) => {\n                let middlewarePostObservable = of(response);\n                for (let middleware of this.configuration.middleware) {\n                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));\n                }\n                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.v1EventTypeExportOpenapi(rsp)));\n            }));\n    }\n \n    /**\n     * Generates a fake example from the given JSONSchema\n     * Generate Schema Example\n     * @param eventTypeSchemaIn \n     * @param idempotencyKey The request&#39;s idempotency key\n     */\n    public v1EventTypeGenerateExample(eventTypeSchemaIn: EventTypeSchemaIn, idempotencyKey?: string, _options?: Configuration): Observable<EventTypeExampleOut> {\n        const requestContextPromise = this.requestFactory.v1EventTypeGenerateExample(eventTypeSchemaIn, idempotencyKey, _options);\n\n        // build promise chain\n        let middlewarePreObservable = from<RequestContext>(requestContextPromise);\n        for (let middleware of this.configuration.middleware) {\n            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));\n        }\n\n        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => this.configuration.httpApi.send(ctx))).\n            pipe(mergeMap((response: ResponseContext) => {\n                let middlewarePostObservable = of(response);\n                for (let middleware of this.configuration.middleware) {\n                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));\n                }\n                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.v1EventTypeGenerateExample(rsp)));\n            }));\n    }\n \n    /**\n     * Get an event type.\n     * Get Event Type\n     * @param eventTypeName The event type&#39;s name\n     */\n    public v1EventTypeGet(eventTypeName: string, _options?: Configuration): Observable<EventTypeOut> {\n        const requestContextPromise = this.requestFactory.v1EventTypeGet(eventTypeName, _options);\n\n        // build promise chain\n        let middlewarePreObservable = from<RequestContext>(requestContextPromise);\n        for (let middleware of this.configuration.middleware) {\n            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));\n        }\n\n        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => this.configuration.httpApi.send(ctx))).\n            pipe(mergeMap((response: ResponseContext) => {\n                let middlewarePostObservable = of(response);\n                for (let middleware of this.configuration.middleware) {\n                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));\n                }\n                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.v1EventTypeGet(rsp)));\n            }));\n    }\n \n    /**\n     * Gets the retry schedule for messages using the given event type\n     * Get Retry Schedule\n     * @param eventTypeName The event type&#39;s name\n     */\n    public v1EventTypeGetRetrySchedule(eventTypeName: string, _options?: Configuration): Observable<RetryScheduleInOut> {\n        const requestContextPromise = this.requestFactory.v1EventTypeGetRetrySchedule(eventTypeName, _options);\n\n        // build promise chain\n        let middlewarePreObservable = from<RequestContext>(requestContextPromise);\n        for (let middleware of this.configuration.middleware) {\n            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));\n        }\n\n        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => this.configuration.httpApi.send(ctx))).\n            pipe(mergeMap((response: ResponseContext) => {\n                let middlewarePostObservable = of(response);\n                for (let middleware of this.configuration.middleware) {\n                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));\n                }\n                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.v1EventTypeGetRetrySchedule(rsp)));\n            }));\n    }\n \n    /**\n     * Given an OpenAPI spec, create new or update existing event types. If an existing `archived` event type is updated, it will be unarchived.  The importer will convert all webhooks found in the either the `webhooks` or `x-webhooks` top-level.\n     * Event Type Import From Openapi\n     * @param eventTypeImportOpenApiIn Import a list of event types from webhooks defined in an OpenAPI spec.  The OpenAPI spec can be specified as either &#x60;spec&#x60; given the spec as a JSON object, or as &#x60;specRaw&#x60; (a &#x60;string&#x60;) which will be parsed as YAML or JSON by the server. Sending neither or both is invalid, resulting in a &#x60;400&#x60; **Bad Request**.\n     * @param idempotencyKey The request&#39;s idempotency key\n     */\n    public v1EventTypeImportOpenapi(eventTypeImportOpenApiIn: EventTypeImportOpenApiIn, idempotencyKey?: string, _options?: Configuration): Observable<EventTypeImportOpenApiOut> {\n        const requestContextPromise = this.requestFactory.v1EventTypeImportOpenapi(eventTypeImportOpenApiIn, idempotencyKey, _options);\n\n        // build promise chain\n        let middlewarePreObservable = from<RequestContext>(requestContextPromise);\n        for (let middleware of this.configuration.middleware) {\n            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));\n        }\n\n        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => this.configuration.httpApi.send(ctx))).\n            pipe(mergeMap((response: ResponseContext) => {\n                let middlewarePostObservable = of(response);\n                for (let middleware of this.configuration.middleware) {\n                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));\n                }\n                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.v1EventTypeImportOpenapi(rsp)));\n            }));\n    }\n \n    /**\n     * Return the list of event types.\n     * List Event Types\n     * @param limit Limit the number of returned items\n     * @param iterator The iterator returned from a prior invocation\n     * @param order The sorting order of the returned items\n     * @param includeArchived When &#x60;true&#x60; archived (deleted but not expunged) items are included in the response\n     * @param withContent When &#x60;true&#x60; the full item (including the schema) is included in the response\n     */\n    public v1EventTypeList(limit?: number, iterator?: string, order?: Ordering, includeArchived?: boolean, withContent?: boolean, _options?: Configuration): Observable<ListResponseEventTypeOut> {\n        const requestContextPromise = this.requestFactory.v1EventTypeList(limit, iterator, order, includeArchived, withContent, _options);\n\n        // build promise chain\n        let middlewarePreObservable = from<RequestContext>(requestContextPromise);\n        for (let middleware of this.configuration.middleware) {\n            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));\n        }\n\n        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => this.configuration.httpApi.send(ctx))).\n            pipe(mergeMap((response: ResponseContext) => {\n                let middlewarePostObservable = of(response);\n                for (let middleware of this.configuration.middleware) {\n                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));\n                }\n                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.v1EventTypeList(rsp)));\n            }));\n    }\n \n    /**\n     * Partially update an event type.\n     * Patch Event Type\n     * @param eventTypeName The event type&#39;s name\n     * @param eventTypePatch \n     */\n    public v1EventTypePatch(eventTypeName: string, eventTypePatch: EventTypePatch, _options?: Configuration): Observable<EventTypeOut> {\n        const requestContextPromise = this.requestFactory.v1EventTypePatch(eventTypeName, eventTypePatch, _options);\n\n        // build promise chain\n        let middlewarePreObservable = from<RequestContext>(requestContextPromise);\n        for (let middleware of this.configuration.middleware) {\n            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));\n        }\n\n        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => this.configuration.httpApi.send(ctx))).\n            pipe(mergeMap((response: ResponseContext) => {\n                let middlewarePostObservable = of(response);\n                for (let middleware of this.configuration.middleware) {\n                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));\n                }\n                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.v1EventTypePatch(rsp)));\n            }));\n    }\n \n    /**\n     * Update an event type.\n     * Update Event Type\n     * @param eventTypeName The event type&#39;s name\n     * @param eventTypeUpdate \n     */\n    public v1EventTypeUpdate(eventTypeName: string, eventTypeUpdate: EventTypeUpdate, _options?: Configuration): Observable<EventTypeOut> {\n        const requestContextPromise = this.requestFactory.v1EventTypeUpdate(eventTypeName, eventTypeUpdate, _options);\n\n        // build promise chain\n        let middlewarePreObservable = from<RequestContext>(requestContextPromise);\n        for (let middleware of this.configuration.middleware) {\n            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));\n        }\n\n        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => this.configuration.httpApi.send(ctx))).\n            pipe(mergeMap((response: ResponseContext) => {\n                let middlewarePostObservable = of(response);\n                for (let middleware of this.configuration.middleware) {\n                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));\n                }\n                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.v1EventTypeUpdate(rsp)));\n            }));\n    }\n \n    /**\n     * Sets a retry schedule for all messages using the given event type\n     * Update Retry Schedule\n     * @param eventTypeName The event type&#39;s name\n     * @param retryScheduleInOut \n     */\n    public v1EventTypeUpdateRetrySchedule(eventTypeName: string, retryScheduleInOut: RetryScheduleInOut, _options?: Configuration): Observable<RetryScheduleInOut> {\n        const requestContextPromise = this.requestFactory.v1EventTypeUpdateRetrySchedule(eventTypeName, retryScheduleInOut, _options);\n\n        // build promise chain\n        let middlewarePreObservable = from<RequestContext>(requestContextPromise);\n        for (let middleware of this.configuration.middleware) {\n            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));\n        }\n\n        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => this.configuration.httpApi.send(ctx))).\n            pipe(mergeMap((response: ResponseContext) => {\n                let middlewarePostObservable = of(response);\n                for (let middleware of this.configuration.middleware) {\n                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));\n                }\n                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.v1EventTypeUpdateRetrySchedule(rsp)));\n            }));\n    }\n \n}\n\nimport { EventsApiRequestFactory, EventsApiResponseProcessor} from \"../apis/EventsApi\";\nexport class ObservableEventsApi {\n    private requestFactory: EventsApiRequestFactory;\n    private responseProcessor: EventsApiResponseProcessor;\n    private configuration: Configuration;\n\n    public constructor(\n        configuration: Configuration,\n        requestFactory?: EventsApiRequestFactory,\n        responseProcessor?: EventsApiResponseProcessor\n    ) {\n        this.configuration = configuration;\n        this.requestFactory = requestFactory || new EventsApiRequestFactory(configuration);\n        this.responseProcessor = responseProcessor || new EventsApiResponseProcessor();\n    }\n\n    /**\n     * Reads the stream of operational webhook events for this environment\n     * Events\n     * @param limit Limit the number of returned items\n     * @param iterator The iterator returned from a prior invocation\n     * @param eventTypes Filter response based on the event type\n     * @param channels Filter response based on the event type\n     * @param after \n     */\n    public v1Events(limit?: number, iterator?: string, eventTypes?: Array<string>, channels?: Array<string>, after?: Date, _options?: Configuration): Observable<MessageEventsOut> {\n        const requestContextPromise = this.requestFactory.v1Events(limit, iterator, eventTypes, channels, after, _options);\n\n        // build promise chain\n        let middlewarePreObservable = from<RequestContext>(requestContextPromise);\n        for (let middleware of this.configuration.middleware) {\n            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));\n        }\n\n        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => this.configuration.httpApi.send(ctx))).\n            pipe(mergeMap((response: ResponseContext) => {\n                let middlewarePostObservable = of(response);\n                for (let middleware of this.configuration.middleware) {\n                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));\n                }\n                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.v1Events(rsp)));\n            }));\n    }\n \n}\n\nimport { HealthApiRequestFactory, HealthApiResponseProcessor} from \"../apis/HealthApi\";\nexport class ObservableHealthApi {\n    private requestFactory: HealthApiRequestFactory;\n    private responseProcessor: HealthApiResponseProcessor;\n    private configuration: Configuration;\n\n    public constructor(\n        configuration: Configuration,\n        requestFactory?: HealthApiRequestFactory,\n        responseProcessor?: HealthApiResponseProcessor\n    ) {\n        this.configuration = configuration;\n        this.requestFactory = requestFactory || new HealthApiRequestFactory(configuration);\n        this.responseProcessor = responseProcessor || new HealthApiResponseProcessor();\n    }\n\n    /**\n     * Verify the API server is up and running.\n     * Health\n     */\n    public v1HealthGet(_options?: Configuration): Observable<void> {\n        const requestContextPromise = this.requestFactory.v1HealthGet(_options);\n\n        // build promise chain\n        let middlewarePreObservable = from<RequestContext>(requestContextPromise);\n        for (let middleware of this.configuration.middleware) {\n            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));\n        }\n\n        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => this.configuration.httpApi.send(ctx))).\n            pipe(mergeMap((response: ResponseContext) => {\n                let middlewarePostObservable = of(response);\n                for (let middleware of this.configuration.middleware) {\n                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));\n                }\n                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.v1HealthGet(rsp)));\n            }));\n    }\n \n}\n\nimport { InboundApiRequestFactory, InboundApiResponseProcessor} from \"../apis/InboundApi\";\nexport class ObservableInboundApi {\n    private requestFactory: InboundApiRequestFactory;\n    private responseProcessor: InboundApiResponseProcessor;\n    private configuration: Configuration;\n\n    public constructor(\n        configuration: Configuration,\n        requestFactory?: InboundApiRequestFactory,\n        responseProcessor?: InboundApiResponseProcessor\n    ) {\n        this.configuration = configuration;\n        this.requestFactory = requestFactory || new InboundApiRequestFactory(configuration);\n        this.responseProcessor = responseProcessor || new InboundApiResponseProcessor();\n    }\n\n    /**\n     * Handles a raw inbound webhook for the application.\n     * Handle Inbound\n     * @param appId The app&#39;s ID or UID\n     * @param inboundToken \n     * @param body \n     * @param eventType The event type&#39;s name\n     * @param idempotencyKey The request&#39;s idempotency key\n     */\n    public v1InboundMsg(appId: string, inboundToken: string, body: string, eventType?: string, idempotencyKey?: string, _options?: Configuration): Observable<MessageOut> {\n        const requestContextPromise = this.requestFactory.v1InboundMsg(appId, inboundToken, body, eventType, idempotencyKey, _options);\n\n        // build promise chain\n        let middlewarePreObservable = from<RequestContext>(requestContextPromise);\n        for (let middleware of this.configuration.middleware) {\n            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));\n        }\n\n        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => this.configuration.httpApi.send(ctx))).\n            pipe(mergeMap((response: ResponseContext) => {\n                let middlewarePostObservable = of(response);\n                for (let middleware of this.configuration.middleware) {\n                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));\n                }\n                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.v1InboundMsg(rsp)));\n            }));\n    }\n \n    /**\n     * Invalidates the previous inbound url (if one exists), producing a new inbound URL for this app\n     * Rotate Url\n     * @param appId The app&#39;s ID or UID\n     * @param idempotencyKey The request&#39;s idempotency key\n     */\n    public v1InboundRotateUrl(appId: string, idempotencyKey?: string, _options?: Configuration): Observable<RotatedUrlOut> {\n        const requestContextPromise = this.requestFactory.v1InboundRotateUrl(appId, idempotencyKey, _options);\n\n        // build promise chain\n        let middlewarePreObservable = from<RequestContext>(requestContextPromise);\n        for (let middleware of this.configuration.middleware) {\n            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));\n        }\n\n        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => this.configuration.httpApi.send(ctx))).\n            pipe(mergeMap((response: ResponseContext) => {\n                let middlewarePostObservable = of(response);\n                for (let middleware of this.configuration.middleware) {\n                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));\n                }\n                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.v1InboundRotateUrl(rsp)));\n            }));\n    }\n \n}\n\nimport { IntegrationApiRequestFactory, IntegrationApiResponseProcessor} from \"../apis/IntegrationApi\";\nexport class ObservableIntegrationApi {\n    private requestFactory: IntegrationApiRequestFactory;\n    private responseProcessor: IntegrationApiResponseProcessor;\n    private configuration: Configuration;\n\n    public constructor(\n        configuration: Configuration,\n        requestFactory?: IntegrationApiRequestFactory,\n        responseProcessor?: IntegrationApiResponseProcessor\n    ) {\n        this.configuration = configuration;\n        this.requestFactory = requestFactory || new IntegrationApiRequestFactory(configuration);\n        this.responseProcessor = responseProcessor || new IntegrationApiResponseProcessor();\n    }\n\n    /**\n     * Create an integration.\n     * Create Integration\n     * @param appId The app&#39;s ID or UID\n     * @param integrationIn \n     * @param idempotencyKey The request&#39;s idempotency key\n     */\n    public v1IntegrationCreate(appId: string, integrationIn: IntegrationIn, idempotencyKey?: string, _options?: Configuration): Observable<IntegrationOut> {\n        const requestContextPromise = this.requestFactory.v1IntegrationCreate(appId, integrationIn, idempotencyKey, _options);\n\n        // build promise chain\n        let middlewarePreObservable = from<RequestContext>(requestContextPromise);\n        for (let middleware of this.configuration.middleware) {\n            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));\n        }\n\n        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => this.configuration.httpApi.send(ctx))).\n            pipe(mergeMap((response: ResponseContext) => {\n                let middlewarePostObservable = of(response);\n                for (let middleware of this.configuration.middleware) {\n                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));\n                }\n                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.v1IntegrationCreate(rsp)));\n            }));\n    }\n \n    /**\n     * Delete an integration.\n     * Delete Integration\n     * @param appId The app&#39;s ID or UID\n     * @param integId The integ&#39;s ID\n     */\n    public v1IntegrationDelete(appId: string, integId: string, _options?: Configuration): Observable<void> {\n        const requestContextPromise = this.requestFactory.v1IntegrationDelete(appId, integId, _options);\n\n        // build promise chain\n        let middlewarePreObservable = from<RequestContext>(requestContextPromise);\n        for (let middleware of this.configuration.middleware) {\n            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));\n        }\n\n        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => this.configuration.httpApi.send(ctx))).\n            pipe(mergeMap((response: ResponseContext) => {\n                let middlewarePostObservable = of(response);\n                for (let middleware of this.configuration.middleware) {\n                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));\n                }\n                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.v1IntegrationDelete(rsp)));\n            }));\n    }\n \n    /**\n     * Get an integration.\n     * Get Integration\n     * @param appId The app&#39;s ID or UID\n     * @param integId The integ&#39;s ID\n     */\n    public v1IntegrationGet(appId: string, integId: string, _options?: Configuration): Observable<IntegrationOut> {\n        const requestContextPromise = this.requestFactory.v1IntegrationGet(appId, integId, _options);\n\n        // build promise chain\n        let middlewarePreObservable = from<RequestContext>(requestContextPromise);\n        for (let middleware of this.configuration.middleware) {\n            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));\n        }\n\n        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => this.configuration.httpApi.send(ctx))).\n            pipe(mergeMap((response: ResponseContext) => {\n                let middlewarePostObservable = of(response);\n                for (let middleware of this.configuration.middleware) {\n                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));\n                }\n                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.v1IntegrationGet(rsp)));\n            }));\n    }\n \n    /**\n     * Get an integration's key.\n     * Get Integration Key\n     * @param appId The app&#39;s ID or UID\n     * @param integId The integ&#39;s ID\n     */\n    public v1IntegrationGetKey(appId: string, integId: string, _options?: Configuration): Observable<IntegrationKeyOut> {\n        const requestContextPromise = this.requestFactory.v1IntegrationGetKey(appId, integId, _options);\n\n        // build promise chain\n        let middlewarePreObservable = from<RequestContext>(requestContextPromise);\n        for (let middleware of this.configuration.middleware) {\n            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));\n        }\n\n        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => this.configuration.httpApi.send(ctx))).\n            pipe(mergeMap((response: ResponseContext) => {\n                let middlewarePostObservable = of(response);\n                for (let middleware of this.configuration.middleware) {\n                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));\n                }\n                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.v1IntegrationGetKey(rsp)));\n            }));\n    }\n \n    /**\n     * List the application's integrations.\n     * List Integrations\n     * @param appId The app&#39;s ID or UID\n     * @param limit Limit the number of returned items\n     * @param iterator The iterator returned from a prior invocation\n     * @param order The sorting order of the returned items\n     */\n    public v1IntegrationList(appId: string, limit?: number, iterator?: string, order?: Ordering, _options?: Configuration): Observable<ListResponseIntegrationOut> {\n        const requestContextPromise = this.requestFactory.v1IntegrationList(appId, limit, iterator, order, _options);\n\n        // build promise chain\n        let middlewarePreObservable = from<RequestContext>(requestContextPromise);\n        for (let middleware of this.configuration.middleware) {\n            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));\n        }\n\n        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => this.configuration.httpApi.send(ctx))).\n            pipe(mergeMap((response: ResponseContext) => {\n                let middlewarePostObservable = of(response);\n                for (let middleware of this.configuration.middleware) {\n                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));\n                }\n                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.v1IntegrationList(rsp)));\n            }));\n    }\n \n    /**\n     * Rotate the integration's key. The previous key will be immediately revoked.\n     * Rotate Integration Key\n     * @param appId The app&#39;s ID or UID\n     * @param integId The integ&#39;s ID\n     * @param idempotencyKey The request&#39;s idempotency key\n     */\n    public v1IntegrationRotateKey(appId: string, integId: string, idempotencyKey?: string, _options?: Configuration): Observable<IntegrationKeyOut> {\n        const requestContextPromise = this.requestFactory.v1IntegrationRotateKey(appId, integId, idempotencyKey, _options);\n\n        // build promise chain\n        let middlewarePreObservable = from<RequestContext>(requestContextPromise);\n        for (let middleware of this.configuration.middleware) {\n            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));\n        }\n\n        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => this.configuration.httpApi.send(ctx))).\n            pipe(mergeMap((response: ResponseContext) => {\n                let middlewarePostObservable = of(response);\n                for (let middleware of this.configuration.middleware) {\n                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));\n                }\n                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.v1IntegrationRotateKey(rsp)));\n            }));\n    }\n \n    /**\n     * Update an integration.\n     * Update Integration\n     * @param appId The app&#39;s ID or UID\n     * @param integId The integ&#39;s ID\n     * @param integrationUpdate \n     */\n    public v1IntegrationUpdate(appId: string, integId: string, integrationUpdate: IntegrationUpdate, _options?: Configuration): Observable<IntegrationOut> {\n        const requestContextPromise = this.requestFactory.v1IntegrationUpdate(appId, integId, integrationUpdate, _options);\n\n        // build promise chain\n        let middlewarePreObservable = from<RequestContext>(requestContextPromise);\n        for (let middleware of this.configuration.middleware) {\n            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));\n        }\n\n        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => this.configuration.httpApi.send(ctx))).\n            pipe(mergeMap((response: ResponseContext) => {\n                let middlewarePostObservable = of(response);\n                for (let middleware of this.configuration.middleware) {\n                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));\n                }\n                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.v1IntegrationUpdate(rsp)));\n            }));\n    }\n \n}\n\nimport { MessageApiRequestFactory, MessageApiResponseProcessor} from \"../apis/MessageApi\";\nexport class ObservableMessageApi {\n    private requestFactory: MessageApiRequestFactory;\n    private responseProcessor: MessageApiResponseProcessor;\n    private configuration: Configuration;\n\n    public constructor(\n        configuration: Configuration,\n        requestFactory?: MessageApiRequestFactory,\n        responseProcessor?: MessageApiResponseProcessor\n    ) {\n        this.configuration = configuration;\n        this.requestFactory = requestFactory || new MessageApiRequestFactory(configuration);\n        this.responseProcessor = responseProcessor || new MessageApiResponseProcessor();\n    }\n\n    /**\n     * Creates and sends a message to the specified endpoint. The message attempt and response from the endpoint is returned. FIXME: use MessageIn for expediency, even though the `application` parameter is unused. Since this endpoint isn't publicly documented anyway, it should be fine\n     * Create Message Attempt For Endpoint\n     * @param appId The app&#39;s ID or UID\n     * @param endpointId The ep&#39;s ID or UID\n     * @param messageIn \n     * @param idempotencyKey The request&#39;s idempotency key\n     */\n    public createMessageAttemptForEndpoint(appId: string, endpointId: string, messageIn: MessageIn, idempotencyKey?: string, _options?: Configuration): Observable<MessageAttemptOut> {\n        const requestContextPromise = this.requestFactory.createMessageAttemptForEndpoint(appId, endpointId, messageIn, idempotencyKey, _options);\n\n        // build promise chain\n        let middlewarePreObservable = from<RequestContext>(requestContextPromise);\n        for (let middleware of this.configuration.middleware) {\n            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));\n        }\n\n        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => this.configuration.httpApi.send(ctx))).\n            pipe(mergeMap((response: ResponseContext) => {\n                let middlewarePostObservable = of(response);\n                for (let middleware of this.configuration.middleware) {\n                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));\n                }\n                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.createMessageAttemptForEndpoint(rsp)));\n            }));\n    }\n \n    /**\n     * Creates a new message and dispatches it to all of the application's endpoints.  The `eventId` is an optional custom unique ID. It's verified to be unique only up to a day, after that no verification will be made. If a message with the same `eventId` already exists for the application, a 409 conflict error will be returned.  The `eventType` indicates the type and schema of the event. All messages of a certain `eventType` are expected to have the same schema. Endpoints can choose to only listen to specific event types. Messages can also have `channels`, which similar to event types let endpoints filter by them. Unlike event types, messages can have multiple channels, and channels don't imply a specific message content or schema.  The `payload` property is the webhook's body (the actual webhook message). Svix supports payload sizes of up to ~350kb, though it's generally a good idea to keep webhook payloads small, probably no larger than 40kb.\n     * Create Message\n     * @param appId The app&#39;s ID or UID\n     * @param messageIn \n     * @param withContent When &#x60;true&#x60; message payloads are included in the response\n     * @param idempotencyKey The request&#39;s idempotency key\n     */\n    public v1MessageCreate(appId: string, messageIn: MessageIn, withContent?: boolean, idempotencyKey?: string, _options?: Configuration): Observable<MessageOut> {\n        const requestContextPromise = this.requestFactory.v1MessageCreate(appId, messageIn, withContent, idempotencyKey, _options);\n\n        // build promise chain\n        let middlewarePreObservable = from<RequestContext>(requestContextPromise);\n        for (let middleware of this.configuration.middleware) {\n            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));\n        }\n\n        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => this.configuration.httpApi.send(ctx))).\n            pipe(mergeMap((response: ResponseContext) => {\n                let middlewarePostObservable = of(response);\n                for (let middleware of this.configuration.middleware) {\n                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));\n                }\n                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.v1MessageCreate(rsp)));\n            }));\n    }\n \n    /**\n     * Reads the stream of created messages for an application\n     * Message Events\n     * @param appId The app&#39;s ID or UID\n     * @param limit Limit the number of returned items\n     * @param iterator The iterator returned from a prior invocation\n     * @param eventTypes Filter response based on the event type\n     * @param channels Filter response based on the event type\n     * @param after \n     */\n    public v1MessageEvents(appId: string, limit?: number, iterator?: string, eventTypes?: Array<string>, channels?: Array<string>, after?: Date, _options?: Configuration): Observable<MessageEventsOut> {\n        const requestContextPromise = this.requestFactory.v1MessageEvents(appId, limit, iterator, eventTypes, channels, after, _options);\n\n        // build promise chain\n        let middlewarePreObservable = from<RequestContext>(requestContextPromise);\n        for (let middleware of this.configuration.middleware) {\n            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));\n        }\n\n        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => this.configuration.httpApi.send(ctx))).\n            pipe(mergeMap((response: ResponseContext) => {\n                let middlewarePostObservable = of(response);\n                for (let middleware of this.configuration.middleware) {\n                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));\n                }\n                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.v1MessageEvents(rsp)));\n            }));\n    }\n \n    /**\n     * Reads the stream of created messages for an application, but using server-managed iterator tracking.\n     * Message Events Subscription\n     * @param appId The app&#39;s ID or UID\n     * @param subscriptionId The esub&#39;s ID or UID\n     * @param limit Limit the number of returned items\n     * @param iterator The iterator returned from a prior invocation\n     * @param eventTypes Filter response based on the event type\n     * @param channels Filter response based on the event type\n     * @param after \n     */\n    public v1MessageEventsSubscription(appId: string, subscriptionId: string, limit?: number, iterator?: string, eventTypes?: Array<string>, channels?: Array<string>, after?: Date, _options?: Configuration): Observable<MessageEventsOut> {\n        const requestContextPromise = this.requestFactory.v1MessageEventsSubscription(appId, subscriptionId, limit, iterator, eventTypes, channels, after, _options);\n\n        // build promise chain\n        let middlewarePreObservable = from<RequestContext>(requestContextPromise);\n        for (let middleware of this.configuration.middleware) {\n            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));\n        }\n\n        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => this.configuration.httpApi.send(ctx))).\n            pipe(mergeMap((response: ResponseContext) => {\n                let middlewarePostObservable = of(response);\n                for (let middleware of this.configuration.middleware) {\n                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));\n                }\n                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.v1MessageEventsSubscription(rsp)));\n            }));\n    }\n \n    /**\n     * Creates an auth token that can be used with the `v1.message.events-subscription` endpoint\n     * Message Events Create Token\n     * @param appId The app&#39;s ID or UID\n     * @param subscriptionId The esub&#39;s ID or UID\n     * @param idempotencyKey The request&#39;s idempotency key\n     */\n    public v1MessageEventsSubscriptionCreateToken(appId: string, subscriptionId: string, idempotencyKey?: string, _options?: Configuration): Observable<MessageSubscriberAuthTokenOut> {\n        const requestContextPromise = this.requestFactory.v1MessageEventsSubscriptionCreateToken(appId, subscriptionId, idempotencyKey, _options);\n\n        // build promise chain\n        let middlewarePreObservable = from<RequestContext>(requestContextPromise);\n        for (let middleware of this.configuration.middleware) {\n            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));\n        }\n\n        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => this.configuration.httpApi.send(ctx))).\n            pipe(mergeMap((response: ResponseContext) => {\n                let middlewarePostObservable = of(response);\n                for (let middleware of this.configuration.middleware) {\n                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));\n                }\n                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.v1MessageEventsSubscriptionCreateToken(rsp)));\n            }));\n    }\n \n    /**\n     * Delete the given message's payload. Useful in cases when a message was accidentally sent with sensitive content.  The message can't be replayed or resent once its payload has been deleted or expired.\n     * Delete message payload\n     * @param appId The app&#39;s ID or UID\n     * @param msgId The msg&#39;s ID or UID\n     */\n    public v1MessageExpungeContent(appId: string, msgId: string, _options?: Configuration): Observable<void> {\n        const requestContextPromise = this.requestFactory.v1MessageExpungeContent(appId, msgId, _options);\n\n        // build promise chain\n        let middlewarePreObservable = from<RequestContext>(requestContextPromise);\n        for (let middleware of this.configuration.middleware) {\n            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));\n        }\n\n        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => this.configuration.httpApi.send(ctx))).\n            pipe(mergeMap((response: ResponseContext) => {\n                let middlewarePostObservable = of(response);\n                for (let middleware of this.configuration.middleware) {\n                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));\n                }\n                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.v1MessageExpungeContent(rsp)));\n            }));\n    }\n \n    /**\n     * Get a message by its ID or eventID.\n     * Get Message\n     * @param appId The app&#39;s ID or UID\n     * @param msgId The msg&#39;s ID or UID\n     * @param withContent When &#x60;true&#x60; message payloads are included in the response\n     */\n    public v1MessageGet(appId: string, msgId: string, withContent?: boolean, _options?: Configuration): Observable<MessageOut> {\n        const requestContextPromise = this.requestFactory.v1MessageGet(appId, msgId, withContent, _options);\n\n        // build promise chain\n        let middlewarePreObservable = from<RequestContext>(requestContextPromise);\n        for (let middleware of this.configuration.middleware) {\n            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));\n        }\n\n        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => this.configuration.httpApi.send(ctx))).\n            pipe(mergeMap((response: ResponseContext) => {\n                let middlewarePostObservable = of(response);\n                for (let middleware of this.configuration.middleware) {\n                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));\n                }\n                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.v1MessageGet(rsp)));\n            }));\n    }\n \n    /**\n     * Get a message raw payload by its ID or eventID.\n     * Get Raw Message Payload\n     * @param appId The app&#39;s ID or UID\n     * @param msgId The msg&#39;s ID or UID\n     */\n    public v1MessageGetRawPayload(appId: string, msgId: string, _options?: Configuration): Observable<MessageRawPayloadOut> {\n        const requestContextPromise = this.requestFactory.v1MessageGetRawPayload(appId, msgId, _options);\n\n        // build promise chain\n        let middlewarePreObservable = from<RequestContext>(requestContextPromise);\n        for (let middleware of this.configuration.middleware) {\n            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));\n        }\n\n        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => this.configuration.httpApi.send(ctx))).\n            pipe(mergeMap((response: ResponseContext) => {\n                let middlewarePostObservable = of(response);\n                for (let middleware of this.configuration.middleware) {\n                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));\n                }\n                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.v1MessageGetRawPayload(rsp)));\n            }));\n    }\n \n    /**\n     * List all of the application's messages.  The `before` and `after` parameters let you filter all items created before or after a certain date. These can be used alongside an iterator to paginate over results within a certain window.  Note that by default this endpoint is limited to retrieving 90 days' worth of data relative to now or, if an iterator is provided, 90 days before/after the time indicated by the iterator ID. If you require data beyond those time ranges, you will need to explicitly set the `before` or `after` parameter as appropriate. \n     * List Messages\n     * @param appId The app&#39;s ID or UID\n     * @param limit Limit the number of returned items\n     * @param iterator The iterator returned from a prior invocation\n     * @param channel Filter response based on the channel\n     * @param before Only include items created before a certain date\n     * @param after Only include items created after a certain date\n     * @param withContent When &#x60;true&#x60; message payloads are included in the response\n     * @param tag Filter messages matching the provided tag\n     * @param eventTypes Filter response based on the event type\n     */\n    public v1MessageList(appId: string, limit?: number, iterator?: string, channel?: string, before?: Date, after?: Date, withContent?: boolean, tag?: string, eventTypes?: Array<string>, _options?: Configuration): Observable<ListResponseMessageOut> {\n        const requestContextPromise = this.requestFactory.v1MessageList(appId, limit, iterator, channel, before, after, withContent, tag, eventTypes, _options);\n\n        // build promise chain\n        let middlewarePreObservable = from<RequestContext>(requestContextPromise);\n        for (let middleware of this.configuration.middleware) {\n            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));\n        }\n\n        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => this.configuration.httpApi.send(ctx))).\n            pipe(mergeMap((response: ResponseContext) => {\n                let middlewarePostObservable = of(response);\n                for (let middleware of this.configuration.middleware) {\n                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));\n                }\n                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.v1MessageList(rsp)));\n            }));\n    }\n \n}\n\nimport { MessageAttemptApiRequestFactory, MessageAttemptApiResponseProcessor} from \"../apis/MessageAttemptApi\";\nexport class ObservableMessageAttemptApi {\n    private requestFactory: MessageAttemptApiRequestFactory;\n    private responseProcessor: MessageAttemptApiResponseProcessor;\n    private configuration: Configuration;\n\n    public constructor(\n        configuration: Configuration,\n        requestFactory?: MessageAttemptApiRequestFactory,\n        responseProcessor?: MessageAttemptApiResponseProcessor\n    ) {\n        this.configuration = configuration;\n        this.requestFactory = requestFactory || new MessageAttemptApiRequestFactory(configuration);\n        this.responseProcessor = responseProcessor || new MessageAttemptApiResponseProcessor();\n    }\n\n    /**\n     * Deletes the given attempt's response body. Useful when an endpoint accidentally returned sensitive content.\n     * Delete attempt response body\n     * @param appId The app&#39;s ID or UID\n     * @param msgId The msg&#39;s ID or UID\n     * @param attemptId The attempt&#39;s ID\n     */\n    public v1MessageAttemptExpungeContent(appId: string, msgId: string, attemptId: string, _options?: Configuration): Observable<void> {\n        const requestContextPromise = this.requestFactory.v1MessageAttemptExpungeContent(appId, msgId, attemptId, _options);\n\n        // build promise chain\n        let middlewarePreObservable = from<RequestContext>(requestContextPromise);\n        for (let middleware of this.configuration.middleware) {\n            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));\n        }\n\n        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => this.configuration.httpApi.send(ctx))).\n            pipe(mergeMap((response: ResponseContext) => {\n                let middlewarePostObservable = of(response);\n                for (let middleware of this.configuration.middleware) {\n                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));\n                }\n                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.v1MessageAttemptExpungeContent(rsp)));\n            }));\n    }\n \n    /**\n     * `msg_id`: Use a message id or a message `eventId`\n     * Get Attempt\n     * @param appId The app&#39;s ID or UID\n     * @param msgId The msg&#39;s ID or UID\n     * @param attemptId The attempt&#39;s ID\n     */\n    public v1MessageAttemptGet(appId: string, msgId: string, attemptId: string, _options?: Configuration): Observable<MessageAttemptOut> {\n        const requestContextPromise = this.requestFactory.v1MessageAttemptGet(appId, msgId, attemptId, _options);\n\n        // build promise chain\n        let middlewarePreObservable = from<RequestContext>(requestContextPromise);\n        for (let middleware of this.configuration.middleware) {\n            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));\n        }\n\n        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => this.configuration.httpApi.send(ctx))).\n            pipe(mergeMap((response: ResponseContext) => {\n                let middlewarePostObservable = of(response);\n                for (let middleware of this.configuration.middleware) {\n                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));\n                }\n                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.v1MessageAttemptGet(rsp)));\n            }));\n    }\n \n    /**\n     * Calculate and return headers used on a given message attempt\n     * Get Attempt Headers\n     * @param appId The app&#39;s ID or UID\n     * @param msgId The msg&#39;s ID or UID\n     * @param attemptId The attempt&#39;s ID\n     */\n    public v1MessageAttemptGetHeaders(appId: string, msgId: string, attemptId: string, _options?: Configuration): Observable<MessageAttemptHeadersOut> {\n        const requestContextPromise = this.requestFactory.v1MessageAttemptGetHeaders(appId, msgId, attemptId, _options);\n\n        // build promise chain\n        let middlewarePreObservable = from<RequestContext>(requestContextPromise);\n        for (let middleware of this.configuration.middleware) {\n            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));\n        }\n\n        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => this.configuration.httpApi.send(ctx))).\n            pipe(mergeMap((response: ResponseContext) => {\n                let middlewarePostObservable = of(response);\n                for (let middleware of this.configuration.middleware) {\n                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));\n                }\n                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.v1MessageAttemptGetHeaders(rsp)));\n            }));\n    }\n \n    /**\n     * List endpoints attempted by a given message. Additionally includes metadata about the latest message attempt. By default, endpoints are listed in ascending order by ID.\n     * List Attempted Destinations\n     * @param appId The app&#39;s ID or UID\n     * @param msgId The msg&#39;s ID or UID\n     * @param limit Limit the number of returned items\n     * @param iterator The iterator returned from a prior invocation\n     */\n    public v1MessageAttemptListAttemptedDestinations(appId: string, msgId: string, limit?: number, iterator?: string, _options?: Configuration): Observable<ListResponseMessageEndpointOut> {\n        const requestContextPromise = this.requestFactory.v1MessageAttemptListAttemptedDestinations(appId, msgId, limit, iterator, _options);\n\n        // build promise chain\n        let middlewarePreObservable = from<RequestContext>(requestContextPromise);\n        for (let middleware of this.configuration.middleware) {\n            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));\n        }\n\n        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => this.configuration.httpApi.send(ctx))).\n            pipe(mergeMap((response: ResponseContext) => {\n                let middlewarePostObservable = of(response);\n                for (let middleware of this.configuration.middleware) {\n                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));\n                }\n                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.v1MessageAttemptListAttemptedDestinations(rsp)));\n            }));\n    }\n \n    /**\n     * List messages for a particular endpoint. Additionally includes metadata about the latest message attempt.  The `before` parameter lets you filter all items created before a certain date and is ignored if an iterator is passed.  Note that by default this endpoint is limited to retrieving 90 days' worth of data relative to now or, if an iterator is provided, 90 days before/after the time indicated by the iterator ID. If you require data beyond those time ranges, you will need to explicitly set the `before` or `after` parameter as appropriate. \n     * List Attempted Messages\n     * @param appId The app&#39;s ID or UID\n     * @param endpointId The ep&#39;s ID or UID\n     * @param limit Limit the number of returned items\n     * @param iterator The iterator returned from a prior invocation\n     * @param channel Filter response based on the channel\n     * @param tag Filter response based on the message tags\n     * @param status Filter response based on the delivery status\n     * @param before Only include items created before a certain date\n     * @param after Only include items created after a certain date\n     * @param withContent When &#x60;true&#x60; message payloads are included in the response\n     * @param eventTypes Filter response based on the event type\n     */\n    public v1MessageAttemptListAttemptedMessages(appId: string, endpointId: string, limit?: number, iterator?: string, channel?: string, tag?: string, status?: MessageStatus, before?: Date, after?: Date, withContent?: boolean, eventTypes?: Array<string>, _options?: Configuration): Observable<ListResponseEndpointMessageOut> {\n        const requestContextPromise = this.requestFactory.v1MessageAttemptListAttemptedMessages(appId, endpointId, limit, iterator, channel, tag, status, before, after, withContent, eventTypes, _options);\n\n        // build promise chain\n        let middlewarePreObservable = from<RequestContext>(requestContextPromise);\n        for (let middleware of this.configuration.middleware) {\n            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));\n        }\n\n        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => this.configuration.httpApi.send(ctx))).\n            pipe(mergeMap((response: ResponseContext) => {\n                let middlewarePostObservable = of(response);\n                for (let middleware of this.configuration.middleware) {\n                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));\n                }\n                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.v1MessageAttemptListAttemptedMessages(rsp)));\n            }));\n    }\n \n    /**\n     * List attempts by endpoint id  Note that by default this endpoint is limited to retrieving 90 days' worth of data relative to now or, if an iterator is provided, 90 days before/after the time indicated by the iterator ID. If you require data beyond those time ranges, you will need to explicitly set the `before` or `after` parameter as appropriate. \n     * List Attempts By Endpoint\n     * @param appId The app&#39;s ID or UID\n     * @param endpointId The ep&#39;s ID or UID\n     * @param limit Limit the number of returned items\n     * @param iterator The iterator returned from a prior invocation\n     * @param status Filter response based on the delivery status\n     * @param statusCodeClass Filter response based on the HTTP status code\n     * @param channel Filter response based on the channel\n     * @param tag Filter response based on the tag\n     * @param before Only include items created before a certain date\n     * @param after Only include items created after a certain date\n     * @param withContent When &#x60;true&#x60; attempt content is included in the response\n     * @param withMsg When &#x60;true&#x60;, the message information is included in the response\n     * @param eventTypes Filter response based on the event type\n     */\n    public v1MessageAttemptListByEndpoint(appId: string, endpointId: string, limit?: number, iterator?: string, status?: MessageStatus, statusCodeClass?: StatusCodeClass, channel?: string, tag?: string, before?: Date, after?: Date, withContent?: boolean, withMsg?: boolean, eventTypes?: Array<string>, _options?: Configuration): Observable<ListResponseMessageAttemptOut> {\n        const requestContextPromise = this.requestFactory.v1MessageAttemptListByEndpoint(appId, endpointId, limit, iterator, status, statusCodeClass, channel, tag, before, after, withContent, withMsg, eventTypes, _options);\n\n        // build promise chain\n        let middlewarePreObservable = from<RequestContext>(requestContextPromise);\n        for (let middleware of this.configuration.middleware) {\n            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));\n        }\n\n        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => this.configuration.httpApi.send(ctx))).\n            pipe(mergeMap((response: ResponseContext) => {\n                let middlewarePostObservable = of(response);\n                for (let middleware of this.configuration.middleware) {\n                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));\n                }\n                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.v1MessageAttemptListByEndpoint(rsp)));\n            }));\n    }\n \n    /**\n     * DEPRECATED: please use list_attempts with endpoint_id as a query parameter instead.  List the message attempts for a particular endpoint.  Returning the endpoint.  The `before` parameter lets you filter all items created before a certain date and is ignored if an iterator is passed.  Note that by default this endpoint is limited to retrieving 90 days' worth of data relative to now or, if an iterator is provided, 90 days before/after the time indicated by the iterator ID. If you require data beyond those time ranges, you will need to explicitly set the `before` or `after` parameter as appropriate. \n     * List Attempts For Endpoint\n     * @param appId The app&#39;s ID or UID\n     * @param msgId The msg&#39;s ID or UID\n     * @param endpointId The ep&#39;s ID or UID\n     * @param limit Limit the number of returned items\n     * @param iterator The iterator returned from a prior invocation\n     * @param channel Filter response based on the channel\n     * @param tag Filter response based on the tag\n     * @param status Filter response based on the delivery status\n     * @param before Only include items created before a certain date\n     * @param after Only include items created after a certain date\n     * @param eventTypes Filter response based on the event type\n     */\n    public v1MessageAttemptListByEndpointDeprecated(appId: string, msgId: string, endpointId: string, limit?: number, iterator?: string, channel?: string, tag?: string, status?: MessageStatus, before?: Date, after?: Date, eventTypes?: Array<string>, _options?: Configuration): Observable<ListResponseMessageAttemptEndpointOut> {\n        const requestContextPromise = this.requestFactory.v1MessageAttemptListByEndpointDeprecated(appId, msgId, endpointId, limit, iterator, channel, tag, status, before, after, eventTypes, _options);\n\n        // build promise chain\n        let middlewarePreObservable = from<RequestContext>(requestContextPromise);\n        for (let middleware of this.configuration.middleware) {\n            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));\n        }\n\n        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => this.configuration.httpApi.send(ctx))).\n            pipe(mergeMap((response: ResponseContext) => {\n                let middlewarePostObservable = of(response);\n                for (let middleware of this.configuration.middleware) {\n                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));\n                }\n                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.v1MessageAttemptListByEndpointDeprecated(rsp)));\n            }));\n    }\n \n    /**\n     * List attempts by message id  Note that by default this endpoint is limited to retrieving 90 days' worth of data relative to now or, if an iterator is provided, 90 days before/after the time indicated by the iterator ID. If you require data beyond those time ranges, you will need to explicitly set the `before` or `after` parameter as appropriate. \n     * List Attempts By Msg\n     * @param appId The app&#39;s ID or UID\n     * @param msgId The msg&#39;s ID or UID\n     * @param limit Limit the number of returned items\n     * @param iterator The iterator returned from a prior invocation\n     * @param status Filter response based on the delivery status\n     * @param statusCodeClass Filter response based on the HTTP status code\n     * @param channel Filter response based on the channel\n     * @param tag Filter response based on the tag\n     * @param endpointId Filter the attempts based on the attempted endpoint\n     * @param before Only include items created before a certain date\n     * @param after Only include items created after a certain date\n     * @param withContent When &#x60;true&#x60; attempt content is included in the response\n     * @param eventTypes Filter response based on the event type\n     */\n    public v1MessageAttemptListByMsg(appId: string, msgId: string, limit?: number, iterator?: string, status?: MessageStatus, statusCodeClass?: StatusCodeClass, channel?: string, tag?: string, endpointId?: string, before?: Date, after?: Date, withContent?: boolean, eventTypes?: Array<string>, _options?: Configuration): Observable<ListResponseMessageAttemptOut> {\n        const requestContextPromise = this.requestFactory.v1MessageAttemptListByMsg(appId, msgId, limit, iterator, status, statusCodeClass, channel, tag, endpointId, before, after, withContent, eventTypes, _options);\n\n        // build promise chain\n        let middlewarePreObservable = from<RequestContext>(requestContextPromise);\n        for (let middleware of this.configuration.middleware) {\n            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));\n        }\n\n        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => this.configuration.httpApi.send(ctx))).\n            pipe(mergeMap((response: ResponseContext) => {\n                let middlewarePostObservable = of(response);\n                for (let middleware of this.configuration.middleware) {\n                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));\n                }\n                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.v1MessageAttemptListByMsg(rsp)));\n            }));\n    }\n \n    /**\n     * Deprecated: Please use \\\"List Attempts by Endpoint\\\" and \\\"List Attempts by Msg\\\" instead.  Note that by default this endpoint is limited to retrieving 90 days' worth of data relative to now or, if an iterator is provided, 90 days before/after the time indicated by the iterator ID. If you require data beyond those time ranges, you will need to explicitly set the `before` or `after` parameter as appropriate.  `msg_id`: Use a message id or a message `eventId`\n     * List Attempts\n     * @param appId The app&#39;s ID or UID\n     * @param msgId The msg&#39;s ID or UID\n     * @param limit Limit the number of returned items\n     * @param iterator The iterator returned from a prior invocation\n     * @param endpointId Filter the attempts based on the attempted endpoint\n     * @param channel Filter response based on the channel\n     * @param tag Filter response based on the tag\n     * @param status Filter response based on the delivery status\n     * @param before Only include items created before a certain date\n     * @param after Only include items created after a certain date\n     * @param statusCodeClass Filter response based on the HTTP status code\n     * @param eventTypes Filter response based on the event type\n     */\n    public v1MessageAttemptListByMsgDeprecated(appId: string, msgId: string, limit?: number, iterator?: string, endpointId?: string, channel?: string, tag?: string, status?: MessageStatus, before?: Date, after?: Date, statusCodeClass?: StatusCodeClass, eventTypes?: Array<string>, _options?: Configuration): Observable<ListResponseMessageAttemptOut> {\n        const requestContextPromise = this.requestFactory.v1MessageAttemptListByMsgDeprecated(appId, msgId, limit, iterator, endpointId, channel, tag, status, before, after, statusCodeClass, eventTypes, _options);\n\n        // build promise chain\n        let middlewarePreObservable = from<RequestContext>(requestContextPromise);\n        for (let middleware of this.configuration.middleware) {\n            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));\n        }\n\n        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => this.configuration.httpApi.send(ctx))).\n            pipe(mergeMap((response: ResponseContext) => {\n                let middlewarePostObservable = of(response);\n                for (let middleware of this.configuration.middleware) {\n                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));\n                }\n                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.v1MessageAttemptListByMsgDeprecated(rsp)));\n            }));\n    }\n \n    /**\n     * Resend a message to the specified endpoint.\n     * Resend Webhook\n     * @param appId The app&#39;s ID or UID\n     * @param msgId The msg&#39;s ID or UID\n     * @param endpointId The ep&#39;s ID or UID\n     * @param idempotencyKey The request&#39;s idempotency key\n     */\n    public v1MessageAttemptResend(appId: string, msgId: string, endpointId: string, idempotencyKey?: string, _options?: Configuration): Observable<void> {\n        const requestContextPromise = this.requestFactory.v1MessageAttemptResend(appId, msgId, endpointId, idempotencyKey, _options);\n\n        // build promise chain\n        let middlewarePreObservable = from<RequestContext>(requestContextPromise);\n        for (let middleware of this.configuration.middleware) {\n            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));\n        }\n\n        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => this.configuration.httpApi.send(ctx))).\n            pipe(mergeMap((response: ResponseContext) => {\n                let middlewarePostObservable = of(response);\n                for (let middleware of this.configuration.middleware) {\n                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));\n                }\n                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.v1MessageAttemptResend(rsp)));\n            }));\n    }\n \n}\n\nimport { SinkApiRequestFactory, SinkApiResponseProcessor} from \"../apis/SinkApi\";\nexport class ObservableSinkApi {\n    private requestFactory: SinkApiRequestFactory;\n    private responseProcessor: SinkApiResponseProcessor;\n    private configuration: Configuration;\n\n    public constructor(\n        configuration: Configuration,\n        requestFactory?: SinkApiRequestFactory,\n        responseProcessor?: SinkApiResponseProcessor\n    ) {\n        this.configuration = configuration;\n        this.requestFactory = requestFactory || new SinkApiRequestFactory(configuration);\n        this.responseProcessor = responseProcessor || new SinkApiResponseProcessor();\n    }\n\n    /**\n     * Creates streaming events.\n     * Append To Stream\n     * @param streamId \n     * @param createStreamIn \n     * @param idempotencyKey The request&#39;s idempotency key\n     */\n    public v1StreamCreateEvents(streamId: string, createStreamIn: CreateStreamIn, idempotencyKey?: string, _options?: Configuration): Observable<any> {\n        const requestContextPromise = this.requestFactory.v1StreamCreateEvents(streamId, createStreamIn, idempotencyKey, _options);\n\n        // build promise chain\n        let middlewarePreObservable = from<RequestContext>(requestContextPromise);\n        for (let middleware of this.configuration.middleware) {\n            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));\n        }\n\n        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => this.configuration.httpApi.send(ctx))).\n            pipe(mergeMap((response: ResponseContext) => {\n                let middlewarePostObservable = of(response);\n                for (let middleware of this.configuration.middleware) {\n                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));\n                }\n                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.v1StreamCreateEvents(rsp)));\n            }));\n    }\n \n    /**\n     * Iterate over a stream of events.\n     * Stream Events\n     * @param streamId \n     * @param limit Limit the number of returned items\n     * @param iterator The iterator returned from a prior invocation\n     * @param after \n     */\n    public v1StreamEventsGet(streamId: string, limit?: number, iterator?: string, after?: Date, _options?: Configuration): Observable<EventStreamOut> {\n        const requestContextPromise = this.requestFactory.v1StreamEventsGet(streamId, limit, iterator, after, _options);\n\n        // build promise chain\n        let middlewarePreObservable = from<RequestContext>(requestContextPromise);\n        for (let middleware of this.configuration.middleware) {\n            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));\n        }\n\n        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => this.configuration.httpApi.send(ctx))).\n            pipe(mergeMap((response: ResponseContext) => {\n                let middlewarePostObservable = of(response);\n                for (let middleware of this.configuration.middleware) {\n                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));\n                }\n                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.v1StreamEventsGet(rsp)));\n            }));\n    }\n \n}\n\nimport { StatisticsApiRequestFactory, StatisticsApiResponseProcessor} from \"../apis/StatisticsApi\";\nexport class ObservableStatisticsApi {\n    private requestFactory: StatisticsApiRequestFactory;\n    private responseProcessor: StatisticsApiResponseProcessor;\n    private configuration: Configuration;\n\n    public constructor(\n        configuration: Configuration,\n        requestFactory?: StatisticsApiRequestFactory,\n        responseProcessor?: StatisticsApiResponseProcessor\n    ) {\n        this.configuration = configuration;\n        this.requestFactory = requestFactory || new StatisticsApiRequestFactory(configuration);\n        this.responseProcessor = responseProcessor || new StatisticsApiResponseProcessor();\n    }\n\n    /**\n     * Creates a background task to calculate the message destinations for all applications in the environment.  Note that this endpoint is asynchronous. You will need to poll the `Get Background Task` endpoint to retrieve the results of the operation.\n     * Aggregate App Stats\n     * @param appUsageStatsIn \n     * @param idempotencyKey The request&#39;s idempotency key\n     */\n    public v1StatisticsAggregateAppStats(appUsageStatsIn: AppUsageStatsIn, idempotencyKey?: string, _options?: Configuration): Observable<AppUsageStatsOut> {\n        const requestContextPromise = this.requestFactory.v1StatisticsAggregateAppStats(appUsageStatsIn, idempotencyKey, _options);\n\n        // build promise chain\n        let middlewarePreObservable = from<RequestContext>(requestContextPromise);\n        for (let middleware of this.configuration.middleware) {\n            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));\n        }\n\n        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => this.configuration.httpApi.send(ctx))).\n            pipe(mergeMap((response: ResponseContext) => {\n                let middlewarePostObservable = of(response);\n                for (let middleware of this.configuration.middleware) {\n                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));\n                }\n                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.v1StatisticsAggregateAppStats(rsp)));\n            }));\n    }\n \n    /**\n     * Creates a background task to calculate the listed event types for all apps in the organization.  Note that this endpoint is asynchronous. You will need to poll the `Get Background Task` endpoint to retrieve the results of the operation.\n     * Aggregate Event Types\n     */\n    public v1StatisticsAggregateEventTypes(_options?: Configuration): Observable<AggregateEventTypesOut> {\n        const requestContextPromise = this.requestFactory.v1StatisticsAggregateEventTypes(_options);\n\n        // build promise chain\n        let middlewarePreObservable = from<RequestContext>(requestContextPromise);\n        for (let middleware of this.configuration.middleware) {\n            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));\n        }\n\n        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => this.configuration.httpApi.send(ctx))).\n            pipe(mergeMap((response: ResponseContext) => {\n                let middlewarePostObservable = of(response);\n                for (let middleware of this.configuration.middleware) {\n                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));\n                }\n                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.v1StatisticsAggregateEventTypes(rsp)));\n            }));\n    }\n \n    /**\n     * Returns application-level statistics on message attempts\n     * Get App Attempt Stats\n     * @param appId The app&#39;s ID or UID\n     * @param startDate Filter the range to data starting from this date\n     * @param endDate Filter the range to data ending by this date\n     */\n    public v1StatsAppAttempts(appId: string, startDate?: Date, endDate?: Date, _options?: Configuration): Observable<AttemptStatisticsResponse> {\n        const requestContextPromise = this.requestFactory.v1StatsAppAttempts(appId, startDate, endDate, _options);\n\n        // build promise chain\n        let middlewarePreObservable = from<RequestContext>(requestContextPromise);\n        for (let middleware of this.configuration.middleware) {\n            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));\n        }\n\n        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => this.configuration.httpApi.send(ctx))).\n            pipe(mergeMap((response: ResponseContext) => {\n                let middlewarePostObservable = of(response);\n                for (let middleware of this.configuration.middleware) {\n                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));\n                }\n                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.v1StatsAppAttempts(rsp)));\n            }));\n    }\n \n    /**\n     * Returns endpoint-level statistics on message attempts\n     * Get Ep Stats\n     * @param appId The app&#39;s ID or UID\n     * @param endpointId The ep&#39;s ID or UID\n     * @param startDate Filter the range to data starting from this date\n     * @param endDate Filter the range to data ending by this date\n     */\n    public v1StatsEndpointAttempts(appId: string, endpointId: string, startDate?: Date, endDate?: Date, _options?: Configuration): Observable<AttemptStatisticsResponse> {\n        const requestContextPromise = this.requestFactory.v1StatsEndpointAttempts(appId, endpointId, startDate, endDate, _options);\n\n        // build promise chain\n        let middlewarePreObservable = from<RequestContext>(requestContextPromise);\n        for (let middleware of this.configuration.middleware) {\n            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));\n        }\n\n        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => this.configuration.httpApi.send(ctx))).\n            pipe(mergeMap((response: ResponseContext) => {\n                let middlewarePostObservable = of(response);\n                for (let middleware of this.configuration.middleware) {\n                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));\n                }\n                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.v1StatsEndpointAttempts(rsp)));\n            }));\n    }\n \n}\n\nimport { StreamApiRequestFactory, StreamApiResponseProcessor} from \"../apis/StreamApi\";\nexport class ObservableStreamApi {\n    private requestFactory: StreamApiRequestFactory;\n    private responseProcessor: StreamApiResponseProcessor;\n    private configuration: Configuration;\n\n    public constructor(\n        configuration: Configuration,\n        requestFactory?: StreamApiRequestFactory,\n        responseProcessor?: StreamApiResponseProcessor\n    ) {\n        this.configuration = configuration;\n        this.requestFactory = requestFactory || new StreamApiRequestFactory(configuration);\n        this.responseProcessor = responseProcessor || new StreamApiResponseProcessor();\n    }\n\n    /**\n     * Creates a new stream.\n     * Create Stream\n     * @param streamIn \n     * @param idempotencyKey The request&#39;s idempotency key\n     */\n    public v1StreamCreate(streamIn: StreamIn, idempotencyKey?: string, _options?: Configuration): Observable<StreamOut> {\n        const requestContextPromise = this.requestFactory.v1StreamCreate(streamIn, idempotencyKey, _options);\n\n        // build promise chain\n        let middlewarePreObservable = from<RequestContext>(requestContextPromise);\n        for (let middleware of this.configuration.middleware) {\n            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));\n        }\n\n        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => this.configuration.httpApi.send(ctx))).\n            pipe(mergeMap((response: ResponseContext) => {\n                let middlewarePostObservable = of(response);\n                for (let middleware of this.configuration.middleware) {\n                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));\n                }\n                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.v1StreamCreate(rsp)));\n            }));\n    }\n \n    /**\n     * Delete a stream.\n     * Delete Stream\n     * @param streamId \n     */\n    public v1StreamDelete(streamId: string, _options?: Configuration): Observable<void> {\n        const requestContextPromise = this.requestFactory.v1StreamDelete(streamId, _options);\n\n        // build promise chain\n        let middlewarePreObservable = from<RequestContext>(requestContextPromise);\n        for (let middleware of this.configuration.middleware) {\n            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));\n        }\n\n        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => this.configuration.httpApi.send(ctx))).\n            pipe(mergeMap((response: ResponseContext) => {\n                let middlewarePostObservable = of(response);\n                for (let middleware of this.configuration.middleware) {\n                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));\n                }\n                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.v1StreamDelete(rsp)));\n            }));\n    }\n \n    /**\n     * Get a stream by id or uid.\n     * Get Stream\n     * @param streamId \n     */\n    public v1StreamGet(streamId: string, _options?: Configuration): Observable<StreamOut> {\n        const requestContextPromise = this.requestFactory.v1StreamGet(streamId, _options);\n\n        // build promise chain\n        let middlewarePreObservable = from<RequestContext>(requestContextPromise);\n        for (let middleware of this.configuration.middleware) {\n            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));\n        }\n\n        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => this.configuration.httpApi.send(ctx))).\n            pipe(mergeMap((response: ResponseContext) => {\n                let middlewarePostObservable = of(response);\n                for (let middleware of this.configuration.middleware) {\n                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));\n                }\n                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.v1StreamGet(rsp)));\n            }));\n    }\n \n    /**\n     * List of all the organization's streams.\n     * List Streams\n     * @param limit Limit the number of returned items\n     * @param iterator The iterator returned from a prior invocation\n     * @param order The sorting order of the returned items\n     */\n    public v1StreamList(limit?: number, iterator?: string, order?: Ordering, _options?: Configuration): Observable<ListResponseStreamOut> {\n        const requestContextPromise = this.requestFactory.v1StreamList(limit, iterator, order, _options);\n\n        // build promise chain\n        let middlewarePreObservable = from<RequestContext>(requestContextPromise);\n        for (let middleware of this.configuration.middleware) {\n            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));\n        }\n\n        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => this.configuration.httpApi.send(ctx))).\n            pipe(mergeMap((response: ResponseContext) => {\n                let middlewarePostObservable = of(response);\n                for (let middleware of this.configuration.middleware) {\n                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));\n                }\n                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.v1StreamList(rsp)));\n            }));\n    }\n \n    /**\n     * Partially update a stream.\n     * Patch Stream\n     * @param streamId \n     * @param streamPatch \n     */\n    public v1StreamPatch(streamId: string, streamPatch: StreamPatch, _options?: Configuration): Observable<StreamOut> {\n        const requestContextPromise = this.requestFactory.v1StreamPatch(streamId, streamPatch, _options);\n\n        // build promise chain\n        let middlewarePreObservable = from<RequestContext>(requestContextPromise);\n        for (let middleware of this.configuration.middleware) {\n            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));\n        }\n\n        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => this.configuration.httpApi.send(ctx))).\n            pipe(mergeMap((response: ResponseContext) => {\n                let middlewarePostObservable = of(response);\n                for (let middleware of this.configuration.middleware) {\n                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));\n                }\n                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.v1StreamPatch(rsp)));\n            }));\n    }\n \n    /**\n     * Update a stream.\n     * Update Stream\n     * @param streamId \n     * @param streamIn \n     */\n    public v1StreamUpdate(streamId: string, streamIn: StreamIn, _options?: Configuration): Observable<StreamOut> {\n        const requestContextPromise = this.requestFactory.v1StreamUpdate(streamId, streamIn, _options);\n\n        // build promise chain\n        let middlewarePreObservable = from<RequestContext>(requestContextPromise);\n        for (let middleware of this.configuration.middleware) {\n            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));\n        }\n\n        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => this.configuration.httpApi.send(ctx))).\n            pipe(mergeMap((response: ResponseContext) => {\n                let middlewarePostObservable = of(response);\n                for (let middleware of this.configuration.middleware) {\n                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));\n                }\n                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.v1StreamUpdate(rsp)));\n            }));\n    }\n \n}\n\nimport { TransformationTemplateApiRequestFactory, TransformationTemplateApiResponseProcessor} from \"../apis/TransformationTemplateApi\";\nexport class ObservableTransformationTemplateApi {\n    private requestFactory: TransformationTemplateApiRequestFactory;\n    private responseProcessor: TransformationTemplateApiResponseProcessor;\n    private configuration: Configuration;\n\n    public constructor(\n        configuration: Configuration,\n        requestFactory?: TransformationTemplateApiRequestFactory,\n        responseProcessor?: TransformationTemplateApiResponseProcessor\n    ) {\n        this.configuration = configuration;\n        this.requestFactory = requestFactory || new TransformationTemplateApiRequestFactory(configuration);\n        this.responseProcessor = responseProcessor || new TransformationTemplateApiResponseProcessor();\n    }\n\n    /**\n     * Create/update endpoint Hubsport OAuth configuration Specific private endpoint just for us, to avoid exposing the Hubspot secret to the client.\n     * Update Hubspot Oauth Config\n     * @param appId The app&#39;s ID or UID\n     * @param endpointId The ep&#39;s ID or UID\n     * @param hubspotOauthConfigIn \n     */\n    public v1EndpointUpdateHubspotOauthConfig(appId: string, endpointId: string, hubspotOauthConfigIn: HubspotOauthConfigIn, _options?: Configuration): Observable<void> {\n        const requestContextPromise = this.requestFactory.v1EndpointUpdateHubspotOauthConfig(appId, endpointId, hubspotOauthConfigIn, _options);\n\n        // build promise chain\n        let middlewarePreObservable = from<RequestContext>(requestContextPromise);\n        for (let middleware of this.configuration.middleware) {\n            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));\n        }\n\n        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => this.configuration.httpApi.send(ctx))).\n            pipe(mergeMap((response: ResponseContext) => {\n                let middlewarePostObservable = of(response);\n                for (let middleware of this.configuration.middleware) {\n                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));\n                }\n                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.v1EndpointUpdateHubspotOauthConfig(rsp)));\n            }));\n    }\n \n    /**\n     * Create a new transformation template\n     * Create Transformation Template\n     * @param templateIn \n     * @param idempotencyKey The request&#39;s idempotency key\n     */\n    public v1TransformationTemplateCreate(templateIn: TemplateIn, idempotencyKey?: string, _options?: Configuration): Observable<TemplateOut> {\n        const requestContextPromise = this.requestFactory.v1TransformationTemplateCreate(templateIn, idempotencyKey, _options);\n\n        // build promise chain\n        let middlewarePreObservable = from<RequestContext>(requestContextPromise);\n        for (let middleware of this.configuration.middleware) {\n            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));\n        }\n\n        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => this.configuration.httpApi.send(ctx))).\n            pipe(mergeMap((response: ResponseContext) => {\n                let middlewarePostObservable = of(response);\n                for (let middleware of this.configuration.middleware) {\n                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));\n                }\n                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.v1TransformationTemplateCreate(rsp)));\n            }));\n    }\n \n    /**\n     * Delete a transformation template\n     * Delete Transformation Template\n     * @param transformationTemplateId \n     */\n    public v1TransformationTemplateDelete(transformationTemplateId: string, _options?: Configuration): Observable<void> {\n        const requestContextPromise = this.requestFactory.v1TransformationTemplateDelete(transformationTemplateId, _options);\n\n        // build promise chain\n        let middlewarePreObservable = from<RequestContext>(requestContextPromise);\n        for (let middleware of this.configuration.middleware) {\n            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));\n        }\n\n        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => this.configuration.httpApi.send(ctx))).\n            pipe(mergeMap((response: ResponseContext) => {\n                let middlewarePostObservable = of(response);\n                for (let middleware of this.configuration.middleware) {\n                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));\n                }\n                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.v1TransformationTemplateDelete(rsp)));\n            }));\n    }\n \n    /**\n     * Use OpenAI's Completion API to generate code for a transformation template\n     * Generate\n     * @param generateIn \n     * @param idempotencyKey The request&#39;s idempotency key\n     */\n    public v1TransformationTemplateGenerate(generateIn: GenerateIn, idempotencyKey?: string, _options?: Configuration): Observable<GenerateOut> {\n        const requestContextPromise = this.requestFactory.v1TransformationTemplateGenerate(generateIn, idempotencyKey, _options);\n\n        // build promise chain\n        let middlewarePreObservable = from<RequestContext>(requestContextPromise);\n        for (let middleware of this.configuration.middleware) {\n            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));\n        }\n\n        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => this.configuration.httpApi.send(ctx))).\n            pipe(mergeMap((response: ResponseContext) => {\n                let middlewarePostObservable = of(response);\n                for (let middleware of this.configuration.middleware) {\n                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));\n                }\n                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.v1TransformationTemplateGenerate(rsp)));\n            }));\n    }\n \n    /**\n     * Get a transformation template\n     * Get Transformation Template\n     * @param transformationTemplateId \n     */\n    public v1TransformationTemplateGet(transformationTemplateId: string, _options?: Configuration): Observable<TemplateOut> {\n        const requestContextPromise = this.requestFactory.v1TransformationTemplateGet(transformationTemplateId, _options);\n\n        // build promise chain\n        let middlewarePreObservable = from<RequestContext>(requestContextPromise);\n        for (let middleware of this.configuration.middleware) {\n            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));\n        }\n\n        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => this.configuration.httpApi.send(ctx))).\n            pipe(mergeMap((response: ResponseContext) => {\n                let middlewarePostObservable = of(response);\n                for (let middleware of this.configuration.middleware) {\n                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));\n                }\n                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.v1TransformationTemplateGet(rsp)));\n            }));\n    }\n \n    /**\n     * List all transformation templates for an application\n     * List Transformation Templates\n     * @param limit Limit the number of returned items\n     * @param iterator The iterator returned from a prior invocation\n     * @param order The sorting order of the returned items\n     */\n    public v1TransformationTemplateList(limit?: number, iterator?: string, order?: Ordering, _options?: Configuration): Observable<ListResponseTemplateOut> {\n        const requestContextPromise = this.requestFactory.v1TransformationTemplateList(limit, iterator, order, _options);\n\n        // build promise chain\n        let middlewarePreObservable = from<RequestContext>(requestContextPromise);\n        for (let middleware of this.configuration.middleware) {\n            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));\n        }\n\n        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => this.configuration.httpApi.send(ctx))).\n            pipe(mergeMap((response: ResponseContext) => {\n                let middlewarePostObservable = of(response);\n                for (let middleware of this.configuration.middleware) {\n                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));\n                }\n                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.v1TransformationTemplateList(rsp)));\n            }));\n    }\n \n    /**\n     * Get Discord Incoming webhook URL\n     * Authorize Discord\n     * @param oAuthPayloadIn \n     * @param idempotencyKey The request&#39;s idempotency key\n     */\n    public v1TransformationTemplateOauthDiscord(oAuthPayloadIn: OAuthPayloadIn, idempotencyKey?: string, _options?: Configuration): Observable<IncomingWebhookPayloadOut> {\n        const requestContextPromise = this.requestFactory.v1TransformationTemplateOauthDiscord(oAuthPayloadIn, idempotencyKey, _options);\n\n        // build promise chain\n        let middlewarePreObservable = from<RequestContext>(requestContextPromise);\n        for (let middleware of this.configuration.middleware) {\n            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));\n        }\n\n        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => this.configuration.httpApi.send(ctx))).\n            pipe(mergeMap((response: ResponseContext) => {\n                let middlewarePostObservable = of(response);\n                for (let middleware of this.configuration.middleware) {\n                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));\n                }\n                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.v1TransformationTemplateOauthDiscord(rsp)));\n            }));\n    }\n \n    /**\n     * Get Hubspot access token using authorization code\n     * Authorize Hubspot\n     * @param oAuthPayloadIn \n     * @param idempotencyKey The request&#39;s idempotency key\n     */\n    public v1TransformationTemplateOauthHubspot(oAuthPayloadIn: OAuthPayloadIn, idempotencyKey?: string, _options?: Configuration): Observable<OAuthPayloadOut> {\n        const requestContextPromise = this.requestFactory.v1TransformationTemplateOauthHubspot(oAuthPayloadIn, idempotencyKey, _options);\n\n        // build promise chain\n        let middlewarePreObservable = from<RequestContext>(requestContextPromise);\n        for (let middleware of this.configuration.middleware) {\n            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));\n        }\n\n        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => this.configuration.httpApi.send(ctx))).\n            pipe(mergeMap((response: ResponseContext) => {\n                let middlewarePostObservable = of(response);\n                for (let middleware of this.configuration.middleware) {\n                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));\n                }\n                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.v1TransformationTemplateOauthHubspot(rsp)));\n            }));\n    }\n \n    /**\n     * Get Slack Incoming webhook URL\n     * Authorize Slack\n     * @param oAuthPayloadIn \n     * @param idempotencyKey The request&#39;s idempotency key\n     */\n    public v1TransformationTemplateOauthSlack(oAuthPayloadIn: OAuthPayloadIn, idempotencyKey?: string, _options?: Configuration): Observable<IncomingWebhookPayloadOut> {\n        const requestContextPromise = this.requestFactory.v1TransformationTemplateOauthSlack(oAuthPayloadIn, idempotencyKey, _options);\n\n        // build promise chain\n        let middlewarePreObservable = from<RequestContext>(requestContextPromise);\n        for (let middleware of this.configuration.middleware) {\n            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));\n        }\n\n        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => this.configuration.httpApi.send(ctx))).\n            pipe(mergeMap((response: ResponseContext) => {\n                let middlewarePostObservable = of(response);\n                for (let middleware of this.configuration.middleware) {\n                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));\n                }\n                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.v1TransformationTemplateOauthSlack(rsp)));\n            }));\n    }\n \n    /**\n     * Partially update a transformation template\n     * Patch Transformation Template\n     * @param transformationTemplateId \n     * @param templatePatch \n     */\n    public v1TransformationTemplatePatch(transformationTemplateId: string, templatePatch: TemplatePatch, _options?: Configuration): Observable<TemplateOut> {\n        const requestContextPromise = this.requestFactory.v1TransformationTemplatePatch(transformationTemplateId, templatePatch, _options);\n\n        // build promise chain\n        let middlewarePreObservable = from<RequestContext>(requestContextPromise);\n        for (let middleware of this.configuration.middleware) {\n            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));\n        }\n\n        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => this.configuration.httpApi.send(ctx))).\n            pipe(mergeMap((response: ResponseContext) => {\n                let middlewarePostObservable = of(response);\n                for (let middleware of this.configuration.middleware) {\n                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));\n                }\n                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.v1TransformationTemplatePatch(rsp)));\n            }));\n    }\n \n    /**\n     * Simulate running the transformation on the payload and code\n     * Simulate\n     * @param transformationSimulateIn \n     * @param idempotencyKey The request&#39;s idempotency key\n     */\n    public v1TransformationTemplateSimulate(transformationSimulateIn: TransformationSimulateIn, idempotencyKey?: string, _options?: Configuration): Observable<TransformationSimulateOut> {\n        const requestContextPromise = this.requestFactory.v1TransformationTemplateSimulate(transformationSimulateIn, idempotencyKey, _options);\n\n        // build promise chain\n        let middlewarePreObservable = from<RequestContext>(requestContextPromise);\n        for (let middleware of this.configuration.middleware) {\n            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));\n        }\n\n        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => this.configuration.httpApi.send(ctx))).\n            pipe(mergeMap((response: ResponseContext) => {\n                let middlewarePostObservable = of(response);\n                for (let middleware of this.configuration.middleware) {\n                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));\n                }\n                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.v1TransformationTemplateSimulate(rsp)));\n            }));\n    }\n \n    /**\n     * Update a transformation template\n     * Update Transformation Template\n     * @param transformationTemplateId \n     * @param templateUpdate \n     */\n    public v1TransformationTemplateUpdate(transformationTemplateId: string, templateUpdate: TemplateUpdate, _options?: Configuration): Observable<TemplateOut> {\n        const requestContextPromise = this.requestFactory.v1TransformationTemplateUpdate(transformationTemplateId, templateUpdate, _options);\n\n        // build promise chain\n        let middlewarePreObservable = from<RequestContext>(requestContextPromise);\n        for (let middleware of this.configuration.middleware) {\n            middlewarePreObservable = middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => middleware.pre(ctx)));\n        }\n\n        return middlewarePreObservable.pipe(mergeMap((ctx: RequestContext) => this.configuration.httpApi.send(ctx))).\n            pipe(mergeMap((response: ResponseContext) => {\n                let middlewarePostObservable = of(response);\n                for (let middleware of this.configuration.middleware) {\n                    middlewarePostObservable = middlewarePostObservable.pipe(mergeMap((rsp: ResponseContext) => middleware.post(rsp)));\n                }\n                return middlewarePostObservable.pipe(map((rsp: ResponseContext) => this.responseProcessor.v1TransformationTemplateUpdate(rsp)));\n            }));\n    }\n \n}\n"],"names":[],"mappings":"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"}},
    {"offset": {"line": 1727, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 1731, "column": 0}, "map": {"version":3,"sources":["turbopack://[project]/node_modules/svix/src/openapi/types/ObjectParamAPI.ts"],"sourcesContent":["import { ResponseContext, RequestContext, HttpFile } from '../http/http';\nimport * as models from '../models/all';\nimport { Configuration} from '../configuration'\n\nimport { AggregateEventTypesOut } from '../models/AggregateEventTypesOut';\nimport { AppPortalAccessIn } from '../models/AppPortalAccessIn';\nimport { AppPortalAccessOut } from '../models/AppPortalAccessOut';\nimport { AppUsageStatsIn } from '../models/AppUsageStatsIn';\nimport { AppUsageStatsOut } from '../models/AppUsageStatsOut';\nimport { ApplicationIn } from '../models/ApplicationIn';\nimport { ApplicationOut } from '../models/ApplicationOut';\nimport { ApplicationPatch } from '../models/ApplicationPatch';\nimport { ApplicationStats } from '../models/ApplicationStats';\nimport { ApplicationTokenExpireIn } from '../models/ApplicationTokenExpireIn';\nimport { AttemptStatisticsData } from '../models/AttemptStatisticsData';\nimport { AttemptStatisticsResponse } from '../models/AttemptStatisticsResponse';\nimport { AuthTokenOut } from '../models/AuthTokenOut';\nimport { AzureBlobStorageConfig } from '../models/AzureBlobStorageConfig';\nimport { BackgroundTaskOut } from '../models/BackgroundTaskOut';\nimport { BackgroundTaskStatus } from '../models/BackgroundTaskStatus';\nimport { BackgroundTaskType } from '../models/BackgroundTaskType';\nimport { BorderRadiusConfig } from '../models/BorderRadiusConfig';\nimport { BorderRadiusEnum } from '../models/BorderRadiusEnum';\nimport { ClientSecretJwtParamsIn } from '../models/ClientSecretJwtParamsIn';\nimport { CompletionChoice } from '../models/CompletionChoice';\nimport { CompletionMessage } from '../models/CompletionMessage';\nimport { CreateMessageTokenIn } from '../models/CreateMessageTokenIn';\nimport { CreateStreamIn } from '../models/CreateStreamIn';\nimport { CustomColorPalette } from '../models/CustomColorPalette';\nimport { CustomStringsOverride } from '../models/CustomStringsOverride';\nimport { CustomThemeOverride } from '../models/CustomThemeOverride';\nimport { DashboardAccessOut } from '../models/DashboardAccessOut';\nimport { Duration } from '../models/Duration';\nimport { EndpointCreatedEvent } from '../models/EndpointCreatedEvent';\nimport { EndpointCreatedEventData } from '../models/EndpointCreatedEventData';\nimport { EndpointDeletedEvent } from '../models/EndpointDeletedEvent';\nimport { EndpointDeletedEventData } from '../models/EndpointDeletedEventData';\nimport { EndpointDisabledEvent } from '../models/EndpointDisabledEvent';\nimport { EndpointDisabledEventData } from '../models/EndpointDisabledEventData';\nimport { EndpointHeadersIn } from '../models/EndpointHeadersIn';\nimport { EndpointHeadersOut } from '../models/EndpointHeadersOut';\nimport { EndpointHeadersPatchIn } from '../models/EndpointHeadersPatchIn';\nimport { EndpointIn } from '../models/EndpointIn';\nimport { EndpointMessageOut } from '../models/EndpointMessageOut';\nimport { EndpointMtlsConfigIn } from '../models/EndpointMtlsConfigIn';\nimport { EndpointOauthConfigIn } from '../models/EndpointOauthConfigIn';\nimport { EndpointOut } from '../models/EndpointOut';\nimport { EndpointPatch } from '../models/EndpointPatch';\nimport { EndpointSecretOut } from '../models/EndpointSecretOut';\nimport { EndpointSecretRotateIn } from '../models/EndpointSecretRotateIn';\nimport { EndpointStats } from '../models/EndpointStats';\nimport { EndpointTransformationIn } from '../models/EndpointTransformationIn';\nimport { EndpointTransformationOut } from '../models/EndpointTransformationOut';\nimport { EndpointTransformationSimulateIn } from '../models/EndpointTransformationSimulateIn';\nimport { EndpointTransformationSimulateOut } from '../models/EndpointTransformationSimulateOut';\nimport { EndpointUpdate } from '../models/EndpointUpdate';\nimport { EndpointUpdatedEvent } from '../models/EndpointUpdatedEvent';\nimport { EndpointUpdatedEventData } from '../models/EndpointUpdatedEventData';\nimport { EnvironmentIn } from '../models/EnvironmentIn';\nimport { EnvironmentOut } from '../models/EnvironmentOut';\nimport { EnvironmentSettingsOut } from '../models/EnvironmentSettingsOut';\nimport { EventExampleIn } from '../models/EventExampleIn';\nimport { EventIn } from '../models/EventIn';\nimport { EventOut } from '../models/EventOut';\nimport { EventStreamOut } from '../models/EventStreamOut';\nimport { EventTypeExampleOut } from '../models/EventTypeExampleOut';\nimport { EventTypeFromOpenApi } from '../models/EventTypeFromOpenApi';\nimport { EventTypeImportOpenApiIn } from '../models/EventTypeImportOpenApiIn';\nimport { EventTypeImportOpenApiOut } from '../models/EventTypeImportOpenApiOut';\nimport { EventTypeImportOpenApiOutData } from '../models/EventTypeImportOpenApiOutData';\nimport { EventTypeIn } from '../models/EventTypeIn';\nimport { EventTypeOut } from '../models/EventTypeOut';\nimport { EventTypePatch } from '../models/EventTypePatch';\nimport { EventTypeSchemaIn } from '../models/EventTypeSchemaIn';\nimport { EventTypeUpdate } from '../models/EventTypeUpdate';\nimport { ExportEventTypeOut } from '../models/ExportEventTypeOut';\nimport { FontSizeConfig } from '../models/FontSizeConfig';\nimport { GenerateIn } from '../models/GenerateIn';\nimport { GenerateOut } from '../models/GenerateOut';\nimport { GoogleCloudStorageConfig } from '../models/GoogleCloudStorageConfig';\nimport { HTTPValidationError } from '../models/HTTPValidationError';\nimport { HttpErrorOut } from '../models/HttpErrorOut';\nimport { HubspotOauthConfigIn } from '../models/HubspotOauthConfigIn';\nimport { InboundPathParams } from '../models/InboundPathParams';\nimport { IncomingWebhookPayloadOut } from '../models/IncomingWebhookPayloadOut';\nimport { IntegrationIn } from '../models/IntegrationIn';\nimport { IntegrationKeyOut } from '../models/IntegrationKeyOut';\nimport { IntegrationOut } from '../models/IntegrationOut';\nimport { IntegrationUpdate } from '../models/IntegrationUpdate';\nimport { KafkaSecurityProtocolType } from '../models/KafkaSecurityProtocolType';\nimport { ListResponseApplicationOut } from '../models/ListResponseApplicationOut';\nimport { ListResponseApplicationStats } from '../models/ListResponseApplicationStats';\nimport { ListResponseBackgroundTaskOut } from '../models/ListResponseBackgroundTaskOut';\nimport { ListResponseEndpointMessageOut } from '../models/ListResponseEndpointMessageOut';\nimport { ListResponseEndpointOut } from '../models/ListResponseEndpointOut';\nimport { ListResponseEventTypeOut } from '../models/ListResponseEventTypeOut';\nimport { ListResponseIntegrationOut } from '../models/ListResponseIntegrationOut';\nimport { ListResponseMessageAttemptEndpointOut } from '../models/ListResponseMessageAttemptEndpointOut';\nimport { ListResponseMessageAttemptOut } from '../models/ListResponseMessageAttemptOut';\nimport { ListResponseMessageEndpointOut } from '../models/ListResponseMessageEndpointOut';\nimport { ListResponseMessageOut } from '../models/ListResponseMessageOut';\nimport { ListResponseSinkOut } from '../models/ListResponseSinkOut';\nimport { ListResponseStreamOut } from '../models/ListResponseStreamOut';\nimport { ListResponseStreamSinkOut } from '../models/ListResponseStreamSinkOut';\nimport { ListResponseTemplateOut } from '../models/ListResponseTemplateOut';\nimport { MessageAttemptEndpointOut } from '../models/MessageAttemptEndpointOut';\nimport { MessageAttemptExhaustedEvent } from '../models/MessageAttemptExhaustedEvent';\nimport { MessageAttemptExhaustedEventData } from '../models/MessageAttemptExhaustedEventData';\nimport { MessageAttemptFailedData } from '../models/MessageAttemptFailedData';\nimport { MessageAttemptFailingEvent } from '../models/MessageAttemptFailingEvent';\nimport { MessageAttemptFailingEventData } from '../models/MessageAttemptFailingEventData';\nimport { MessageAttemptHeadersOut } from '../models/MessageAttemptHeadersOut';\nimport { MessageAttemptOut } from '../models/MessageAttemptOut';\nimport { MessageAttemptRecoveredEvent } from '../models/MessageAttemptRecoveredEvent';\nimport { MessageAttemptRecoveredEventData } from '../models/MessageAttemptRecoveredEventData';\nimport { MessageAttemptTriggerType } from '../models/MessageAttemptTriggerType';\nimport { MessageBroadcastIn } from '../models/MessageBroadcastIn';\nimport { MessageBroadcastOut } from '../models/MessageBroadcastOut';\nimport { MessageEndpointOut } from '../models/MessageEndpointOut';\nimport { MessageEventsOut } from '../models/MessageEventsOut';\nimport { MessageIn } from '../models/MessageIn';\nimport { MessageOut } from '../models/MessageOut';\nimport { MessageRawPayloadOut } from '../models/MessageRawPayloadOut';\nimport { MessageStatus } from '../models/MessageStatus';\nimport { MessageSubscriberAuthTokenOut } from '../models/MessageSubscriberAuthTokenOut';\nimport { OAuthPayloadIn } from '../models/OAuthPayloadIn';\nimport { OAuthPayloadOut } from '../models/OAuthPayloadOut';\nimport { Oauth2AuthMethodIn } from '../models/Oauth2AuthMethodIn';\nimport { Oauth2GrantTypeIn } from '../models/Oauth2GrantTypeIn';\nimport { OauthJwsSigningAlgorithm } from '../models/OauthJwsSigningAlgorithm';\nimport { OneTimeTokenIn } from '../models/OneTimeTokenIn';\nimport { OneTimeTokenOut } from '../models/OneTimeTokenOut';\nimport { Ordering } from '../models/Ordering';\nimport { RecoverIn } from '../models/RecoverIn';\nimport { RecoverOut } from '../models/RecoverOut';\nimport { RedshiftConfig } from '../models/RedshiftConfig';\nimport { ReplayIn } from '../models/ReplayIn';\nimport { ReplayOut } from '../models/ReplayOut';\nimport { RetryScheduleInOut } from '../models/RetryScheduleInOut';\nimport { RotatedUrlOut } from '../models/RotatedUrlOut';\nimport { S3Config } from '../models/S3Config';\nimport { SettingsIn } from '../models/SettingsIn';\nimport { SettingsOut } from '../models/SettingsOut';\nimport { SinkHttpConfig } from '../models/SinkHttpConfig';\nimport { SinkIn } from '../models/SinkIn';\nimport { SinkInOneOf } from '../models/SinkInOneOf';\nimport { SinkInOneOf1 } from '../models/SinkInOneOf1';\nimport { SinkInOneOf2 } from '../models/SinkInOneOf2';\nimport { SinkInOneOf3 } from '../models/SinkInOneOf3';\nimport { SinkOtelV1Config } from '../models/SinkOtelV1Config';\nimport { SinkOut } from '../models/SinkOut';\nimport { SinkPayloadFormat } from '../models/SinkPayloadFormat';\nimport { SinkStatus } from '../models/SinkStatus';\nimport { SinkStatusIn } from '../models/SinkStatusIn';\nimport { SinkTransformIn } from '../models/SinkTransformIn';\nimport { SinkTransformationOut } from '../models/SinkTransformationOut';\nimport { SnowflakeConfig } from '../models/SnowflakeConfig';\nimport { StatisticsPeriod } from '../models/StatisticsPeriod';\nimport { StatusCodeClass } from '../models/StatusCodeClass';\nimport { StreamIn } from '../models/StreamIn';\nimport { StreamOut } from '../models/StreamOut';\nimport { StreamPatch } from '../models/StreamPatch';\nimport { StreamSinkIn } from '../models/StreamSinkIn';\nimport { StreamSinkInOneOf } from '../models/StreamSinkInOneOf';\nimport { StreamSinkInOneOf1 } from '../models/StreamSinkInOneOf1';\nimport { StreamSinkInOneOf2 } from '../models/StreamSinkInOneOf2';\nimport { StreamSinkInOneOf3 } from '../models/StreamSinkInOneOf3';\nimport { StreamSinkInOneOf4 } from '../models/StreamSinkInOneOf4';\nimport { StreamSinkInOneOf5 } from '../models/StreamSinkInOneOf5';\nimport { StreamSinkInOneOf6 } from '../models/StreamSinkInOneOf6';\nimport { StreamSinkOut } from '../models/StreamSinkOut';\nimport { StreamSinkPatch } from '../models/StreamSinkPatch';\nimport { TemplateIn } from '../models/TemplateIn';\nimport { TemplateOut } from '../models/TemplateOut';\nimport { TemplatePatch } from '../models/TemplatePatch';\nimport { TemplateUpdate } from '../models/TemplateUpdate';\nimport { TransformationHttpMethod } from '../models/TransformationHttpMethod';\nimport { TransformationSimulateIn } from '../models/TransformationSimulateIn';\nimport { TransformationSimulateOut } from '../models/TransformationSimulateOut';\nimport { TransformationTemplateKind } from '../models/TransformationTemplateKind';\nimport { ValidationError } from '../models/ValidationError';\n\nimport { ObservableApplicationApi } from \"./ObservableAPI\";\nimport { ApplicationApiRequestFactory, ApplicationApiResponseProcessor} from \"../apis/ApplicationApi\";\n\nexport interface ApplicationApiGetAppUsageStatsApiV1AppStatsUsageGetRequest {\n    /**\n     * Filter the range to data after this date\n     * @type Date\n     * @memberof ApplicationApigetAppUsageStatsApiV1AppStatsUsageGet\n     */\n    since: Date\n    /**\n     * Filter the range to data before this date\n     * @type Date\n     * @memberof ApplicationApigetAppUsageStatsApiV1AppStatsUsageGet\n     */\n    until: Date\n    /**\n     * Limit the number of returned items\n     * @type number\n     * @memberof ApplicationApigetAppUsageStatsApiV1AppStatsUsageGet\n     */\n    limit?: number\n    /**\n     * The iterator to use (depends on the chosen ordering)\n     * @type string\n     * @memberof ApplicationApigetAppUsageStatsApiV1AppStatsUsageGet\n     */\n    iterator?: string\n}\n\nexport interface ApplicationApiV1ApplicationCreateRequest {\n    /**\n     * \n     * @type ApplicationIn\n     * @memberof ApplicationApiv1ApplicationCreate\n     */\n    applicationIn: ApplicationIn\n    /**\n     * Get an existing application, or create a new one if doesn&#39;t exist. It&#39;s two separate functions in the libs.\n     * @type boolean\n     * @memberof ApplicationApiv1ApplicationCreate\n     */\n    getIfExists?: boolean\n    /**\n     * The request&#39;s idempotency key\n     * @type string\n     * @memberof ApplicationApiv1ApplicationCreate\n     */\n    idempotencyKey?: string\n}\n\nexport interface ApplicationApiV1ApplicationDeleteRequest {\n    /**\n     * The app&#39;s ID or UID\n     * @type string\n     * @memberof ApplicationApiv1ApplicationDelete\n     */\n    appId: string\n}\n\nexport interface ApplicationApiV1ApplicationGetRequest {\n    /**\n     * The app&#39;s ID or UID\n     * @type string\n     * @memberof ApplicationApiv1ApplicationGet\n     */\n    appId: string\n}\n\nexport interface ApplicationApiV1ApplicationGetStatsRequest {\n    /**\n     * Filter the range to data starting from this date\n     * @type Date\n     * @memberof ApplicationApiv1ApplicationGetStats\n     */\n    since: Date\n    /**\n     * Filter the range to data ending by this date\n     * @type Date\n     * @memberof ApplicationApiv1ApplicationGetStats\n     */\n    until: Date\n    /**\n     * The app&#39;s ID or UID\n     * @type string\n     * @memberof ApplicationApiv1ApplicationGetStats\n     */\n    appId: string\n}\n\nexport interface ApplicationApiV1ApplicationListRequest {\n    /**\n     * Limit the number of returned items\n     * @type number\n     * @memberof ApplicationApiv1ApplicationList\n     */\n    limit?: number\n    /**\n     * The iterator returned from a prior invocation\n     * @type string\n     * @memberof ApplicationApiv1ApplicationList\n     */\n    iterator?: string\n    /**\n     * The sorting order of the returned items\n     * @type Ordering\n     * @memberof ApplicationApiv1ApplicationList\n     */\n    order?: Ordering\n}\n\nexport interface ApplicationApiV1ApplicationPatchRequest {\n    /**\n     * The app&#39;s ID or UID\n     * @type string\n     * @memberof ApplicationApiv1ApplicationPatch\n     */\n    appId: string\n    /**\n     * \n     * @type ApplicationPatch\n     * @memberof ApplicationApiv1ApplicationPatch\n     */\n    applicationPatch: ApplicationPatch\n}\n\nexport interface ApplicationApiV1ApplicationUpdateRequest {\n    /**\n     * The app&#39;s ID or UID\n     * @type string\n     * @memberof ApplicationApiv1ApplicationUpdate\n     */\n    appId: string\n    /**\n     * \n     * @type ApplicationIn\n     * @memberof ApplicationApiv1ApplicationUpdate\n     */\n    applicationIn: ApplicationIn\n}\n\nexport class ObjectApplicationApi {\n    private api: ObservableApplicationApi\n\n    public constructor(configuration: Configuration, requestFactory?: ApplicationApiRequestFactory, responseProcessor?: ApplicationApiResponseProcessor) {\n        this.api = new ObservableApplicationApi(configuration, requestFactory, responseProcessor);\n    }\n\n    /**\n     * Get basic statistics for all applications.\n     * Get App Usage Stats\n     * @param param the request object\n     */\n    public getAppUsageStatsApiV1AppStatsUsageGet(param: ApplicationApiGetAppUsageStatsApiV1AppStatsUsageGetRequest, options?: Configuration): Promise<ListResponseApplicationStats> {\n        return this.api.getAppUsageStatsApiV1AppStatsUsageGet(param.since, param.until, param.limit, param.iterator,  options).toPromise();\n    }\n\n    /**\n     * Create a new application.\n     * Create Application\n     * @param param the request object\n     */\n    public v1ApplicationCreate(param: ApplicationApiV1ApplicationCreateRequest, options?: Configuration): Promise<ApplicationOut> {\n        return this.api.v1ApplicationCreate(param.applicationIn, param.getIfExists, param.idempotencyKey,  options).toPromise();\n    }\n\n    /**\n     * Delete an application.\n     * Delete Application\n     * @param param the request object\n     */\n    public v1ApplicationDelete(param: ApplicationApiV1ApplicationDeleteRequest, options?: Configuration): Promise<void> {\n        return this.api.v1ApplicationDelete(param.appId,  options).toPromise();\n    }\n\n    /**\n     * Get an application.\n     * Get Application\n     * @param param the request object\n     */\n    public v1ApplicationGet(param: ApplicationApiV1ApplicationGetRequest, options?: Configuration): Promise<ApplicationOut> {\n        return this.api.v1ApplicationGet(param.appId,  options).toPromise();\n    }\n\n    /**\n     * Get basic statistics for the application\n     * Get App Stats\n     * @param param the request object\n     */\n    public v1ApplicationGetStats(param: ApplicationApiV1ApplicationGetStatsRequest, options?: Configuration): Promise<ApplicationStats> {\n        return this.api.v1ApplicationGetStats(param.since, param.until, param.appId,  options).toPromise();\n    }\n\n    /**\n     * List of all the organization's applications.\n     * List Applications\n     * @param param the request object\n     */\n    public v1ApplicationList(param: ApplicationApiV1ApplicationListRequest, options?: Configuration): Promise<ListResponseApplicationOut> {\n        return this.api.v1ApplicationList(param.limit, param.iterator, param.order,  options).toPromise();\n    }\n\n    /**\n     * Partially update an application.\n     * Patch Application\n     * @param param the request object\n     */\n    public v1ApplicationPatch(param: ApplicationApiV1ApplicationPatchRequest, options?: Configuration): Promise<ApplicationOut> {\n        return this.api.v1ApplicationPatch(param.appId, param.applicationPatch,  options).toPromise();\n    }\n\n    /**\n     * Update an application.\n     * Update Application\n     * @param param the request object\n     */\n    public v1ApplicationUpdate(param: ApplicationApiV1ApplicationUpdateRequest, options?: Configuration): Promise<ApplicationOut> {\n        return this.api.v1ApplicationUpdate(param.appId, param.applicationIn,  options).toPromise();\n    }\n\n}\n\nimport { ObservableAuthenticationApi } from \"./ObservableAPI\";\nimport { AuthenticationApiRequestFactory, AuthenticationApiResponseProcessor} from \"../apis/AuthenticationApi\";\n\nexport interface AuthenticationApiV1AuthenticationAppPortalAccessRequest {\n    /**\n     * The app&#39;s ID or UID\n     * @type string\n     * @memberof AuthenticationApiv1AuthenticationAppPortalAccess\n     */\n    appId: string\n    /**\n     * \n     * @type AppPortalAccessIn\n     * @memberof AuthenticationApiv1AuthenticationAppPortalAccess\n     */\n    appPortalAccessIn: AppPortalAccessIn\n    /**\n     * The request&#39;s idempotency key\n     * @type string\n     * @memberof AuthenticationApiv1AuthenticationAppPortalAccess\n     */\n    idempotencyKey?: string\n}\n\nexport interface AuthenticationApiV1AuthenticationCreateMessageTokenRequest {\n    /**\n     * The app&#39;s ID or UID\n     * @type string\n     * @memberof AuthenticationApiv1AuthenticationCreateMessageToken\n     */\n    appId: string\n    /**\n     * \n     * @type CreateMessageTokenIn\n     * @memberof AuthenticationApiv1AuthenticationCreateMessageToken\n     */\n    createMessageTokenIn: CreateMessageTokenIn\n    /**\n     * The request&#39;s idempotency key\n     * @type string\n     * @memberof AuthenticationApiv1AuthenticationCreateMessageToken\n     */\n    idempotencyKey?: string\n}\n\nexport interface AuthenticationApiV1AuthenticationDashboardAccessRequest {\n    /**\n     * The app&#39;s ID or UID\n     * @type string\n     * @memberof AuthenticationApiv1AuthenticationDashboardAccess\n     */\n    appId: string\n    /**\n     * The request&#39;s idempotency key\n     * @type string\n     * @memberof AuthenticationApiv1AuthenticationDashboardAccess\n     */\n    idempotencyKey?: string\n}\n\nexport interface AuthenticationApiV1AuthenticationExchangeOneTimeTokenRequest {\n    /**\n     * \n     * @type OneTimeTokenIn\n     * @memberof AuthenticationApiv1AuthenticationExchangeOneTimeToken\n     */\n    oneTimeTokenIn: OneTimeTokenIn\n    /**\n     * The request&#39;s idempotency key\n     * @type string\n     * @memberof AuthenticationApiv1AuthenticationExchangeOneTimeToken\n     */\n    idempotencyKey?: string\n}\n\nexport interface AuthenticationApiV1AuthenticationExpireAllRequest {\n    /**\n     * The app&#39;s ID or UID\n     * @type string\n     * @memberof AuthenticationApiv1AuthenticationExpireAll\n     */\n    appId: string\n    /**\n     * \n     * @type ApplicationTokenExpireIn\n     * @memberof AuthenticationApiv1AuthenticationExpireAll\n     */\n    applicationTokenExpireIn: ApplicationTokenExpireIn\n    /**\n     * The request&#39;s idempotency key\n     * @type string\n     * @memberof AuthenticationApiv1AuthenticationExpireAll\n     */\n    idempotencyKey?: string\n}\n\nexport interface AuthenticationApiV1AuthenticationLogoutRequest {\n    /**\n     * The request&#39;s idempotency key\n     * @type string\n     * @memberof AuthenticationApiv1AuthenticationLogout\n     */\n    idempotencyKey?: string\n}\n\nexport class ObjectAuthenticationApi {\n    private api: ObservableAuthenticationApi\n\n    public constructor(configuration: Configuration, requestFactory?: AuthenticationApiRequestFactory, responseProcessor?: AuthenticationApiResponseProcessor) {\n        this.api = new ObservableAuthenticationApi(configuration, requestFactory, responseProcessor);\n    }\n\n    /**\n     * Use this function to get magic links (and authentication codes) for connecting your users to the Consumer Application Portal.\n     * Get Consumer App Portal Access\n     * @param param the request object\n     */\n    public v1AuthenticationAppPortalAccess(param: AuthenticationApiV1AuthenticationAppPortalAccessRequest, options?: Configuration): Promise<AppPortalAccessOut> {\n        return this.api.v1AuthenticationAppPortalAccess(param.appId, param.appPortalAccessIn, param.idempotencyKey,  options).toPromise();\n    }\n\n    /**\n     * Create a new access token that only allows creating messages inside this application.\n     * Create Cmg Token\n     * @param param the request object\n     */\n    public v1AuthenticationCreateMessageToken(param: AuthenticationApiV1AuthenticationCreateMessageTokenRequest, options?: Configuration): Promise<AuthTokenOut> {\n        return this.api.v1AuthenticationCreateMessageToken(param.appId, param.createMessageTokenIn, param.idempotencyKey,  options).toPromise();\n    }\n\n    /**\n     * DEPRECATED: Please use `app-portal-access` instead.  Use this function to get magic links (and authentication codes) for connecting your users to the Consumer Application Portal.\n     * Dashboard Access\n     * @param param the request object\n     */\n    public v1AuthenticationDashboardAccess(param: AuthenticationApiV1AuthenticationDashboardAccessRequest, options?: Configuration): Promise<DashboardAccessOut> {\n        return this.api.v1AuthenticationDashboardAccess(param.appId, param.idempotencyKey,  options).toPromise();\n    }\n\n    /**\n     * This is a one time token\n     * Exchange One Time Token\n     * @param param the request object\n     */\n    public v1AuthenticationExchangeOneTimeToken(param: AuthenticationApiV1AuthenticationExchangeOneTimeTokenRequest, options?: Configuration): Promise<OneTimeTokenOut> {\n        return this.api.v1AuthenticationExchangeOneTimeToken(param.oneTimeTokenIn, param.idempotencyKey,  options).toPromise();\n    }\n\n    /**\n     * Expire all of the tokens associated with a specific Application\n     * Expire All\n     * @param param the request object\n     */\n    public v1AuthenticationExpireAll(param: AuthenticationApiV1AuthenticationExpireAllRequest, options?: Configuration): Promise<void> {\n        return this.api.v1AuthenticationExpireAll(param.appId, param.applicationTokenExpireIn, param.idempotencyKey,  options).toPromise();\n    }\n\n    /**\n     * Logout an app token.  Trying to log out other tokens will fail.\n     * Logout\n     * @param param the request object\n     */\n    public v1AuthenticationLogout(param: AuthenticationApiV1AuthenticationLogoutRequest, options?: Configuration): Promise<void> {\n        return this.api.v1AuthenticationLogout(param.idempotencyKey,  options).toPromise();\n    }\n\n}\n\nimport { ObservableBackgroundTasksApi } from \"./ObservableAPI\";\nimport { BackgroundTasksApiRequestFactory, BackgroundTasksApiResponseProcessor} from \"../apis/BackgroundTasksApi\";\n\nexport interface BackgroundTasksApiGetBackgroundTaskRequest {\n    /**\n     * \n     * @type string\n     * @memberof BackgroundTasksApigetBackgroundTask\n     */\n    taskId: string\n}\n\nexport interface BackgroundTasksApiListBackgroundTasksRequest {\n    /**\n     * Filter the response based on the status\n     * @type BackgroundTaskStatus\n     * @memberof BackgroundTasksApilistBackgroundTasks\n     */\n    status?: BackgroundTaskStatus\n    /**\n     * Filter the response based on the type\n     * @type BackgroundTaskType\n     * @memberof BackgroundTasksApilistBackgroundTasks\n     */\n    task?: BackgroundTaskType\n    /**\n     * Limit the number of returned items\n     * @type number\n     * @memberof BackgroundTasksApilistBackgroundTasks\n     */\n    limit?: number\n    /**\n     * The iterator returned from a prior invocation\n     * @type string\n     * @memberof BackgroundTasksApilistBackgroundTasks\n     */\n    iterator?: string\n    /**\n     * The sorting order of the returned items\n     * @type Ordering\n     * @memberof BackgroundTasksApilistBackgroundTasks\n     */\n    order?: Ordering\n}\n\nexport class ObjectBackgroundTasksApi {\n    private api: ObservableBackgroundTasksApi\n\n    public constructor(configuration: Configuration, requestFactory?: BackgroundTasksApiRequestFactory, responseProcessor?: BackgroundTasksApiResponseProcessor) {\n        this.api = new ObservableBackgroundTasksApi(configuration, requestFactory, responseProcessor);\n    }\n\n    /**\n     * Get a background task by ID.\n     * Get Background Task\n     * @param param the request object\n     */\n    public getBackgroundTask(param: BackgroundTasksApiGetBackgroundTaskRequest, options?: Configuration): Promise<BackgroundTaskOut> {\n        return this.api.getBackgroundTask(param.taskId,  options).toPromise();\n    }\n\n    /**\n     * List background tasks executed in the past 90 days.\n     * List Background Tasks\n     * @param param the request object\n     */\n    public listBackgroundTasks(param: BackgroundTasksApiListBackgroundTasksRequest, options?: Configuration): Promise<ListResponseBackgroundTaskOut> {\n        return this.api.listBackgroundTasks(param.status, param.task, param.limit, param.iterator, param.order,  options).toPromise();\n    }\n\n}\n\nimport { ObservableBroadcastApi } from \"./ObservableAPI\";\nimport { BroadcastApiRequestFactory, BroadcastApiResponseProcessor} from \"../apis/BroadcastApi\";\n\nexport interface BroadcastApiCreateBroadcastMessageRequest {\n    /**\n     * \n     * @type MessageBroadcastIn\n     * @memberof BroadcastApicreateBroadcastMessage\n     */\n    messageBroadcastIn: MessageBroadcastIn\n    /**\n     * The request&#39;s idempotency key\n     * @type string\n     * @memberof BroadcastApicreateBroadcastMessage\n     */\n    idempotencyKey?: string\n}\n\nexport class ObjectBroadcastApi {\n    private api: ObservableBroadcastApi\n\n    public constructor(configuration: Configuration, requestFactory?: BroadcastApiRequestFactory, responseProcessor?: BroadcastApiResponseProcessor) {\n        this.api = new ObservableBroadcastApi(configuration, requestFactory, responseProcessor);\n    }\n\n    /**\n     * Creates a background task to send the same message to each application in your organization\n     * Create Broadcast Message\n     * @param param the request object\n     */\n    public createBroadcastMessage(param: BroadcastApiCreateBroadcastMessageRequest, options?: Configuration): Promise<MessageBroadcastOut> {\n        return this.api.createBroadcastMessage(param.messageBroadcastIn, param.idempotencyKey,  options).toPromise();\n    }\n\n}\n\nimport { ObservableEndpointApi } from \"./ObservableAPI\";\nimport { EndpointApiRequestFactory, EndpointApiResponseProcessor} from \"../apis/EndpointApi\";\n\nexport interface EndpointApiV1EndpointCreateRequest {\n    /**\n     * The app&#39;s ID or UID\n     * @type string\n     * @memberof EndpointApiv1EndpointCreate\n     */\n    appId: string\n    /**\n     * \n     * @type EndpointIn\n     * @memberof EndpointApiv1EndpointCreate\n     */\n    endpointIn: EndpointIn\n    /**\n     * The request&#39;s idempotency key\n     * @type string\n     * @memberof EndpointApiv1EndpointCreate\n     */\n    idempotencyKey?: string\n}\n\nexport interface EndpointApiV1EndpointDeleteRequest {\n    /**\n     * The app&#39;s ID or UID\n     * @type string\n     * @memberof EndpointApiv1EndpointDelete\n     */\n    appId: string\n    /**\n     * The ep&#39;s ID or UID\n     * @type string\n     * @memberof EndpointApiv1EndpointDelete\n     */\n    endpointId: string\n}\n\nexport interface EndpointApiV1EndpointDeleteMtlsConfigRequest {\n    /**\n     * The app&#39;s ID or UID\n     * @type string\n     * @memberof EndpointApiv1EndpointDeleteMtlsConfig\n     */\n    appId: string\n    /**\n     * The ep&#39;s ID or UID\n     * @type string\n     * @memberof EndpointApiv1EndpointDeleteMtlsConfig\n     */\n    endpointId: string\n}\n\nexport interface EndpointApiV1EndpointDeleteOauthConfigRequest {\n    /**\n     * The app&#39;s ID or UID\n     * @type string\n     * @memberof EndpointApiv1EndpointDeleteOauthConfig\n     */\n    appId: string\n    /**\n     * The ep&#39;s ID or UID\n     * @type string\n     * @memberof EndpointApiv1EndpointDeleteOauthConfig\n     */\n    endpointId: string\n}\n\nexport interface EndpointApiV1EndpointGetRequest {\n    /**\n     * The app&#39;s ID or UID\n     * @type string\n     * @memberof EndpointApiv1EndpointGet\n     */\n    appId: string\n    /**\n     * The ep&#39;s ID or UID\n     * @type string\n     * @memberof EndpointApiv1EndpointGet\n     */\n    endpointId: string\n}\n\nexport interface EndpointApiV1EndpointGetHeadersRequest {\n    /**\n     * The app&#39;s ID or UID\n     * @type string\n     * @memberof EndpointApiv1EndpointGetHeaders\n     */\n    appId: string\n    /**\n     * The ep&#39;s ID or UID\n     * @type string\n     * @memberof EndpointApiv1EndpointGetHeaders\n     */\n    endpointId: string\n}\n\nexport interface EndpointApiV1EndpointGetSecretRequest {\n    /**\n     * The app&#39;s ID or UID\n     * @type string\n     * @memberof EndpointApiv1EndpointGetSecret\n     */\n    appId: string\n    /**\n     * The ep&#39;s ID or UID\n     * @type string\n     * @memberof EndpointApiv1EndpointGetSecret\n     */\n    endpointId: string\n}\n\nexport interface EndpointApiV1EndpointGetStatsRequest {\n    /**\n     * The app&#39;s ID or UID\n     * @type string\n     * @memberof EndpointApiv1EndpointGetStats\n     */\n    appId: string\n    /**\n     * The ep&#39;s ID or UID\n     * @type string\n     * @memberof EndpointApiv1EndpointGetStats\n     */\n    endpointId: string\n    /**\n     * Filter the range to data starting from this date\n     * @type Date\n     * @memberof EndpointApiv1EndpointGetStats\n     */\n    since?: Date\n    /**\n     * Filter the range to data ending by this date\n     * @type Date\n     * @memberof EndpointApiv1EndpointGetStats\n     */\n    until?: Date\n}\n\nexport interface EndpointApiV1EndpointListRequest {\n    /**\n     * The app&#39;s ID or UID\n     * @type string\n     * @memberof EndpointApiv1EndpointList\n     */\n    appId: string\n    /**\n     * Limit the number of returned items\n     * @type number\n     * @memberof EndpointApiv1EndpointList\n     */\n    limit?: number\n    /**\n     * The iterator returned from a prior invocation\n     * @type string\n     * @memberof EndpointApiv1EndpointList\n     */\n    iterator?: string\n    /**\n     * The sorting order of the returned items\n     * @type Ordering\n     * @memberof EndpointApiv1EndpointList\n     */\n    order?: Ordering\n}\n\nexport interface EndpointApiV1EndpointPatchRequest {\n    /**\n     * The app&#39;s ID or UID\n     * @type string\n     * @memberof EndpointApiv1EndpointPatch\n     */\n    appId: string\n    /**\n     * The ep&#39;s ID or UID\n     * @type string\n     * @memberof EndpointApiv1EndpointPatch\n     */\n    endpointId: string\n    /**\n     * \n     * @type EndpointPatch\n     * @memberof EndpointApiv1EndpointPatch\n     */\n    endpointPatch: EndpointPatch\n}\n\nexport interface EndpointApiV1EndpointPatchHeadersRequest {\n    /**\n     * The app&#39;s ID or UID\n     * @type string\n     * @memberof EndpointApiv1EndpointPatchHeaders\n     */\n    appId: string\n    /**\n     * The ep&#39;s ID or UID\n     * @type string\n     * @memberof EndpointApiv1EndpointPatchHeaders\n     */\n    endpointId: string\n    /**\n     * \n     * @type EndpointHeadersPatchIn\n     * @memberof EndpointApiv1EndpointPatchHeaders\n     */\n    endpointHeadersPatchIn: EndpointHeadersPatchIn\n}\n\nexport interface EndpointApiV1EndpointRecoverRequest {\n    /**\n     * The app&#39;s ID or UID\n     * @type string\n     * @memberof EndpointApiv1EndpointRecover\n     */\n    appId: string\n    /**\n     * The ep&#39;s ID or UID\n     * @type string\n     * @memberof EndpointApiv1EndpointRecover\n     */\n    endpointId: string\n    /**\n     * \n     * @type RecoverIn\n     * @memberof EndpointApiv1EndpointRecover\n     */\n    recoverIn: RecoverIn\n    /**\n     * The request&#39;s idempotency key\n     * @type string\n     * @memberof EndpointApiv1EndpointRecover\n     */\n    idempotencyKey?: string\n}\n\nexport interface EndpointApiV1EndpointReplayRequest {\n    /**\n     * The app&#39;s ID or UID\n     * @type string\n     * @memberof EndpointApiv1EndpointReplay\n     */\n    appId: string\n    /**\n     * The ep&#39;s ID or UID\n     * @type string\n     * @memberof EndpointApiv1EndpointReplay\n     */\n    endpointId: string\n    /**\n     * \n     * @type ReplayIn\n     * @memberof EndpointApiv1EndpointReplay\n     */\n    replayIn: ReplayIn\n    /**\n     * The request&#39;s idempotency key\n     * @type string\n     * @memberof EndpointApiv1EndpointReplay\n     */\n    idempotencyKey?: string\n}\n\nexport interface EndpointApiV1EndpointRotateSecretRequest {\n    /**\n     * The app&#39;s ID or UID\n     * @type string\n     * @memberof EndpointApiv1EndpointRotateSecret\n     */\n    appId: string\n    /**\n     * The ep&#39;s ID or UID\n     * @type string\n     * @memberof EndpointApiv1EndpointRotateSecret\n     */\n    endpointId: string\n    /**\n     * \n     * @type EndpointSecretRotateIn\n     * @memberof EndpointApiv1EndpointRotateSecret\n     */\n    endpointSecretRotateIn: EndpointSecretRotateIn\n    /**\n     * The request&#39;s idempotency key\n     * @type string\n     * @memberof EndpointApiv1EndpointRotateSecret\n     */\n    idempotencyKey?: string\n}\n\nexport interface EndpointApiV1EndpointSendExampleRequest {\n    /**\n     * The app&#39;s ID or UID\n     * @type string\n     * @memberof EndpointApiv1EndpointSendExample\n     */\n    appId: string\n    /**\n     * The ep&#39;s ID or UID\n     * @type string\n     * @memberof EndpointApiv1EndpointSendExample\n     */\n    endpointId: string\n    /**\n     * \n     * @type EventExampleIn\n     * @memberof EndpointApiv1EndpointSendExample\n     */\n    eventExampleIn: EventExampleIn\n    /**\n     * The request&#39;s idempotency key\n     * @type string\n     * @memberof EndpointApiv1EndpointSendExample\n     */\n    idempotencyKey?: string\n}\n\nexport interface EndpointApiV1EndpointTransformationGetRequest {\n    /**\n     * The app&#39;s ID or UID\n     * @type string\n     * @memberof EndpointApiv1EndpointTransformationGet\n     */\n    appId: string\n    /**\n     * The ep&#39;s ID or UID\n     * @type string\n     * @memberof EndpointApiv1EndpointTransformationGet\n     */\n    endpointId: string\n}\n\nexport interface EndpointApiV1EndpointTransformationPartialUpdateRequest {\n    /**\n     * The app&#39;s ID or UID\n     * @type string\n     * @memberof EndpointApiv1EndpointTransformationPartialUpdate\n     */\n    appId: string\n    /**\n     * The ep&#39;s ID or UID\n     * @type string\n     * @memberof EndpointApiv1EndpointTransformationPartialUpdate\n     */\n    endpointId: string\n    /**\n     * \n     * @type EndpointTransformationIn\n     * @memberof EndpointApiv1EndpointTransformationPartialUpdate\n     */\n    endpointTransformationIn: EndpointTransformationIn\n}\n\nexport interface EndpointApiV1EndpointTransformationSimulateRequest {\n    /**\n     * The app&#39;s ID or UID\n     * @type string\n     * @memberof EndpointApiv1EndpointTransformationSimulate\n     */\n    appId: string\n    /**\n     * The ep&#39;s ID or UID\n     * @type string\n     * @memberof EndpointApiv1EndpointTransformationSimulate\n     */\n    endpointId: string\n    /**\n     * \n     * @type EndpointTransformationSimulateIn\n     * @memberof EndpointApiv1EndpointTransformationSimulate\n     */\n    endpointTransformationSimulateIn: EndpointTransformationSimulateIn\n    /**\n     * The request&#39;s idempotency key\n     * @type string\n     * @memberof EndpointApiv1EndpointTransformationSimulate\n     */\n    idempotencyKey?: string\n}\n\nexport interface EndpointApiV1EndpointUpdateRequest {\n    /**\n     * The app&#39;s ID or UID\n     * @type string\n     * @memberof EndpointApiv1EndpointUpdate\n     */\n    appId: string\n    /**\n     * The ep&#39;s ID or UID\n     * @type string\n     * @memberof EndpointApiv1EndpointUpdate\n     */\n    endpointId: string\n    /**\n     * \n     * @type EndpointUpdate\n     * @memberof EndpointApiv1EndpointUpdate\n     */\n    endpointUpdate: EndpointUpdate\n}\n\nexport interface EndpointApiV1EndpointUpdateHeadersRequest {\n    /**\n     * The app&#39;s ID or UID\n     * @type string\n     * @memberof EndpointApiv1EndpointUpdateHeaders\n     */\n    appId: string\n    /**\n     * The ep&#39;s ID or UID\n     * @type string\n     * @memberof EndpointApiv1EndpointUpdateHeaders\n     */\n    endpointId: string\n    /**\n     * \n     * @type EndpointHeadersIn\n     * @memberof EndpointApiv1EndpointUpdateHeaders\n     */\n    endpointHeadersIn: EndpointHeadersIn\n}\n\nexport interface EndpointApiV1EndpointUpdateMtlsConfigRequest {\n    /**\n     * The app&#39;s ID or UID\n     * @type string\n     * @memberof EndpointApiv1EndpointUpdateMtlsConfig\n     */\n    appId: string\n    /**\n     * The ep&#39;s ID or UID\n     * @type string\n     * @memberof EndpointApiv1EndpointUpdateMtlsConfig\n     */\n    endpointId: string\n    /**\n     * \n     * @type EndpointMtlsConfigIn\n     * @memberof EndpointApiv1EndpointUpdateMtlsConfig\n     */\n    endpointMtlsConfigIn: EndpointMtlsConfigIn\n}\n\nexport interface EndpointApiV1EndpointUpdateOauthConfigRequest {\n    /**\n     * The app&#39;s ID or UID\n     * @type string\n     * @memberof EndpointApiv1EndpointUpdateOauthConfig\n     */\n    appId: string\n    /**\n     * The ep&#39;s ID or UID\n     * @type string\n     * @memberof EndpointApiv1EndpointUpdateOauthConfig\n     */\n    endpointId: string\n    /**\n     * \n     * @type EndpointOauthConfigIn\n     * @memberof EndpointApiv1EndpointUpdateOauthConfig\n     */\n    endpointOauthConfigIn: EndpointOauthConfigIn\n}\n\nexport interface EndpointApiV1SinkCreateRequest {\n    /**\n     * The app&#39;s ID or UID\n     * @type string\n     * @memberof EndpointApiv1SinkCreate\n     */\n    appId: string\n    /**\n     * \n     * @type SinkIn\n     * @memberof EndpointApiv1SinkCreate\n     */\n    sinkIn: SinkIn\n    /**\n     * The request&#39;s idempotency key\n     * @type string\n     * @memberof EndpointApiv1SinkCreate\n     */\n    idempotencyKey?: string\n}\n\nexport interface EndpointApiV1SinkGetRequest {\n    /**\n     * The app&#39;s ID or UID\n     * @type string\n     * @memberof EndpointApiv1SinkGet\n     */\n    appId: string\n    /**\n     * The ep&#39;s ID or UID\n     * @type string\n     * @memberof EndpointApiv1SinkGet\n     */\n    sinkId: string\n}\n\nexport interface EndpointApiV1SinkListRequest {\n    /**\n     * The app&#39;s ID or UID\n     * @type string\n     * @memberof EndpointApiv1SinkList\n     */\n    appId: string\n    /**\n     * Limit the number of returned items\n     * @type number\n     * @memberof EndpointApiv1SinkList\n     */\n    limit?: number\n    /**\n     * The iterator returned from a prior invocation\n     * @type string\n     * @memberof EndpointApiv1SinkList\n     */\n    iterator?: string\n    /**\n     * The sorting order of the returned items\n     * @type Ordering\n     * @memberof EndpointApiv1SinkList\n     */\n    order?: Ordering\n}\n\nexport class ObjectEndpointApi {\n    private api: ObservableEndpointApi\n\n    public constructor(configuration: Configuration, requestFactory?: EndpointApiRequestFactory, responseProcessor?: EndpointApiResponseProcessor) {\n        this.api = new ObservableEndpointApi(configuration, requestFactory, responseProcessor);\n    }\n\n    /**\n     * Create a new endpoint for the application.  When `secret` is `null` the secret is automatically generated (recommended)\n     * Create Endpoint\n     * @param param the request object\n     */\n    public v1EndpointCreate(param: EndpointApiV1EndpointCreateRequest, options?: Configuration): Promise<EndpointOut> {\n        return this.api.v1EndpointCreate(param.appId, param.endpointIn, param.idempotencyKey,  options).toPromise();\n    }\n\n    /**\n     * Delete an endpoint.\n     * Delete Endpoint\n     * @param param the request object\n     */\n    public v1EndpointDelete(param: EndpointApiV1EndpointDeleteRequest, options?: Configuration): Promise<void> {\n        return this.api.v1EndpointDelete(param.appId, param.endpointId,  options).toPromise();\n    }\n\n    /**\n     * Delete endpoint mTLS configuration\n     * Delete Endpoint Mtls Config\n     * @param param the request object\n     */\n    public v1EndpointDeleteMtlsConfig(param: EndpointApiV1EndpointDeleteMtlsConfigRequest, options?: Configuration): Promise<void> {\n        return this.api.v1EndpointDeleteMtlsConfig(param.appId, param.endpointId,  options).toPromise();\n    }\n\n    /**\n     * Delete endpoint OAuth configuration\n     * Delete Endpoint Oauth Config\n     * @param param the request object\n     */\n    public v1EndpointDeleteOauthConfig(param: EndpointApiV1EndpointDeleteOauthConfigRequest, options?: Configuration): Promise<void> {\n        return this.api.v1EndpointDeleteOauthConfig(param.appId, param.endpointId,  options).toPromise();\n    }\n\n    /**\n     * Get an endpoint.\n     * Get Endpoint\n     * @param param the request object\n     */\n    public v1EndpointGet(param: EndpointApiV1EndpointGetRequest, options?: Configuration): Promise<EndpointOut> {\n        return this.api.v1EndpointGet(param.appId, param.endpointId,  options).toPromise();\n    }\n\n    /**\n     * Get the additional headers to be sent with the webhook\n     * Get Endpoint Headers\n     * @param param the request object\n     */\n    public v1EndpointGetHeaders(param: EndpointApiV1EndpointGetHeadersRequest, options?: Configuration): Promise<EndpointHeadersOut> {\n        return this.api.v1EndpointGetHeaders(param.appId, param.endpointId,  options).toPromise();\n    }\n\n    /**\n     * Get the endpoint's signing secret.  This is used to verify the authenticity of the webhook. For more information please refer to [the consuming webhooks docs](https://docs.svix.com/consuming-webhooks/).\n     * Get Endpoint Secret\n     * @param param the request object\n     */\n    public v1EndpointGetSecret(param: EndpointApiV1EndpointGetSecretRequest, options?: Configuration): Promise<EndpointSecretOut> {\n        return this.api.v1EndpointGetSecret(param.appId, param.endpointId,  options).toPromise();\n    }\n\n    /**\n     * Get basic statistics for the endpoint.\n     * Endpoint Stats\n     * @param param the request object\n     */\n    public v1EndpointGetStats(param: EndpointApiV1EndpointGetStatsRequest, options?: Configuration): Promise<EndpointStats> {\n        return this.api.v1EndpointGetStats(param.appId, param.endpointId, param.since, param.until,  options).toPromise();\n    }\n\n    /**\n     * List the application's endpoints.\n     * List Endpoints\n     * @param param the request object\n     */\n    public v1EndpointList(param: EndpointApiV1EndpointListRequest, options?: Configuration): Promise<ListResponseEndpointOut> {\n        return this.api.v1EndpointList(param.appId, param.limit, param.iterator, param.order,  options).toPromise();\n    }\n\n    /**\n     * Partially update an endpoint.\n     * Patch Endpoint\n     * @param param the request object\n     */\n    public v1EndpointPatch(param: EndpointApiV1EndpointPatchRequest, options?: Configuration): Promise<EndpointOut> {\n        return this.api.v1EndpointPatch(param.appId, param.endpointId, param.endpointPatch,  options).toPromise();\n    }\n\n    /**\n     * Partially set the additional headers to be sent with the webhook\n     * Patch Endpoint Headers\n     * @param param the request object\n     */\n    public v1EndpointPatchHeaders(param: EndpointApiV1EndpointPatchHeadersRequest, options?: Configuration): Promise<void> {\n        return this.api.v1EndpointPatchHeaders(param.appId, param.endpointId, param.endpointHeadersPatchIn,  options).toPromise();\n    }\n\n    /**\n     * Resend all failed messages since a given time.\n     * Recover Failed Webhooks\n     * @param param the request object\n     */\n    public v1EndpointRecover(param: EndpointApiV1EndpointRecoverRequest, options?: Configuration): Promise<RecoverOut> {\n        return this.api.v1EndpointRecover(param.appId, param.endpointId, param.recoverIn, param.idempotencyKey,  options).toPromise();\n    }\n\n    /**\n     * Replays messages to the endpoint. Only messages that were created after `since` will be sent. Messages that were previously sent to the endpoint are not resent.\n     * Replay Missing Webhooks\n     * @param param the request object\n     */\n    public v1EndpointReplay(param: EndpointApiV1EndpointReplayRequest, options?: Configuration): Promise<ReplayOut> {\n        return this.api.v1EndpointReplay(param.appId, param.endpointId, param.replayIn, param.idempotencyKey,  options).toPromise();\n    }\n\n    /**\n     * Rotates the endpoint's signing secret.  The previous secret will be valid for the next 24 hours.\n     * Rotate Endpoint Secret\n     * @param param the request object\n     */\n    public v1EndpointRotateSecret(param: EndpointApiV1EndpointRotateSecretRequest, options?: Configuration): Promise<void> {\n        return this.api.v1EndpointRotateSecret(param.appId, param.endpointId, param.endpointSecretRotateIn, param.idempotencyKey,  options).toPromise();\n    }\n\n    /**\n     * Send an example message for an event\n     * Send Event Type Example Message\n     * @param param the request object\n     */\n    public v1EndpointSendExample(param: EndpointApiV1EndpointSendExampleRequest, options?: Configuration): Promise<MessageOut> {\n        return this.api.v1EndpointSendExample(param.appId, param.endpointId, param.eventExampleIn, param.idempotencyKey,  options).toPromise();\n    }\n\n    /**\n     * Get the transformation code associated with this endpoint\n     * Get Endpoint Transformation\n     * @param param the request object\n     */\n    public v1EndpointTransformationGet(param: EndpointApiV1EndpointTransformationGetRequest, options?: Configuration): Promise<EndpointTransformationOut> {\n        return this.api.v1EndpointTransformationGet(param.appId, param.endpointId,  options).toPromise();\n    }\n\n    /**\n     * Set or unset the transformation code associated with this endpoint\n     * Set Endpoint Transformation\n     * @param param the request object\n     */\n    public v1EndpointTransformationPartialUpdate(param: EndpointApiV1EndpointTransformationPartialUpdateRequest, options?: Configuration): Promise<void> {\n        return this.api.v1EndpointTransformationPartialUpdate(param.appId, param.endpointId, param.endpointTransformationIn,  options).toPromise();\n    }\n\n    /**\n     * Simulate running the transformation on the payload and code\n     * Simulate\n     * @param param the request object\n     */\n    public v1EndpointTransformationSimulate(param: EndpointApiV1EndpointTransformationSimulateRequest, options?: Configuration): Promise<EndpointTransformationSimulateOut> {\n        return this.api.v1EndpointTransformationSimulate(param.appId, param.endpointId, param.endpointTransformationSimulateIn, param.idempotencyKey,  options).toPromise();\n    }\n\n    /**\n     * Update an endpoint.\n     * Update Endpoint\n     * @param param the request object\n     */\n    public v1EndpointUpdate(param: EndpointApiV1EndpointUpdateRequest, options?: Configuration): Promise<EndpointOut> {\n        return this.api.v1EndpointUpdate(param.appId, param.endpointId, param.endpointUpdate,  options).toPromise();\n    }\n\n    /**\n     * Set the additional headers to be sent with the webhook\n     * Update Endpoint Headers\n     * @param param the request object\n     */\n    public v1EndpointUpdateHeaders(param: EndpointApiV1EndpointUpdateHeadersRequest, options?: Configuration): Promise<void> {\n        return this.api.v1EndpointUpdateHeaders(param.appId, param.endpointId, param.endpointHeadersIn,  options).toPromise();\n    }\n\n    /**\n     * Create/update endpoint mTLS configuration\n     * Update Endpoint Mtls Config\n     * @param param the request object\n     */\n    public v1EndpointUpdateMtlsConfig(param: EndpointApiV1EndpointUpdateMtlsConfigRequest, options?: Configuration): Promise<void> {\n        return this.api.v1EndpointUpdateMtlsConfig(param.appId, param.endpointId, param.endpointMtlsConfigIn,  options).toPromise();\n    }\n\n    /**\n     * Create/update endpoint OAuth configuration\n     * Update Endpoint Oauth Config\n     * @param param the request object\n     */\n    public v1EndpointUpdateOauthConfig(param: EndpointApiV1EndpointUpdateOauthConfigRequest, options?: Configuration): Promise<void> {\n        return this.api.v1EndpointUpdateOauthConfig(param.appId, param.endpointId, param.endpointOauthConfigIn,  options).toPromise();\n    }\n\n    /**\n     * Create a new sink for the application.\n     * Create Sink\n     * @param param the request object\n     */\n    public v1SinkCreate(param: EndpointApiV1SinkCreateRequest, options?: Configuration): Promise<SinkOut> {\n        return this.api.v1SinkCreate(param.appId, param.sinkIn, param.idempotencyKey,  options).toPromise();\n    }\n\n    /**\n     * Get a sink.\n     * Get Sink\n     * @param param the request object\n     */\n    public v1SinkGet(param: EndpointApiV1SinkGetRequest, options?: Configuration): Promise<SinkOut> {\n        return this.api.v1SinkGet(param.appId, param.sinkId,  options).toPromise();\n    }\n\n    /**\n     * List the application's sinks.\n     * List Sinks\n     * @param param the request object\n     */\n    public v1SinkList(param: EndpointApiV1SinkListRequest, options?: Configuration): Promise<ListResponseSinkOut> {\n        return this.api.v1SinkList(param.appId, param.limit, param.iterator, param.order,  options).toPromise();\n    }\n\n}\n\nimport { ObservableEnvironmentApi } from \"./ObservableAPI\";\nimport { EnvironmentApiRequestFactory, EnvironmentApiResponseProcessor} from \"../apis/EnvironmentApi\";\n\nexport interface EnvironmentApiV1EnvironmentExportRequest {\n    /**\n     * The request&#39;s idempotency key\n     * @type string\n     * @memberof EnvironmentApiv1EnvironmentExport\n     */\n    idempotencyKey?: string\n}\n\nexport interface EnvironmentApiV1EnvironmentExportGetRequest {\n}\n\nexport interface EnvironmentApiV1EnvironmentImportRequest {\n    /**\n     * \n     * @type EnvironmentIn\n     * @memberof EnvironmentApiv1EnvironmentImport\n     */\n    environmentIn: EnvironmentIn\n    /**\n     * The request&#39;s idempotency key\n     * @type string\n     * @memberof EnvironmentApiv1EnvironmentImport\n     */\n    idempotencyKey?: string\n}\n\nexport class ObjectEnvironmentApi {\n    private api: ObservableEnvironmentApi\n\n    public constructor(configuration: Configuration, requestFactory?: EnvironmentApiRequestFactory, responseProcessor?: EnvironmentApiResponseProcessor) {\n        this.api = new ObservableEnvironmentApi(configuration, requestFactory, responseProcessor);\n    }\n\n    /**\n     * Download a JSON file containing all org-settings and event types\n     * Export Environment Configuration\n     * @param param the request object\n     */\n    public v1EnvironmentExport(param: EnvironmentApiV1EnvironmentExportRequest, options?: Configuration): Promise<EnvironmentOut> {\n        return this.api.v1EnvironmentExport(param.idempotencyKey,  options).toPromise();\n    }\n\n    /**\n     * Download a JSON file containing all org-settings and event types\n     * Export Environment Configuration\n     * @param param the request object\n     */\n    public v1EnvironmentExportGet(param: EnvironmentApiV1EnvironmentExportGetRequest, options?: Configuration): Promise<EnvironmentOut> {\n        return this.api.v1EnvironmentExportGet( options).toPromise();\n    }\n\n    /**\n     * Import a configuration into the active organization. It doesn't delete anything, only adds/updates what was passed to it.\n     * Import Environment Configuration\n     * @param param the request object\n     */\n    public v1EnvironmentImport(param: EnvironmentApiV1EnvironmentImportRequest, options?: Configuration): Promise<void> {\n        return this.api.v1EnvironmentImport(param.environmentIn, param.idempotencyKey,  options).toPromise();\n    }\n\n}\n\nimport { ObservableEnvironmentSettingsApi } from \"./ObservableAPI\";\nimport { EnvironmentSettingsApiRequestFactory, EnvironmentSettingsApiResponseProcessor} from \"../apis/EnvironmentSettingsApi\";\n\nexport interface EnvironmentSettingsApiV1EnvironmentGetSettingsRequest {\n}\n\nexport class ObjectEnvironmentSettingsApi {\n    private api: ObservableEnvironmentSettingsApi\n\n    public constructor(configuration: Configuration, requestFactory?: EnvironmentSettingsApiRequestFactory, responseProcessor?: EnvironmentSettingsApiResponseProcessor) {\n        this.api = new ObservableEnvironmentSettingsApi(configuration, requestFactory, responseProcessor);\n    }\n\n    /**\n     * Get the environment's settings\n     * Get Org Settings\n     * @param param the request object\n     */\n    public v1EnvironmentGetSettings(param: EnvironmentSettingsApiV1EnvironmentGetSettingsRequest, options?: Configuration): Promise<EnvironmentSettingsOut> {\n        return this.api.v1EnvironmentGetSettings( options).toPromise();\n    }\n\n}\n\nimport { ObservableEventTypeApi } from \"./ObservableAPI\";\nimport { EventTypeApiRequestFactory, EventTypeApiResponseProcessor} from \"../apis/EventTypeApi\";\n\nexport interface EventTypeApiV1EventTypeCreateRequest {\n    /**\n     * \n     * @type EventTypeIn\n     * @memberof EventTypeApiv1EventTypeCreate\n     */\n    eventTypeIn: EventTypeIn\n    /**\n     * The request&#39;s idempotency key\n     * @type string\n     * @memberof EventTypeApiv1EventTypeCreate\n     */\n    idempotencyKey?: string\n}\n\nexport interface EventTypeApiV1EventTypeDeleteRequest {\n    /**\n     * The event type&#39;s name\n     * @type string\n     * @memberof EventTypeApiv1EventTypeDelete\n     */\n    eventTypeName: string\n    /**\n     * By default event types are archived when \\&quot;deleted\\&quot;. Passing this to &#x60;true&#x60; deletes them entirely.\n     * @type boolean\n     * @memberof EventTypeApiv1EventTypeDelete\n     */\n    expunge?: boolean\n}\n\nexport interface EventTypeApiV1EventTypeExportOpenapiRequest {\n    /**\n     * The request&#39;s idempotency key\n     * @type string\n     * @memberof EventTypeApiv1EventTypeExportOpenapi\n     */\n    idempotencyKey?: string\n}\n\nexport interface EventTypeApiV1EventTypeGenerateExampleRequest {\n    /**\n     * \n     * @type EventTypeSchemaIn\n     * @memberof EventTypeApiv1EventTypeGenerateExample\n     */\n    eventTypeSchemaIn: EventTypeSchemaIn\n    /**\n     * The request&#39;s idempotency key\n     * @type string\n     * @memberof EventTypeApiv1EventTypeGenerateExample\n     */\n    idempotencyKey?: string\n}\n\nexport interface EventTypeApiV1EventTypeGetRequest {\n    /**\n     * The event type&#39;s name\n     * @type string\n     * @memberof EventTypeApiv1EventTypeGet\n     */\n    eventTypeName: string\n}\n\nexport interface EventTypeApiV1EventTypeGetRetryScheduleRequest {\n    /**\n     * The event type&#39;s name\n     * @type string\n     * @memberof EventTypeApiv1EventTypeGetRetrySchedule\n     */\n    eventTypeName: string\n}\n\nexport interface EventTypeApiV1EventTypeImportOpenapiRequest {\n    /**\n     * Import a list of event types from webhooks defined in an OpenAPI spec.  The OpenAPI spec can be specified as either &#x60;spec&#x60; given the spec as a JSON object, or as &#x60;specRaw&#x60; (a &#x60;string&#x60;) which will be parsed as YAML or JSON by the server. Sending neither or both is invalid, resulting in a &#x60;400&#x60; **Bad Request**.\n     * @type EventTypeImportOpenApiIn\n     * @memberof EventTypeApiv1EventTypeImportOpenapi\n     */\n    eventTypeImportOpenApiIn: EventTypeImportOpenApiIn\n    /**\n     * The request&#39;s idempotency key\n     * @type string\n     * @memberof EventTypeApiv1EventTypeImportOpenapi\n     */\n    idempotencyKey?: string\n}\n\nexport interface EventTypeApiV1EventTypeListRequest {\n    /**\n     * Limit the number of returned items\n     * @type number\n     * @memberof EventTypeApiv1EventTypeList\n     */\n    limit?: number\n    /**\n     * The iterator returned from a prior invocation\n     * @type string\n     * @memberof EventTypeApiv1EventTypeList\n     */\n    iterator?: string\n    /**\n     * The sorting order of the returned items\n     * @type Ordering\n     * @memberof EventTypeApiv1EventTypeList\n     */\n    order?: Ordering\n    /**\n     * When &#x60;true&#x60; archived (deleted but not expunged) items are included in the response\n     * @type boolean\n     * @memberof EventTypeApiv1EventTypeList\n     */\n    includeArchived?: boolean\n    /**\n     * When &#x60;true&#x60; the full item (including the schema) is included in the response\n     * @type boolean\n     * @memberof EventTypeApiv1EventTypeList\n     */\n    withContent?: boolean\n}\n\nexport interface EventTypeApiV1EventTypePatchRequest {\n    /**\n     * The event type&#39;s name\n     * @type string\n     * @memberof EventTypeApiv1EventTypePatch\n     */\n    eventTypeName: string\n    /**\n     * \n     * @type EventTypePatch\n     * @memberof EventTypeApiv1EventTypePatch\n     */\n    eventTypePatch: EventTypePatch\n}\n\nexport interface EventTypeApiV1EventTypeUpdateRequest {\n    /**\n     * The event type&#39;s name\n     * @type string\n     * @memberof EventTypeApiv1EventTypeUpdate\n     */\n    eventTypeName: string\n    /**\n     * \n     * @type EventTypeUpdate\n     * @memberof EventTypeApiv1EventTypeUpdate\n     */\n    eventTypeUpdate: EventTypeUpdate\n}\n\nexport interface EventTypeApiV1EventTypeUpdateRetryScheduleRequest {\n    /**\n     * The event type&#39;s name\n     * @type string\n     * @memberof EventTypeApiv1EventTypeUpdateRetrySchedule\n     */\n    eventTypeName: string\n    /**\n     * \n     * @type RetryScheduleInOut\n     * @memberof EventTypeApiv1EventTypeUpdateRetrySchedule\n     */\n    retryScheduleInOut: RetryScheduleInOut\n}\n\nexport class ObjectEventTypeApi {\n    private api: ObservableEventTypeApi\n\n    public constructor(configuration: Configuration, requestFactory?: EventTypeApiRequestFactory, responseProcessor?: EventTypeApiResponseProcessor) {\n        this.api = new ObservableEventTypeApi(configuration, requestFactory, responseProcessor);\n    }\n\n    /**\n     * Create new or unarchive existing event type.  Unarchiving an event type will allow endpoints to filter on it and messages to be sent with it. Endpoints filtering on the event type before archival will continue to filter on it. This operation does not preserve the description and schemas.\n     * Create Event Type\n     * @param param the request object\n     */\n    public v1EventTypeCreate(param: EventTypeApiV1EventTypeCreateRequest, options?: Configuration): Promise<EventTypeOut> {\n        return this.api.v1EventTypeCreate(param.eventTypeIn, param.idempotencyKey,  options).toPromise();\n    }\n\n    /**\n     * Archive an event type.  Endpoints already configured to filter on an event type will continue to do so after archival. However, new messages can not be sent with it and endpoints can not filter on it. An event type can be unarchived with the [create operation](#operation/create_event_type_api_v1_event_type__post).\n     * Delete Event Type\n     * @param param the request object\n     */\n    public v1EventTypeDelete(param: EventTypeApiV1EventTypeDeleteRequest, options?: Configuration): Promise<void> {\n        return this.api.v1EventTypeDelete(param.eventTypeName, param.expunge,  options).toPromise();\n    }\n\n    /**\n     * Exports event type definitions based on the OpenAPI schemas associated with each existing event type\n     * Event Type Export From Openapi\n     * @param param the request object\n     */\n    public v1EventTypeExportOpenapi(param: EventTypeApiV1EventTypeExportOpenapiRequest, options?: Configuration): Promise<ExportEventTypeOut> {\n        return this.api.v1EventTypeExportOpenapi(param.idempotencyKey,  options).toPromise();\n    }\n\n    /**\n     * Generates a fake example from the given JSONSchema\n     * Generate Schema Example\n     * @param param the request object\n     */\n    public v1EventTypeGenerateExample(param: EventTypeApiV1EventTypeGenerateExampleRequest, options?: Configuration): Promise<EventTypeExampleOut> {\n        return this.api.v1EventTypeGenerateExample(param.eventTypeSchemaIn, param.idempotencyKey,  options).toPromise();\n    }\n\n    /**\n     * Get an event type.\n     * Get Event Type\n     * @param param the request object\n     */\n    public v1EventTypeGet(param: EventTypeApiV1EventTypeGetRequest, options?: Configuration): Promise<EventTypeOut> {\n        return this.api.v1EventTypeGet(param.eventTypeName,  options).toPromise();\n    }\n\n    /**\n     * Gets the retry schedule for messages using the given event type\n     * Get Retry Schedule\n     * @param param the request object\n     */\n    public v1EventTypeGetRetrySchedule(param: EventTypeApiV1EventTypeGetRetryScheduleRequest, options?: Configuration): Promise<RetryScheduleInOut> {\n        return this.api.v1EventTypeGetRetrySchedule(param.eventTypeName,  options).toPromise();\n    }\n\n    /**\n     * Given an OpenAPI spec, create new or update existing event types. If an existing `archived` event type is updated, it will be unarchived.  The importer will convert all webhooks found in the either the `webhooks` or `x-webhooks` top-level.\n     * Event Type Import From Openapi\n     * @param param the request object\n     */\n    public v1EventTypeImportOpenapi(param: EventTypeApiV1EventTypeImportOpenapiRequest, options?: Configuration): Promise<EventTypeImportOpenApiOut> {\n        return this.api.v1EventTypeImportOpenapi(param.eventTypeImportOpenApiIn, param.idempotencyKey,  options).toPromise();\n    }\n\n    /**\n     * Return the list of event types.\n     * List Event Types\n     * @param param the request object\n     */\n    public v1EventTypeList(param: EventTypeApiV1EventTypeListRequest, options?: Configuration): Promise<ListResponseEventTypeOut> {\n        return this.api.v1EventTypeList(param.limit, param.iterator, param.order, param.includeArchived, param.withContent,  options).toPromise();\n    }\n\n    /**\n     * Partially update an event type.\n     * Patch Event Type\n     * @param param the request object\n     */\n    public v1EventTypePatch(param: EventTypeApiV1EventTypePatchRequest, options?: Configuration): Promise<EventTypeOut> {\n        return this.api.v1EventTypePatch(param.eventTypeName, param.eventTypePatch,  options).toPromise();\n    }\n\n    /**\n     * Update an event type.\n     * Update Event Type\n     * @param param the request object\n     */\n    public v1EventTypeUpdate(param: EventTypeApiV1EventTypeUpdateRequest, options?: Configuration): Promise<EventTypeOut> {\n        return this.api.v1EventTypeUpdate(param.eventTypeName, param.eventTypeUpdate,  options).toPromise();\n    }\n\n    /**\n     * Sets a retry schedule for all messages using the given event type\n     * Update Retry Schedule\n     * @param param the request object\n     */\n    public v1EventTypeUpdateRetrySchedule(param: EventTypeApiV1EventTypeUpdateRetryScheduleRequest, options?: Configuration): Promise<RetryScheduleInOut> {\n        return this.api.v1EventTypeUpdateRetrySchedule(param.eventTypeName, param.retryScheduleInOut,  options).toPromise();\n    }\n\n}\n\nimport { ObservableEventsApi } from \"./ObservableAPI\";\nimport { EventsApiRequestFactory, EventsApiResponseProcessor} from \"../apis/EventsApi\";\n\nexport interface EventsApiV1EventsRequest {\n    /**\n     * Limit the number of returned items\n     * @type number\n     * @memberof EventsApiv1Events\n     */\n    limit?: number\n    /**\n     * The iterator returned from a prior invocation\n     * @type string\n     * @memberof EventsApiv1Events\n     */\n    iterator?: string\n    /**\n     * Filter response based on the event type\n     * @type Array&lt;string&gt;\n     * @memberof EventsApiv1Events\n     */\n    eventTypes?: Array<string>\n    /**\n     * Filter response based on the event type\n     * @type Array&lt;string&gt;\n     * @memberof EventsApiv1Events\n     */\n    channels?: Array<string>\n    /**\n     * \n     * @type Date\n     * @memberof EventsApiv1Events\n     */\n    after?: Date\n}\n\nexport class ObjectEventsApi {\n    private api: ObservableEventsApi\n\n    public constructor(configuration: Configuration, requestFactory?: EventsApiRequestFactory, responseProcessor?: EventsApiResponseProcessor) {\n        this.api = new ObservableEventsApi(configuration, requestFactory, responseProcessor);\n    }\n\n    /**\n     * Reads the stream of operational webhook events for this environment\n     * Events\n     * @param param the request object\n     */\n    public v1Events(param: EventsApiV1EventsRequest, options?: Configuration): Promise<MessageEventsOut> {\n        return this.api.v1Events(param.limit, param.iterator, param.eventTypes, param.channels, param.after,  options).toPromise();\n    }\n\n}\n\nimport { ObservableHealthApi } from \"./ObservableAPI\";\nimport { HealthApiRequestFactory, HealthApiResponseProcessor} from \"../apis/HealthApi\";\n\nexport interface HealthApiV1HealthGetRequest {\n}\n\nexport class ObjectHealthApi {\n    private api: ObservableHealthApi\n\n    public constructor(configuration: Configuration, requestFactory?: HealthApiRequestFactory, responseProcessor?: HealthApiResponseProcessor) {\n        this.api = new ObservableHealthApi(configuration, requestFactory, responseProcessor);\n    }\n\n    /**\n     * Verify the API server is up and running.\n     * Health\n     * @param param the request object\n     */\n    public v1HealthGet(param: HealthApiV1HealthGetRequest, options?: Configuration): Promise<void> {\n        return this.api.v1HealthGet( options).toPromise();\n    }\n\n}\n\nimport { ObservableInboundApi } from \"./ObservableAPI\";\nimport { InboundApiRequestFactory, InboundApiResponseProcessor} from \"../apis/InboundApi\";\n\nexport interface InboundApiV1InboundMsgRequest {\n    /**\n     * The app&#39;s ID or UID\n     * @type string\n     * @memberof InboundApiv1InboundMsg\n     */\n    appId: string\n    /**\n     * \n     * @type string\n     * @memberof InboundApiv1InboundMsg\n     */\n    inboundToken: string\n    /**\n     * \n     * @type string\n     * @memberof InboundApiv1InboundMsg\n     */\n    body: string\n    /**\n     * The event type&#39;s name\n     * @type string\n     * @memberof InboundApiv1InboundMsg\n     */\n    eventType?: string\n    /**\n     * The request&#39;s idempotency key\n     * @type string\n     * @memberof InboundApiv1InboundMsg\n     */\n    idempotencyKey?: string\n}\n\nexport interface InboundApiV1InboundRotateUrlRequest {\n    /**\n     * The app&#39;s ID or UID\n     * @type string\n     * @memberof InboundApiv1InboundRotateUrl\n     */\n    appId: string\n    /**\n     * The request&#39;s idempotency key\n     * @type string\n     * @memberof InboundApiv1InboundRotateUrl\n     */\n    idempotencyKey?: string\n}\n\nexport class ObjectInboundApi {\n    private api: ObservableInboundApi\n\n    public constructor(configuration: Configuration, requestFactory?: InboundApiRequestFactory, responseProcessor?: InboundApiResponseProcessor) {\n        this.api = new ObservableInboundApi(configuration, requestFactory, responseProcessor);\n    }\n\n    /**\n     * Handles a raw inbound webhook for the application.\n     * Handle Inbound\n     * @param param the request object\n     */\n    public v1InboundMsg(param: InboundApiV1InboundMsgRequest, options?: Configuration): Promise<MessageOut> {\n        return this.api.v1InboundMsg(param.appId, param.inboundToken, param.body, param.eventType, param.idempotencyKey,  options).toPromise();\n    }\n\n    /**\n     * Invalidates the previous inbound url (if one exists), producing a new inbound URL for this app\n     * Rotate Url\n     * @param param the request object\n     */\n    public v1InboundRotateUrl(param: InboundApiV1InboundRotateUrlRequest, options?: Configuration): Promise<RotatedUrlOut> {\n        return this.api.v1InboundRotateUrl(param.appId, param.idempotencyKey,  options).toPromise();\n    }\n\n}\n\nimport { ObservableIntegrationApi } from \"./ObservableAPI\";\nimport { IntegrationApiRequestFactory, IntegrationApiResponseProcessor} from \"../apis/IntegrationApi\";\n\nexport interface IntegrationApiV1IntegrationCreateRequest {\n    /**\n     * The app&#39;s ID or UID\n     * @type string\n     * @memberof IntegrationApiv1IntegrationCreate\n     */\n    appId: string\n    /**\n     * \n     * @type IntegrationIn\n     * @memberof IntegrationApiv1IntegrationCreate\n     */\n    integrationIn: IntegrationIn\n    /**\n     * The request&#39;s idempotency key\n     * @type string\n     * @memberof IntegrationApiv1IntegrationCreate\n     */\n    idempotencyKey?: string\n}\n\nexport interface IntegrationApiV1IntegrationDeleteRequest {\n    /**\n     * The app&#39;s ID or UID\n     * @type string\n     * @memberof IntegrationApiv1IntegrationDelete\n     */\n    appId: string\n    /**\n     * The integ&#39;s ID\n     * @type string\n     * @memberof IntegrationApiv1IntegrationDelete\n     */\n    integId: string\n}\n\nexport interface IntegrationApiV1IntegrationGetRequest {\n    /**\n     * The app&#39;s ID or UID\n     * @type string\n     * @memberof IntegrationApiv1IntegrationGet\n     */\n    appId: string\n    /**\n     * The integ&#39;s ID\n     * @type string\n     * @memberof IntegrationApiv1IntegrationGet\n     */\n    integId: string\n}\n\nexport interface IntegrationApiV1IntegrationGetKeyRequest {\n    /**\n     * The app&#39;s ID or UID\n     * @type string\n     * @memberof IntegrationApiv1IntegrationGetKey\n     */\n    appId: string\n    /**\n     * The integ&#39;s ID\n     * @type string\n     * @memberof IntegrationApiv1IntegrationGetKey\n     */\n    integId: string\n}\n\nexport interface IntegrationApiV1IntegrationListRequest {\n    /**\n     * The app&#39;s ID or UID\n     * @type string\n     * @memberof IntegrationApiv1IntegrationList\n     */\n    appId: string\n    /**\n     * Limit the number of returned items\n     * @type number\n     * @memberof IntegrationApiv1IntegrationList\n     */\n    limit?: number\n    /**\n     * The iterator returned from a prior invocation\n     * @type string\n     * @memberof IntegrationApiv1IntegrationList\n     */\n    iterator?: string\n    /**\n     * The sorting order of the returned items\n     * @type Ordering\n     * @memberof IntegrationApiv1IntegrationList\n     */\n    order?: Ordering\n}\n\nexport interface IntegrationApiV1IntegrationRotateKeyRequest {\n    /**\n     * The app&#39;s ID or UID\n     * @type string\n     * @memberof IntegrationApiv1IntegrationRotateKey\n     */\n    appId: string\n    /**\n     * The integ&#39;s ID\n     * @type string\n     * @memberof IntegrationApiv1IntegrationRotateKey\n     */\n    integId: string\n    /**\n     * The request&#39;s idempotency key\n     * @type string\n     * @memberof IntegrationApiv1IntegrationRotateKey\n     */\n    idempotencyKey?: string\n}\n\nexport interface IntegrationApiV1IntegrationUpdateRequest {\n    /**\n     * The app&#39;s ID or UID\n     * @type string\n     * @memberof IntegrationApiv1IntegrationUpdate\n     */\n    appId: string\n    /**\n     * The integ&#39;s ID\n     * @type string\n     * @memberof IntegrationApiv1IntegrationUpdate\n     */\n    integId: string\n    /**\n     * \n     * @type IntegrationUpdate\n     * @memberof IntegrationApiv1IntegrationUpdate\n     */\n    integrationUpdate: IntegrationUpdate\n}\n\nexport class ObjectIntegrationApi {\n    private api: ObservableIntegrationApi\n\n    public constructor(configuration: Configuration, requestFactory?: IntegrationApiRequestFactory, responseProcessor?: IntegrationApiResponseProcessor) {\n        this.api = new ObservableIntegrationApi(configuration, requestFactory, responseProcessor);\n    }\n\n    /**\n     * Create an integration.\n     * Create Integration\n     * @param param the request object\n     */\n    public v1IntegrationCreate(param: IntegrationApiV1IntegrationCreateRequest, options?: Configuration): Promise<IntegrationOut> {\n        return this.api.v1IntegrationCreate(param.appId, param.integrationIn, param.idempotencyKey,  options).toPromise();\n    }\n\n    /**\n     * Delete an integration.\n     * Delete Integration\n     * @param param the request object\n     */\n    public v1IntegrationDelete(param: IntegrationApiV1IntegrationDeleteRequest, options?: Configuration): Promise<void> {\n        return this.api.v1IntegrationDelete(param.appId, param.integId,  options).toPromise();\n    }\n\n    /**\n     * Get an integration.\n     * Get Integration\n     * @param param the request object\n     */\n    public v1IntegrationGet(param: IntegrationApiV1IntegrationGetRequest, options?: Configuration): Promise<IntegrationOut> {\n        return this.api.v1IntegrationGet(param.appId, param.integId,  options).toPromise();\n    }\n\n    /**\n     * Get an integration's key.\n     * Get Integration Key\n     * @param param the request object\n     */\n    public v1IntegrationGetKey(param: IntegrationApiV1IntegrationGetKeyRequest, options?: Configuration): Promise<IntegrationKeyOut> {\n        return this.api.v1IntegrationGetKey(param.appId, param.integId,  options).toPromise();\n    }\n\n    /**\n     * List the application's integrations.\n     * List Integrations\n     * @param param the request object\n     */\n    public v1IntegrationList(param: IntegrationApiV1IntegrationListRequest, options?: Configuration): Promise<ListResponseIntegrationOut> {\n        return this.api.v1IntegrationList(param.appId, param.limit, param.iterator, param.order,  options).toPromise();\n    }\n\n    /**\n     * Rotate the integration's key. The previous key will be immediately revoked.\n     * Rotate Integration Key\n     * @param param the request object\n     */\n    public v1IntegrationRotateKey(param: IntegrationApiV1IntegrationRotateKeyRequest, options?: Configuration): Promise<IntegrationKeyOut> {\n        return this.api.v1IntegrationRotateKey(param.appId, param.integId, param.idempotencyKey,  options).toPromise();\n    }\n\n    /**\n     * Update an integration.\n     * Update Integration\n     * @param param the request object\n     */\n    public v1IntegrationUpdate(param: IntegrationApiV1IntegrationUpdateRequest, options?: Configuration): Promise<IntegrationOut> {\n        return this.api.v1IntegrationUpdate(param.appId, param.integId, param.integrationUpdate,  options).toPromise();\n    }\n\n}\n\nimport { ObservableMessageApi } from \"./ObservableAPI\";\nimport { MessageApiRequestFactory, MessageApiResponseProcessor} from \"../apis/MessageApi\";\n\nexport interface MessageApiCreateMessageAttemptForEndpointRequest {\n    /**\n     * The app&#39;s ID or UID\n     * @type string\n     * @memberof MessageApicreateMessageAttemptForEndpoint\n     */\n    appId: string\n    /**\n     * The ep&#39;s ID or UID\n     * @type string\n     * @memberof MessageApicreateMessageAttemptForEndpoint\n     */\n    endpointId: string\n    /**\n     * \n     * @type MessageIn\n     * @memberof MessageApicreateMessageAttemptForEndpoint\n     */\n    messageIn: MessageIn\n    /**\n     * The request&#39;s idempotency key\n     * @type string\n     * @memberof MessageApicreateMessageAttemptForEndpoint\n     */\n    idempotencyKey?: string\n}\n\nexport interface MessageApiV1MessageCreateRequest {\n    /**\n     * The app&#39;s ID or UID\n     * @type string\n     * @memberof MessageApiv1MessageCreate\n     */\n    appId: string\n    /**\n     * \n     * @type MessageIn\n     * @memberof MessageApiv1MessageCreate\n     */\n    messageIn: MessageIn\n    /**\n     * When &#x60;true&#x60; message payloads are included in the response\n     * @type boolean\n     * @memberof MessageApiv1MessageCreate\n     */\n    withContent?: boolean\n    /**\n     * The request&#39;s idempotency key\n     * @type string\n     * @memberof MessageApiv1MessageCreate\n     */\n    idempotencyKey?: string\n}\n\nexport interface MessageApiV1MessageEventsRequest {\n    /**\n     * The app&#39;s ID or UID\n     * @type string\n     * @memberof MessageApiv1MessageEvents\n     */\n    appId: string\n    /**\n     * Limit the number of returned items\n     * @type number\n     * @memberof MessageApiv1MessageEvents\n     */\n    limit?: number\n    /**\n     * The iterator returned from a prior invocation\n     * @type string\n     * @memberof MessageApiv1MessageEvents\n     */\n    iterator?: string\n    /**\n     * Filter response based on the event type\n     * @type Array&lt;string&gt;\n     * @memberof MessageApiv1MessageEvents\n     */\n    eventTypes?: Array<string>\n    /**\n     * Filter response based on the event type\n     * @type Array&lt;string&gt;\n     * @memberof MessageApiv1MessageEvents\n     */\n    channels?: Array<string>\n    /**\n     * \n     * @type Date\n     * @memberof MessageApiv1MessageEvents\n     */\n    after?: Date\n}\n\nexport interface MessageApiV1MessageEventsSubscriptionRequest {\n    /**\n     * The app&#39;s ID or UID\n     * @type string\n     * @memberof MessageApiv1MessageEventsSubscription\n     */\n    appId: string\n    /**\n     * The esub&#39;s ID or UID\n     * @type string\n     * @memberof MessageApiv1MessageEventsSubscription\n     */\n    subscriptionId: string\n    /**\n     * Limit the number of returned items\n     * @type number\n     * @memberof MessageApiv1MessageEventsSubscription\n     */\n    limit?: number\n    /**\n     * The iterator returned from a prior invocation\n     * @type string\n     * @memberof MessageApiv1MessageEventsSubscription\n     */\n    iterator?: string\n    /**\n     * Filter response based on the event type\n     * @type Array&lt;string&gt;\n     * @memberof MessageApiv1MessageEventsSubscription\n     */\n    eventTypes?: Array<string>\n    /**\n     * Filter response based on the event type\n     * @type Array&lt;string&gt;\n     * @memberof MessageApiv1MessageEventsSubscription\n     */\n    channels?: Array<string>\n    /**\n     * \n     * @type Date\n     * @memberof MessageApiv1MessageEventsSubscription\n     */\n    after?: Date\n}\n\nexport interface MessageApiV1MessageEventsSubscriptionCreateTokenRequest {\n    /**\n     * The app&#39;s ID or UID\n     * @type string\n     * @memberof MessageApiv1MessageEventsSubscriptionCreateToken\n     */\n    appId: string\n    /**\n     * The esub&#39;s ID or UID\n     * @type string\n     * @memberof MessageApiv1MessageEventsSubscriptionCreateToken\n     */\n    subscriptionId: string\n    /**\n     * The request&#39;s idempotency key\n     * @type string\n     * @memberof MessageApiv1MessageEventsSubscriptionCreateToken\n     */\n    idempotencyKey?: string\n}\n\nexport interface MessageApiV1MessageExpungeContentRequest {\n    /**\n     * The app&#39;s ID or UID\n     * @type string\n     * @memberof MessageApiv1MessageExpungeContent\n     */\n    appId: string\n    /**\n     * The msg&#39;s ID or UID\n     * @type string\n     * @memberof MessageApiv1MessageExpungeContent\n     */\n    msgId: string\n}\n\nexport interface MessageApiV1MessageGetRequest {\n    /**\n     * The app&#39;s ID or UID\n     * @type string\n     * @memberof MessageApiv1MessageGet\n     */\n    appId: string\n    /**\n     * The msg&#39;s ID or UID\n     * @type string\n     * @memberof MessageApiv1MessageGet\n     */\n    msgId: string\n    /**\n     * When &#x60;true&#x60; message payloads are included in the response\n     * @type boolean\n     * @memberof MessageApiv1MessageGet\n     */\n    withContent?: boolean\n}\n\nexport interface MessageApiV1MessageGetRawPayloadRequest {\n    /**\n     * The app&#39;s ID or UID\n     * @type string\n     * @memberof MessageApiv1MessageGetRawPayload\n     */\n    appId: string\n    /**\n     * The msg&#39;s ID or UID\n     * @type string\n     * @memberof MessageApiv1MessageGetRawPayload\n     */\n    msgId: string\n}\n\nexport interface MessageApiV1MessageListRequest {\n    /**\n     * The app&#39;s ID or UID\n     * @type string\n     * @memberof MessageApiv1MessageList\n     */\n    appId: string\n    /**\n     * Limit the number of returned items\n     * @type number\n     * @memberof MessageApiv1MessageList\n     */\n    limit?: number\n    /**\n     * The iterator returned from a prior invocation\n     * @type string\n     * @memberof MessageApiv1MessageList\n     */\n    iterator?: string\n    /**\n     * Filter response based on the channel\n     * @type string\n     * @memberof MessageApiv1MessageList\n     */\n    channel?: string\n    /**\n     * Only include items created before a certain date\n     * @type Date\n     * @memberof MessageApiv1MessageList\n     */\n    before?: Date\n    /**\n     * Only include items created after a certain date\n     * @type Date\n     * @memberof MessageApiv1MessageList\n     */\n    after?: Date\n    /**\n     * When &#x60;true&#x60; message payloads are included in the response\n     * @type boolean\n     * @memberof MessageApiv1MessageList\n     */\n    withContent?: boolean\n    /**\n     * Filter messages matching the provided tag\n     * @type string\n     * @memberof MessageApiv1MessageList\n     */\n    tag?: string\n    /**\n     * Filter response based on the event type\n     * @type Array&lt;string&gt;\n     * @memberof MessageApiv1MessageList\n     */\n    eventTypes?: Array<string>\n}\n\nexport class ObjectMessageApi {\n    private api: ObservableMessageApi\n\n    public constructor(configuration: Configuration, requestFactory?: MessageApiRequestFactory, responseProcessor?: MessageApiResponseProcessor) {\n        this.api = new ObservableMessageApi(configuration, requestFactory, responseProcessor);\n    }\n\n    /**\n     * Creates and sends a message to the specified endpoint. The message attempt and response from the endpoint is returned. FIXME: use MessageIn for expediency, even though the `application` parameter is unused. Since this endpoint isn't publicly documented anyway, it should be fine\n     * Create Message Attempt For Endpoint\n     * @param param the request object\n     */\n    public createMessageAttemptForEndpoint(param: MessageApiCreateMessageAttemptForEndpointRequest, options?: Configuration): Promise<MessageAttemptOut> {\n        return this.api.createMessageAttemptForEndpoint(param.appId, param.endpointId, param.messageIn, param.idempotencyKey,  options).toPromise();\n    }\n\n    /**\n     * Creates a new message and dispatches it to all of the application's endpoints.  The `eventId` is an optional custom unique ID. It's verified to be unique only up to a day, after that no verification will be made. If a message with the same `eventId` already exists for the application, a 409 conflict error will be returned.  The `eventType` indicates the type and schema of the event. All messages of a certain `eventType` are expected to have the same schema. Endpoints can choose to only listen to specific event types. Messages can also have `channels`, which similar to event types let endpoints filter by them. Unlike event types, messages can have multiple channels, and channels don't imply a specific message content or schema.  The `payload` property is the webhook's body (the actual webhook message). Svix supports payload sizes of up to ~350kb, though it's generally a good idea to keep webhook payloads small, probably no larger than 40kb.\n     * Create Message\n     * @param param the request object\n     */\n    public v1MessageCreate(param: MessageApiV1MessageCreateRequest, options?: Configuration): Promise<MessageOut> {\n        return this.api.v1MessageCreate(param.appId, param.messageIn, param.withContent, param.idempotencyKey,  options).toPromise();\n    }\n\n    /**\n     * Reads the stream of created messages for an application\n     * Message Events\n     * @param param the request object\n     */\n    public v1MessageEvents(param: MessageApiV1MessageEventsRequest, options?: Configuration): Promise<MessageEventsOut> {\n        return this.api.v1MessageEvents(param.appId, param.limit, param.iterator, param.eventTypes, param.channels, param.after,  options).toPromise();\n    }\n\n    /**\n     * Reads the stream of created messages for an application, but using server-managed iterator tracking.\n     * Message Events Subscription\n     * @param param the request object\n     */\n    public v1MessageEventsSubscription(param: MessageApiV1MessageEventsSubscriptionRequest, options?: Configuration): Promise<MessageEventsOut> {\n        return this.api.v1MessageEventsSubscription(param.appId, param.subscriptionId, param.limit, param.iterator, param.eventTypes, param.channels, param.after,  options).toPromise();\n    }\n\n    /**\n     * Creates an auth token that can be used with the `v1.message.events-subscription` endpoint\n     * Message Events Create Token\n     * @param param the request object\n     */\n    public v1MessageEventsSubscriptionCreateToken(param: MessageApiV1MessageEventsSubscriptionCreateTokenRequest, options?: Configuration): Promise<MessageSubscriberAuthTokenOut> {\n        return this.api.v1MessageEventsSubscriptionCreateToken(param.appId, param.subscriptionId, param.idempotencyKey,  options).toPromise();\n    }\n\n    /**\n     * Delete the given message's payload. Useful in cases when a message was accidentally sent with sensitive content.  The message can't be replayed or resent once its payload has been deleted or expired.\n     * Delete message payload\n     * @param param the request object\n     */\n    public v1MessageExpungeContent(param: MessageApiV1MessageExpungeContentRequest, options?: Configuration): Promise<void> {\n        return this.api.v1MessageExpungeContent(param.appId, param.msgId,  options).toPromise();\n    }\n\n    /**\n     * Get a message by its ID or eventID.\n     * Get Message\n     * @param param the request object\n     */\n    public v1MessageGet(param: MessageApiV1MessageGetRequest, options?: Configuration): Promise<MessageOut> {\n        return this.api.v1MessageGet(param.appId, param.msgId, param.withContent,  options).toPromise();\n    }\n\n    /**\n     * Get a message raw payload by its ID or eventID.\n     * Get Raw Message Payload\n     * @param param the request object\n     */\n    public v1MessageGetRawPayload(param: MessageApiV1MessageGetRawPayloadRequest, options?: Configuration): Promise<MessageRawPayloadOut> {\n        return this.api.v1MessageGetRawPayload(param.appId, param.msgId,  options).toPromise();\n    }\n\n    /**\n     * List all of the application's messages.  The `before` and `after` parameters let you filter all items created before or after a certain date. These can be used alongside an iterator to paginate over results within a certain window.  Note that by default this endpoint is limited to retrieving 90 days' worth of data relative to now or, if an iterator is provided, 90 days before/after the time indicated by the iterator ID. If you require data beyond those time ranges, you will need to explicitly set the `before` or `after` parameter as appropriate. \n     * List Messages\n     * @param param the request object\n     */\n    public v1MessageList(param: MessageApiV1MessageListRequest, options?: Configuration): Promise<ListResponseMessageOut> {\n        return this.api.v1MessageList(param.appId, param.limit, param.iterator, param.channel, param.before, param.after, param.withContent, param.tag, param.eventTypes,  options).toPromise();\n    }\n\n}\n\nimport { ObservableMessageAttemptApi } from \"./ObservableAPI\";\nimport { MessageAttemptApiRequestFactory, MessageAttemptApiResponseProcessor} from \"../apis/MessageAttemptApi\";\n\nexport interface MessageAttemptApiV1MessageAttemptExpungeContentRequest {\n    /**\n     * The app&#39;s ID or UID\n     * @type string\n     * @memberof MessageAttemptApiv1MessageAttemptExpungeContent\n     */\n    appId: string\n    /**\n     * The msg&#39;s ID or UID\n     * @type string\n     * @memberof MessageAttemptApiv1MessageAttemptExpungeContent\n     */\n    msgId: string\n    /**\n     * The attempt&#39;s ID\n     * @type string\n     * @memberof MessageAttemptApiv1MessageAttemptExpungeContent\n     */\n    attemptId: string\n}\n\nexport interface MessageAttemptApiV1MessageAttemptGetRequest {\n    /**\n     * The app&#39;s ID or UID\n     * @type string\n     * @memberof MessageAttemptApiv1MessageAttemptGet\n     */\n    appId: string\n    /**\n     * The msg&#39;s ID or UID\n     * @type string\n     * @memberof MessageAttemptApiv1MessageAttemptGet\n     */\n    msgId: string\n    /**\n     * The attempt&#39;s ID\n     * @type string\n     * @memberof MessageAttemptApiv1MessageAttemptGet\n     */\n    attemptId: string\n}\n\nexport interface MessageAttemptApiV1MessageAttemptGetHeadersRequest {\n    /**\n     * The app&#39;s ID or UID\n     * @type string\n     * @memberof MessageAttemptApiv1MessageAttemptGetHeaders\n     */\n    appId: string\n    /**\n     * The msg&#39;s ID or UID\n     * @type string\n     * @memberof MessageAttemptApiv1MessageAttemptGetHeaders\n     */\n    msgId: string\n    /**\n     * The attempt&#39;s ID\n     * @type string\n     * @memberof MessageAttemptApiv1MessageAttemptGetHeaders\n     */\n    attemptId: string\n}\n\nexport interface MessageAttemptApiV1MessageAttemptListAttemptedDestinationsRequest {\n    /**\n     * The app&#39;s ID or UID\n     * @type string\n     * @memberof MessageAttemptApiv1MessageAttemptListAttemptedDestinations\n     */\n    appId: string\n    /**\n     * The msg&#39;s ID or UID\n     * @type string\n     * @memberof MessageAttemptApiv1MessageAttemptListAttemptedDestinations\n     */\n    msgId: string\n    /**\n     * Limit the number of returned items\n     * @type number\n     * @memberof MessageAttemptApiv1MessageAttemptListAttemptedDestinations\n     */\n    limit?: number\n    /**\n     * The iterator returned from a prior invocation\n     * @type string\n     * @memberof MessageAttemptApiv1MessageAttemptListAttemptedDestinations\n     */\n    iterator?: string\n}\n\nexport interface MessageAttemptApiV1MessageAttemptListAttemptedMessagesRequest {\n    /**\n     * The app&#39;s ID or UID\n     * @type string\n     * @memberof MessageAttemptApiv1MessageAttemptListAttemptedMessages\n     */\n    appId: string\n    /**\n     * The ep&#39;s ID or UID\n     * @type string\n     * @memberof MessageAttemptApiv1MessageAttemptListAttemptedMessages\n     */\n    endpointId: string\n    /**\n     * Limit the number of returned items\n     * @type number\n     * @memberof MessageAttemptApiv1MessageAttemptListAttemptedMessages\n     */\n    limit?: number\n    /**\n     * The iterator returned from a prior invocation\n     * @type string\n     * @memberof MessageAttemptApiv1MessageAttemptListAttemptedMessages\n     */\n    iterator?: string\n    /**\n     * Filter response based on the channel\n     * @type string\n     * @memberof MessageAttemptApiv1MessageAttemptListAttemptedMessages\n     */\n    channel?: string\n    /**\n     * Filter response based on the message tags\n     * @type string\n     * @memberof MessageAttemptApiv1MessageAttemptListAttemptedMessages\n     */\n    tag?: string\n    /**\n     * Filter response based on the delivery status\n     * @type MessageStatus\n     * @memberof MessageAttemptApiv1MessageAttemptListAttemptedMessages\n     */\n    status?: MessageStatus\n    /**\n     * Only include items created before a certain date\n     * @type Date\n     * @memberof MessageAttemptApiv1MessageAttemptListAttemptedMessages\n     */\n    before?: Date\n    /**\n     * Only include items created after a certain date\n     * @type Date\n     * @memberof MessageAttemptApiv1MessageAttemptListAttemptedMessages\n     */\n    after?: Date\n    /**\n     * When &#x60;true&#x60; message payloads are included in the response\n     * @type boolean\n     * @memberof MessageAttemptApiv1MessageAttemptListAttemptedMessages\n     */\n    withContent?: boolean\n    /**\n     * Filter response based on the event type\n     * @type Array&lt;string&gt;\n     * @memberof MessageAttemptApiv1MessageAttemptListAttemptedMessages\n     */\n    eventTypes?: Array<string>\n}\n\nexport interface MessageAttemptApiV1MessageAttemptListByEndpointRequest {\n    /**\n     * The app&#39;s ID or UID\n     * @type string\n     * @memberof MessageAttemptApiv1MessageAttemptListByEndpoint\n     */\n    appId: string\n    /**\n     * The ep&#39;s ID or UID\n     * @type string\n     * @memberof MessageAttemptApiv1MessageAttemptListByEndpoint\n     */\n    endpointId: string\n    /**\n     * Limit the number of returned items\n     * @type number\n     * @memberof MessageAttemptApiv1MessageAttemptListByEndpoint\n     */\n    limit?: number\n    /**\n     * The iterator returned from a prior invocation\n     * @type string\n     * @memberof MessageAttemptApiv1MessageAttemptListByEndpoint\n     */\n    iterator?: string\n    /**\n     * Filter response based on the delivery status\n     * @type MessageStatus\n     * @memberof MessageAttemptApiv1MessageAttemptListByEndpoint\n     */\n    status?: MessageStatus\n    /**\n     * Filter response based on the HTTP status code\n     * @type StatusCodeClass\n     * @memberof MessageAttemptApiv1MessageAttemptListByEndpoint\n     */\n    statusCodeClass?: StatusCodeClass\n    /**\n     * Filter response based on the channel\n     * @type string\n     * @memberof MessageAttemptApiv1MessageAttemptListByEndpoint\n     */\n    channel?: string\n    /**\n     * Filter response based on the tag\n     * @type string\n     * @memberof MessageAttemptApiv1MessageAttemptListByEndpoint\n     */\n    tag?: string\n    /**\n     * Only include items created before a certain date\n     * @type Date\n     * @memberof MessageAttemptApiv1MessageAttemptListByEndpoint\n     */\n    before?: Date\n    /**\n     * Only include items created after a certain date\n     * @type Date\n     * @memberof MessageAttemptApiv1MessageAttemptListByEndpoint\n     */\n    after?: Date\n    /**\n     * When &#x60;true&#x60; attempt content is included in the response\n     * @type boolean\n     * @memberof MessageAttemptApiv1MessageAttemptListByEndpoint\n     */\n    withContent?: boolean\n    /**\n     * When &#x60;true&#x60;, the message information is included in the response\n     * @type boolean\n     * @memberof MessageAttemptApiv1MessageAttemptListByEndpoint\n     */\n    withMsg?: boolean\n    /**\n     * Filter response based on the event type\n     * @type Array&lt;string&gt;\n     * @memberof MessageAttemptApiv1MessageAttemptListByEndpoint\n     */\n    eventTypes?: Array<string>\n}\n\nexport interface MessageAttemptApiV1MessageAttemptListByEndpointDeprecatedRequest {\n    /**\n     * The app&#39;s ID or UID\n     * @type string\n     * @memberof MessageAttemptApiv1MessageAttemptListByEndpointDeprecated\n     */\n    appId: string\n    /**\n     * The msg&#39;s ID or UID\n     * @type string\n     * @memberof MessageAttemptApiv1MessageAttemptListByEndpointDeprecated\n     */\n    msgId: string\n    /**\n     * The ep&#39;s ID or UID\n     * @type string\n     * @memberof MessageAttemptApiv1MessageAttemptListByEndpointDeprecated\n     */\n    endpointId: string\n    /**\n     * Limit the number of returned items\n     * @type number\n     * @memberof MessageAttemptApiv1MessageAttemptListByEndpointDeprecated\n     */\n    limit?: number\n    /**\n     * The iterator returned from a prior invocation\n     * @type string\n     * @memberof MessageAttemptApiv1MessageAttemptListByEndpointDeprecated\n     */\n    iterator?: string\n    /**\n     * Filter response based on the channel\n     * @type string\n     * @memberof MessageAttemptApiv1MessageAttemptListByEndpointDeprecated\n     */\n    channel?: string\n    /**\n     * Filter response based on the tag\n     * @type string\n     * @memberof MessageAttemptApiv1MessageAttemptListByEndpointDeprecated\n     */\n    tag?: string\n    /**\n     * Filter response based on the delivery status\n     * @type MessageStatus\n     * @memberof MessageAttemptApiv1MessageAttemptListByEndpointDeprecated\n     */\n    status?: MessageStatus\n    /**\n     * Only include items created before a certain date\n     * @type Date\n     * @memberof MessageAttemptApiv1MessageAttemptListByEndpointDeprecated\n     */\n    before?: Date\n    /**\n     * Only include items created after a certain date\n     * @type Date\n     * @memberof MessageAttemptApiv1MessageAttemptListByEndpointDeprecated\n     */\n    after?: Date\n    /**\n     * Filter response based on the event type\n     * @type Array&lt;string&gt;\n     * @memberof MessageAttemptApiv1MessageAttemptListByEndpointDeprecated\n     */\n    eventTypes?: Array<string>\n}\n\nexport interface MessageAttemptApiV1MessageAttemptListByMsgRequest {\n    /**\n     * The app&#39;s ID or UID\n     * @type string\n     * @memberof MessageAttemptApiv1MessageAttemptListByMsg\n     */\n    appId: string\n    /**\n     * The msg&#39;s ID or UID\n     * @type string\n     * @memberof MessageAttemptApiv1MessageAttemptListByMsg\n     */\n    msgId: string\n    /**\n     * Limit the number of returned items\n     * @type number\n     * @memberof MessageAttemptApiv1MessageAttemptListByMsg\n     */\n    limit?: number\n    /**\n     * The iterator returned from a prior invocation\n     * @type string\n     * @memberof MessageAttemptApiv1MessageAttemptListByMsg\n     */\n    iterator?: string\n    /**\n     * Filter response based on the delivery status\n     * @type MessageStatus\n     * @memberof MessageAttemptApiv1MessageAttemptListByMsg\n     */\n    status?: MessageStatus\n    /**\n     * Filter response based on the HTTP status code\n     * @type StatusCodeClass\n     * @memberof MessageAttemptApiv1MessageAttemptListByMsg\n     */\n    statusCodeClass?: StatusCodeClass\n    /**\n     * Filter response based on the channel\n     * @type string\n     * @memberof MessageAttemptApiv1MessageAttemptListByMsg\n     */\n    channel?: string\n    /**\n     * Filter response based on the tag\n     * @type string\n     * @memberof MessageAttemptApiv1MessageAttemptListByMsg\n     */\n    tag?: string\n    /**\n     * Filter the attempts based on the attempted endpoint\n     * @type string\n     * @memberof MessageAttemptApiv1MessageAttemptListByMsg\n     */\n    endpointId?: string\n    /**\n     * Only include items created before a certain date\n     * @type Date\n     * @memberof MessageAttemptApiv1MessageAttemptListByMsg\n     */\n    before?: Date\n    /**\n     * Only include items created after a certain date\n     * @type Date\n     * @memberof MessageAttemptApiv1MessageAttemptListByMsg\n     */\n    after?: Date\n    /**\n     * When &#x60;true&#x60; attempt content is included in the response\n     * @type boolean\n     * @memberof MessageAttemptApiv1MessageAttemptListByMsg\n     */\n    withContent?: boolean\n    /**\n     * Filter response based on the event type\n     * @type Array&lt;string&gt;\n     * @memberof MessageAttemptApiv1MessageAttemptListByMsg\n     */\n    eventTypes?: Array<string>\n}\n\nexport interface MessageAttemptApiV1MessageAttemptListByMsgDeprecatedRequest {\n    /**\n     * The app&#39;s ID or UID\n     * @type string\n     * @memberof MessageAttemptApiv1MessageAttemptListByMsgDeprecated\n     */\n    appId: string\n    /**\n     * The msg&#39;s ID or UID\n     * @type string\n     * @memberof MessageAttemptApiv1MessageAttemptListByMsgDeprecated\n     */\n    msgId: string\n    /**\n     * Limit the number of returned items\n     * @type number\n     * @memberof MessageAttemptApiv1MessageAttemptListByMsgDeprecated\n     */\n    limit?: number\n    /**\n     * The iterator returned from a prior invocation\n     * @type string\n     * @memberof MessageAttemptApiv1MessageAttemptListByMsgDeprecated\n     */\n    iterator?: string\n    /**\n     * Filter the attempts based on the attempted endpoint\n     * @type string\n     * @memberof MessageAttemptApiv1MessageAttemptListByMsgDeprecated\n     */\n    endpointId?: string\n    /**\n     * Filter response based on the channel\n     * @type string\n     * @memberof MessageAttemptApiv1MessageAttemptListByMsgDeprecated\n     */\n    channel?: string\n    /**\n     * Filter response based on the tag\n     * @type string\n     * @memberof MessageAttemptApiv1MessageAttemptListByMsgDeprecated\n     */\n    tag?: string\n    /**\n     * Filter response based on the delivery status\n     * @type MessageStatus\n     * @memberof MessageAttemptApiv1MessageAttemptListByMsgDeprecated\n     */\n    status?: MessageStatus\n    /**\n     * Only include items created before a certain date\n     * @type Date\n     * @memberof MessageAttemptApiv1MessageAttemptListByMsgDeprecated\n     */\n    before?: Date\n    /**\n     * Only include items created after a certain date\n     * @type Date\n     * @memberof MessageAttemptApiv1MessageAttemptListByMsgDeprecated\n     */\n    after?: Date\n    /**\n     * Filter response based on the HTTP status code\n     * @type StatusCodeClass\n     * @memberof MessageAttemptApiv1MessageAttemptListByMsgDeprecated\n     */\n    statusCodeClass?: StatusCodeClass\n    /**\n     * Filter response based on the event type\n     * @type Array&lt;string&gt;\n     * @memberof MessageAttemptApiv1MessageAttemptListByMsgDeprecated\n     */\n    eventTypes?: Array<string>\n}\n\nexport interface MessageAttemptApiV1MessageAttemptResendRequest {\n    /**\n     * The app&#39;s ID or UID\n     * @type string\n     * @memberof MessageAttemptApiv1MessageAttemptResend\n     */\n    appId: string\n    /**\n     * The msg&#39;s ID or UID\n     * @type string\n     * @memberof MessageAttemptApiv1MessageAttemptResend\n     */\n    msgId: string\n    /**\n     * The ep&#39;s ID or UID\n     * @type string\n     * @memberof MessageAttemptApiv1MessageAttemptResend\n     */\n    endpointId: string\n    /**\n     * The request&#39;s idempotency key\n     * @type string\n     * @memberof MessageAttemptApiv1MessageAttemptResend\n     */\n    idempotencyKey?: string\n}\n\nexport class ObjectMessageAttemptApi {\n    private api: ObservableMessageAttemptApi\n\n    public constructor(configuration: Configuration, requestFactory?: MessageAttemptApiRequestFactory, responseProcessor?: MessageAttemptApiResponseProcessor) {\n        this.api = new ObservableMessageAttemptApi(configuration, requestFactory, responseProcessor);\n    }\n\n    /**\n     * Deletes the given attempt's response body. Useful when an endpoint accidentally returned sensitive content.\n     * Delete attempt response body\n     * @param param the request object\n     */\n    public v1MessageAttemptExpungeContent(param: MessageAttemptApiV1MessageAttemptExpungeContentRequest, options?: Configuration): Promise<void> {\n        return this.api.v1MessageAttemptExpungeContent(param.appId, param.msgId, param.attemptId,  options).toPromise();\n    }\n\n    /**\n     * `msg_id`: Use a message id or a message `eventId`\n     * Get Attempt\n     * @param param the request object\n     */\n    public v1MessageAttemptGet(param: MessageAttemptApiV1MessageAttemptGetRequest, options?: Configuration): Promise<MessageAttemptOut> {\n        return this.api.v1MessageAttemptGet(param.appId, param.msgId, param.attemptId,  options).toPromise();\n    }\n\n    /**\n     * Calculate and return headers used on a given message attempt\n     * Get Attempt Headers\n     * @param param the request object\n     */\n    public v1MessageAttemptGetHeaders(param: MessageAttemptApiV1MessageAttemptGetHeadersRequest, options?: Configuration): Promise<MessageAttemptHeadersOut> {\n        return this.api.v1MessageAttemptGetHeaders(param.appId, param.msgId, param.attemptId,  options).toPromise();\n    }\n\n    /**\n     * List endpoints attempted by a given message. Additionally includes metadata about the latest message attempt. By default, endpoints are listed in ascending order by ID.\n     * List Attempted Destinations\n     * @param param the request object\n     */\n    public v1MessageAttemptListAttemptedDestinations(param: MessageAttemptApiV1MessageAttemptListAttemptedDestinationsRequest, options?: Configuration): Promise<ListResponseMessageEndpointOut> {\n        return this.api.v1MessageAttemptListAttemptedDestinations(param.appId, param.msgId, param.limit, param.iterator,  options).toPromise();\n    }\n\n    /**\n     * List messages for a particular endpoint. Additionally includes metadata about the latest message attempt.  The `before` parameter lets you filter all items created before a certain date and is ignored if an iterator is passed.  Note that by default this endpoint is limited to retrieving 90 days' worth of data relative to now or, if an iterator is provided, 90 days before/after the time indicated by the iterator ID. If you require data beyond those time ranges, you will need to explicitly set the `before` or `after` parameter as appropriate. \n     * List Attempted Messages\n     * @param param the request object\n     */\n    public v1MessageAttemptListAttemptedMessages(param: MessageAttemptApiV1MessageAttemptListAttemptedMessagesRequest, options?: Configuration): Promise<ListResponseEndpointMessageOut> {\n        return this.api.v1MessageAttemptListAttemptedMessages(param.appId, param.endpointId, param.limit, param.iterator, param.channel, param.tag, param.status, param.before, param.after, param.withContent, param.eventTypes,  options).toPromise();\n    }\n\n    /**\n     * List attempts by endpoint id  Note that by default this endpoint is limited to retrieving 90 days' worth of data relative to now or, if an iterator is provided, 90 days before/after the time indicated by the iterator ID. If you require data beyond those time ranges, you will need to explicitly set the `before` or `after` parameter as appropriate. \n     * List Attempts By Endpoint\n     * @param param the request object\n     */\n    public v1MessageAttemptListByEndpoint(param: MessageAttemptApiV1MessageAttemptListByEndpointRequest, options?: Configuration): Promise<ListResponseMessageAttemptOut> {\n        return this.api.v1MessageAttemptListByEndpoint(param.appId, param.endpointId, param.limit, param.iterator, param.status, param.statusCodeClass, param.channel, param.tag, param.before, param.after, param.withContent, param.withMsg, param.eventTypes,  options).toPromise();\n    }\n\n    /**\n     * DEPRECATED: please use list_attempts with endpoint_id as a query parameter instead.  List the message attempts for a particular endpoint.  Returning the endpoint.  The `before` parameter lets you filter all items created before a certain date and is ignored if an iterator is passed.  Note that by default this endpoint is limited to retrieving 90 days' worth of data relative to now or, if an iterator is provided, 90 days before/after the time indicated by the iterator ID. If you require data beyond those time ranges, you will need to explicitly set the `before` or `after` parameter as appropriate. \n     * List Attempts For Endpoint\n     * @param param the request object\n     */\n    public v1MessageAttemptListByEndpointDeprecated(param: MessageAttemptApiV1MessageAttemptListByEndpointDeprecatedRequest, options?: Configuration): Promise<ListResponseMessageAttemptEndpointOut> {\n        return this.api.v1MessageAttemptListByEndpointDeprecated(param.appId, param.msgId, param.endpointId, param.limit, param.iterator, param.channel, param.tag, param.status, param.before, param.after, param.eventTypes,  options).toPromise();\n    }\n\n    /**\n     * List attempts by message id  Note that by default this endpoint is limited to retrieving 90 days' worth of data relative to now or, if an iterator is provided, 90 days before/after the time indicated by the iterator ID. If you require data beyond those time ranges, you will need to explicitly set the `before` or `after` parameter as appropriate. \n     * List Attempts By Msg\n     * @param param the request object\n     */\n    public v1MessageAttemptListByMsg(param: MessageAttemptApiV1MessageAttemptListByMsgRequest, options?: Configuration): Promise<ListResponseMessageAttemptOut> {\n        return this.api.v1MessageAttemptListByMsg(param.appId, param.msgId, param.limit, param.iterator, param.status, param.statusCodeClass, param.channel, param.tag, param.endpointId, param.before, param.after, param.withContent, param.eventTypes,  options).toPromise();\n    }\n\n    /**\n     * Deprecated: Please use \\\"List Attempts by Endpoint\\\" and \\\"List Attempts by Msg\\\" instead.  Note that by default this endpoint is limited to retrieving 90 days' worth of data relative to now or, if an iterator is provided, 90 days before/after the time indicated by the iterator ID. If you require data beyond those time ranges, you will need to explicitly set the `before` or `after` parameter as appropriate.  `msg_id`: Use a message id or a message `eventId`\n     * List Attempts\n     * @param param the request object\n     */\n    public v1MessageAttemptListByMsgDeprecated(param: MessageAttemptApiV1MessageAttemptListByMsgDeprecatedRequest, options?: Configuration): Promise<ListResponseMessageAttemptOut> {\n        return this.api.v1MessageAttemptListByMsgDeprecated(param.appId, param.msgId, param.limit, param.iterator, param.endpointId, param.channel, param.tag, param.status, param.before, param.after, param.statusCodeClass, param.eventTypes,  options).toPromise();\n    }\n\n    /**\n     * Resend a message to the specified endpoint.\n     * Resend Webhook\n     * @param param the request object\n     */\n    public v1MessageAttemptResend(param: MessageAttemptApiV1MessageAttemptResendRequest, options?: Configuration): Promise<void> {\n        return this.api.v1MessageAttemptResend(param.appId, param.msgId, param.endpointId, param.idempotencyKey,  options).toPromise();\n    }\n\n}\n\nimport { ObservableSinkApi } from \"./ObservableAPI\";\nimport { SinkApiRequestFactory, SinkApiResponseProcessor} from \"../apis/SinkApi\";\n\nexport interface SinkApiV1StreamCreateEventsRequest {\n    /**\n     * \n     * @type string\n     * @memberof SinkApiv1StreamCreateEvents\n     */\n    streamId: string\n    /**\n     * \n     * @type CreateStreamIn\n     * @memberof SinkApiv1StreamCreateEvents\n     */\n    createStreamIn: CreateStreamIn\n    /**\n     * The request&#39;s idempotency key\n     * @type string\n     * @memberof SinkApiv1StreamCreateEvents\n     */\n    idempotencyKey?: string\n}\n\nexport interface SinkApiV1StreamEventsGetRequest {\n    /**\n     * \n     * @type string\n     * @memberof SinkApiv1StreamEventsGet\n     */\n    streamId: string\n    /**\n     * Limit the number of returned items\n     * @type number\n     * @memberof SinkApiv1StreamEventsGet\n     */\n    limit?: number\n    /**\n     * The iterator returned from a prior invocation\n     * @type string\n     * @memberof SinkApiv1StreamEventsGet\n     */\n    iterator?: string\n    /**\n     * \n     * @type Date\n     * @memberof SinkApiv1StreamEventsGet\n     */\n    after?: Date\n}\n\nexport class ObjectSinkApi {\n    private api: ObservableSinkApi\n\n    public constructor(configuration: Configuration, requestFactory?: SinkApiRequestFactory, responseProcessor?: SinkApiResponseProcessor) {\n        this.api = new ObservableSinkApi(configuration, requestFactory, responseProcessor);\n    }\n\n    /**\n     * Creates streaming events.\n     * Append To Stream\n     * @param param the request object\n     */\n    public v1StreamCreateEvents(param: SinkApiV1StreamCreateEventsRequest, options?: Configuration): Promise<any> {\n        return this.api.v1StreamCreateEvents(param.streamId, param.createStreamIn, param.idempotencyKey,  options).toPromise();\n    }\n\n    /**\n     * Iterate over a stream of events.\n     * Stream Events\n     * @param param the request object\n     */\n    public v1StreamEventsGet(param: SinkApiV1StreamEventsGetRequest, options?: Configuration): Promise<EventStreamOut> {\n        return this.api.v1StreamEventsGet(param.streamId, param.limit, param.iterator, param.after,  options).toPromise();\n    }\n\n}\n\nimport { ObservableStatisticsApi } from \"./ObservableAPI\";\nimport { StatisticsApiRequestFactory, StatisticsApiResponseProcessor} from \"../apis/StatisticsApi\";\n\nexport interface StatisticsApiV1StatisticsAggregateAppStatsRequest {\n    /**\n     * \n     * @type AppUsageStatsIn\n     * @memberof StatisticsApiv1StatisticsAggregateAppStats\n     */\n    appUsageStatsIn: AppUsageStatsIn\n    /**\n     * The request&#39;s idempotency key\n     * @type string\n     * @memberof StatisticsApiv1StatisticsAggregateAppStats\n     */\n    idempotencyKey?: string\n}\n\nexport interface StatisticsApiV1StatisticsAggregateEventTypesRequest {\n}\n\nexport interface StatisticsApiV1StatsAppAttemptsRequest {\n    /**\n     * The app&#39;s ID or UID\n     * @type string\n     * @memberof StatisticsApiv1StatsAppAttempts\n     */\n    appId: string\n    /**\n     * Filter the range to data starting from this date\n     * @type Date\n     * @memberof StatisticsApiv1StatsAppAttempts\n     */\n    startDate?: Date\n    /**\n     * Filter the range to data ending by this date\n     * @type Date\n     * @memberof StatisticsApiv1StatsAppAttempts\n     */\n    endDate?: Date\n}\n\nexport interface StatisticsApiV1StatsEndpointAttemptsRequest {\n    /**\n     * The app&#39;s ID or UID\n     * @type string\n     * @memberof StatisticsApiv1StatsEndpointAttempts\n     */\n    appId: string\n    /**\n     * The ep&#39;s ID or UID\n     * @type string\n     * @memberof StatisticsApiv1StatsEndpointAttempts\n     */\n    endpointId: string\n    /**\n     * Filter the range to data starting from this date\n     * @type Date\n     * @memberof StatisticsApiv1StatsEndpointAttempts\n     */\n    startDate?: Date\n    /**\n     * Filter the range to data ending by this date\n     * @type Date\n     * @memberof StatisticsApiv1StatsEndpointAttempts\n     */\n    endDate?: Date\n}\n\nexport class ObjectStatisticsApi {\n    private api: ObservableStatisticsApi\n\n    public constructor(configuration: Configuration, requestFactory?: StatisticsApiRequestFactory, responseProcessor?: StatisticsApiResponseProcessor) {\n        this.api = new ObservableStatisticsApi(configuration, requestFactory, responseProcessor);\n    }\n\n    /**\n     * Creates a background task to calculate the message destinations for all applications in the environment.  Note that this endpoint is asynchronous. You will need to poll the `Get Background Task` endpoint to retrieve the results of the operation.\n     * Aggregate App Stats\n     * @param param the request object\n     */\n    public v1StatisticsAggregateAppStats(param: StatisticsApiV1StatisticsAggregateAppStatsRequest, options?: Configuration): Promise<AppUsageStatsOut> {\n        return this.api.v1StatisticsAggregateAppStats(param.appUsageStatsIn, param.idempotencyKey,  options).toPromise();\n    }\n\n    /**\n     * Creates a background task to calculate the listed event types for all apps in the organization.  Note that this endpoint is asynchronous. You will need to poll the `Get Background Task` endpoint to retrieve the results of the operation.\n     * Aggregate Event Types\n     * @param param the request object\n     */\n    public v1StatisticsAggregateEventTypes(param: StatisticsApiV1StatisticsAggregateEventTypesRequest, options?: Configuration): Promise<AggregateEventTypesOut> {\n        return this.api.v1StatisticsAggregateEventTypes( options).toPromise();\n    }\n\n    /**\n     * Returns application-level statistics on message attempts\n     * Get App Attempt Stats\n     * @param param the request object\n     */\n    public v1StatsAppAttempts(param: StatisticsApiV1StatsAppAttemptsRequest, options?: Configuration): Promise<AttemptStatisticsResponse> {\n        return this.api.v1StatsAppAttempts(param.appId, param.startDate, param.endDate,  options).toPromise();\n    }\n\n    /**\n     * Returns endpoint-level statistics on message attempts\n     * Get Ep Stats\n     * @param param the request object\n     */\n    public v1StatsEndpointAttempts(param: StatisticsApiV1StatsEndpointAttemptsRequest, options?: Configuration): Promise<AttemptStatisticsResponse> {\n        return this.api.v1StatsEndpointAttempts(param.appId, param.endpointId, param.startDate, param.endDate,  options).toPromise();\n    }\n\n}\n\nimport { ObservableStreamApi } from \"./ObservableAPI\";\nimport { StreamApiRequestFactory, StreamApiResponseProcessor} from \"../apis/StreamApi\";\n\nexport interface StreamApiV1StreamCreateRequest {\n    /**\n     * \n     * @type StreamIn\n     * @memberof StreamApiv1StreamCreate\n     */\n    streamIn: StreamIn\n    /**\n     * The request&#39;s idempotency key\n     * @type string\n     * @memberof StreamApiv1StreamCreate\n     */\n    idempotencyKey?: string\n}\n\nexport interface StreamApiV1StreamDeleteRequest {\n    /**\n     * \n     * @type string\n     * @memberof StreamApiv1StreamDelete\n     */\n    streamId: string\n}\n\nexport interface StreamApiV1StreamGetRequest {\n    /**\n     * \n     * @type string\n     * @memberof StreamApiv1StreamGet\n     */\n    streamId: string\n}\n\nexport interface StreamApiV1StreamListRequest {\n    /**\n     * Limit the number of returned items\n     * @type number\n     * @memberof StreamApiv1StreamList\n     */\n    limit?: number\n    /**\n     * The iterator returned from a prior invocation\n     * @type string\n     * @memberof StreamApiv1StreamList\n     */\n    iterator?: string\n    /**\n     * The sorting order of the returned items\n     * @type Ordering\n     * @memberof StreamApiv1StreamList\n     */\n    order?: Ordering\n}\n\nexport interface StreamApiV1StreamPatchRequest {\n    /**\n     * \n     * @type string\n     * @memberof StreamApiv1StreamPatch\n     */\n    streamId: string\n    /**\n     * \n     * @type StreamPatch\n     * @memberof StreamApiv1StreamPatch\n     */\n    streamPatch: StreamPatch\n}\n\nexport interface StreamApiV1StreamUpdateRequest {\n    /**\n     * \n     * @type string\n     * @memberof StreamApiv1StreamUpdate\n     */\n    streamId: string\n    /**\n     * \n     * @type StreamIn\n     * @memberof StreamApiv1StreamUpdate\n     */\n    streamIn: StreamIn\n}\n\nexport class ObjectStreamApi {\n    private api: ObservableStreamApi\n\n    public constructor(configuration: Configuration, requestFactory?: StreamApiRequestFactory, responseProcessor?: StreamApiResponseProcessor) {\n        this.api = new ObservableStreamApi(configuration, requestFactory, responseProcessor);\n    }\n\n    /**\n     * Creates a new stream.\n     * Create Stream\n     * @param param the request object\n     */\n    public v1StreamCreate(param: StreamApiV1StreamCreateRequest, options?: Configuration): Promise<StreamOut> {\n        return this.api.v1StreamCreate(param.streamIn, param.idempotencyKey,  options).toPromise();\n    }\n\n    /**\n     * Delete a stream.\n     * Delete Stream\n     * @param param the request object\n     */\n    public v1StreamDelete(param: StreamApiV1StreamDeleteRequest, options?: Configuration): Promise<void> {\n        return this.api.v1StreamDelete(param.streamId,  options).toPromise();\n    }\n\n    /**\n     * Get a stream by id or uid.\n     * Get Stream\n     * @param param the request object\n     */\n    public v1StreamGet(param: StreamApiV1StreamGetRequest, options?: Configuration): Promise<StreamOut> {\n        return this.api.v1StreamGet(param.streamId,  options).toPromise();\n    }\n\n    /**\n     * List of all the organization's streams.\n     * List Streams\n     * @param param the request object\n     */\n    public v1StreamList(param: StreamApiV1StreamListRequest, options?: Configuration): Promise<ListResponseStreamOut> {\n        return this.api.v1StreamList(param.limit, param.iterator, param.order,  options).toPromise();\n    }\n\n    /**\n     * Partially update a stream.\n     * Patch Stream\n     * @param param the request object\n     */\n    public v1StreamPatch(param: StreamApiV1StreamPatchRequest, options?: Configuration): Promise<StreamOut> {\n        return this.api.v1StreamPatch(param.streamId, param.streamPatch,  options).toPromise();\n    }\n\n    /**\n     * Update a stream.\n     * Update Stream\n     * @param param the request object\n     */\n    public v1StreamUpdate(param: StreamApiV1StreamUpdateRequest, options?: Configuration): Promise<StreamOut> {\n        return this.api.v1StreamUpdate(param.streamId, param.streamIn,  options).toPromise();\n    }\n\n}\n\nimport { ObservableTransformationTemplateApi } from \"./ObservableAPI\";\nimport { TransformationTemplateApiRequestFactory, TransformationTemplateApiResponseProcessor} from \"../apis/TransformationTemplateApi\";\n\nexport interface TransformationTemplateApiV1EndpointUpdateHubspotOauthConfigRequest {\n    /**\n     * The app&#39;s ID or UID\n     * @type string\n     * @memberof TransformationTemplateApiv1EndpointUpdateHubspotOauthConfig\n     */\n    appId: string\n    /**\n     * The ep&#39;s ID or UID\n     * @type string\n     * @memberof TransformationTemplateApiv1EndpointUpdateHubspotOauthConfig\n     */\n    endpointId: string\n    /**\n     * \n     * @type HubspotOauthConfigIn\n     * @memberof TransformationTemplateApiv1EndpointUpdateHubspotOauthConfig\n     */\n    hubspotOauthConfigIn: HubspotOauthConfigIn\n}\n\nexport interface TransformationTemplateApiV1TransformationTemplateCreateRequest {\n    /**\n     * \n     * @type TemplateIn\n     * @memberof TransformationTemplateApiv1TransformationTemplateCreate\n     */\n    templateIn: TemplateIn\n    /**\n     * The request&#39;s idempotency key\n     * @type string\n     * @memberof TransformationTemplateApiv1TransformationTemplateCreate\n     */\n    idempotencyKey?: string\n}\n\nexport interface TransformationTemplateApiV1TransformationTemplateDeleteRequest {\n    /**\n     * \n     * @type string\n     * @memberof TransformationTemplateApiv1TransformationTemplateDelete\n     */\n    transformationTemplateId: string\n}\n\nexport interface TransformationTemplateApiV1TransformationTemplateGenerateRequest {\n    /**\n     * \n     * @type GenerateIn\n     * @memberof TransformationTemplateApiv1TransformationTemplateGenerate\n     */\n    generateIn: GenerateIn\n    /**\n     * The request&#39;s idempotency key\n     * @type string\n     * @memberof TransformationTemplateApiv1TransformationTemplateGenerate\n     */\n    idempotencyKey?: string\n}\n\nexport interface TransformationTemplateApiV1TransformationTemplateGetRequest {\n    /**\n     * \n     * @type string\n     * @memberof TransformationTemplateApiv1TransformationTemplateGet\n     */\n    transformationTemplateId: string\n}\n\nexport interface TransformationTemplateApiV1TransformationTemplateListRequest {\n    /**\n     * Limit the number of returned items\n     * @type number\n     * @memberof TransformationTemplateApiv1TransformationTemplateList\n     */\n    limit?: number\n    /**\n     * The iterator returned from a prior invocation\n     * @type string\n     * @memberof TransformationTemplateApiv1TransformationTemplateList\n     */\n    iterator?: string\n    /**\n     * The sorting order of the returned items\n     * @type Ordering\n     * @memberof TransformationTemplateApiv1TransformationTemplateList\n     */\n    order?: Ordering\n}\n\nexport interface TransformationTemplateApiV1TransformationTemplateOauthDiscordRequest {\n    /**\n     * \n     * @type OAuthPayloadIn\n     * @memberof TransformationTemplateApiv1TransformationTemplateOauthDiscord\n     */\n    oAuthPayloadIn: OAuthPayloadIn\n    /**\n     * The request&#39;s idempotency key\n     * @type string\n     * @memberof TransformationTemplateApiv1TransformationTemplateOauthDiscord\n     */\n    idempotencyKey?: string\n}\n\nexport interface TransformationTemplateApiV1TransformationTemplateOauthHubspotRequest {\n    /**\n     * \n     * @type OAuthPayloadIn\n     * @memberof TransformationTemplateApiv1TransformationTemplateOauthHubspot\n     */\n    oAuthPayloadIn: OAuthPayloadIn\n    /**\n     * The request&#39;s idempotency key\n     * @type string\n     * @memberof TransformationTemplateApiv1TransformationTemplateOauthHubspot\n     */\n    idempotencyKey?: string\n}\n\nexport interface TransformationTemplateApiV1TransformationTemplateOauthSlackRequest {\n    /**\n     * \n     * @type OAuthPayloadIn\n     * @memberof TransformationTemplateApiv1TransformationTemplateOauthSlack\n     */\n    oAuthPayloadIn: OAuthPayloadIn\n    /**\n     * The request&#39;s idempotency key\n     * @type string\n     * @memberof TransformationTemplateApiv1TransformationTemplateOauthSlack\n     */\n    idempotencyKey?: string\n}\n\nexport interface TransformationTemplateApiV1TransformationTemplatePatchRequest {\n    /**\n     * \n     * @type string\n     * @memberof TransformationTemplateApiv1TransformationTemplatePatch\n     */\n    transformationTemplateId: string\n    /**\n     * \n     * @type TemplatePatch\n     * @memberof TransformationTemplateApiv1TransformationTemplatePatch\n     */\n    templatePatch: TemplatePatch\n}\n\nexport interface TransformationTemplateApiV1TransformationTemplateSimulateRequest {\n    /**\n     * \n     * @type TransformationSimulateIn\n     * @memberof TransformationTemplateApiv1TransformationTemplateSimulate\n     */\n    transformationSimulateIn: TransformationSimulateIn\n    /**\n     * The request&#39;s idempotency key\n     * @type string\n     * @memberof TransformationTemplateApiv1TransformationTemplateSimulate\n     */\n    idempotencyKey?: string\n}\n\nexport interface TransformationTemplateApiV1TransformationTemplateUpdateRequest {\n    /**\n     * \n     * @type string\n     * @memberof TransformationTemplateApiv1TransformationTemplateUpdate\n     */\n    transformationTemplateId: string\n    /**\n     * \n     * @type TemplateUpdate\n     * @memberof TransformationTemplateApiv1TransformationTemplateUpdate\n     */\n    templateUpdate: TemplateUpdate\n}\n\nexport class ObjectTransformationTemplateApi {\n    private api: ObservableTransformationTemplateApi\n\n    public constructor(configuration: Configuration, requestFactory?: TransformationTemplateApiRequestFactory, responseProcessor?: TransformationTemplateApiResponseProcessor) {\n        this.api = new ObservableTransformationTemplateApi(configuration, requestFactory, responseProcessor);\n    }\n\n    /**\n     * Create/update endpoint Hubsport OAuth configuration Specific private endpoint just for us, to avoid exposing the Hubspot secret to the client.\n     * Update Hubspot Oauth Config\n     * @param param the request object\n     */\n    public v1EndpointUpdateHubspotOauthConfig(param: TransformationTemplateApiV1EndpointUpdateHubspotOauthConfigRequest, options?: Configuration): Promise<void> {\n        return this.api.v1EndpointUpdateHubspotOauthConfig(param.appId, param.endpointId, param.hubspotOauthConfigIn,  options).toPromise();\n    }\n\n    /**\n     * Create a new transformation template\n     * Create Transformation Template\n     * @param param the request object\n     */\n    public v1TransformationTemplateCreate(param: TransformationTemplateApiV1TransformationTemplateCreateRequest, options?: Configuration): Promise<TemplateOut> {\n        return this.api.v1TransformationTemplateCreate(param.templateIn, param.idempotencyKey,  options).toPromise();\n    }\n\n    /**\n     * Delete a transformation template\n     * Delete Transformation Template\n     * @param param the request object\n     */\n    public v1TransformationTemplateDelete(param: TransformationTemplateApiV1TransformationTemplateDeleteRequest, options?: Configuration): Promise<void> {\n        return this.api.v1TransformationTemplateDelete(param.transformationTemplateId,  options).toPromise();\n    }\n\n    /**\n     * Use OpenAI's Completion API to generate code for a transformation template\n     * Generate\n     * @param param the request object\n     */\n    public v1TransformationTemplateGenerate(param: TransformationTemplateApiV1TransformationTemplateGenerateRequest, options?: Configuration): Promise<GenerateOut> {\n        return this.api.v1TransformationTemplateGenerate(param.generateIn, param.idempotencyKey,  options).toPromise();\n    }\n\n    /**\n     * Get a transformation template\n     * Get Transformation Template\n     * @param param the request object\n     */\n    public v1TransformationTemplateGet(param: TransformationTemplateApiV1TransformationTemplateGetRequest, options?: Configuration): Promise<TemplateOut> {\n        return this.api.v1TransformationTemplateGet(param.transformationTemplateId,  options).toPromise();\n    }\n\n    /**\n     * List all transformation templates for an application\n     * List Transformation Templates\n     * @param param the request object\n     */\n    public v1TransformationTemplateList(param: TransformationTemplateApiV1TransformationTemplateListRequest, options?: Configuration): Promise<ListResponseTemplateOut> {\n        return this.api.v1TransformationTemplateList(param.limit, param.iterator, param.order,  options).toPromise();\n    }\n\n    /**\n     * Get Discord Incoming webhook URL\n     * Authorize Discord\n     * @param param the request object\n     */\n    public v1TransformationTemplateOauthDiscord(param: TransformationTemplateApiV1TransformationTemplateOauthDiscordRequest, options?: Configuration): Promise<IncomingWebhookPayloadOut> {\n        return this.api.v1TransformationTemplateOauthDiscord(param.oAuthPayloadIn, param.idempotencyKey,  options).toPromise();\n    }\n\n    /**\n     * Get Hubspot access token using authorization code\n     * Authorize Hubspot\n     * @param param the request object\n     */\n    public v1TransformationTemplateOauthHubspot(param: TransformationTemplateApiV1TransformationTemplateOauthHubspotRequest, options?: Configuration): Promise<OAuthPayloadOut> {\n        return this.api.v1TransformationTemplateOauthHubspot(param.oAuthPayloadIn, param.idempotencyKey,  options).toPromise();\n    }\n\n    /**\n     * Get Slack Incoming webhook URL\n     * Authorize Slack\n     * @param param the request object\n     */\n    public v1TransformationTemplateOauthSlack(param: TransformationTemplateApiV1TransformationTemplateOauthSlackRequest, options?: Configuration): Promise<IncomingWebhookPayloadOut> {\n        return this.api.v1TransformationTemplateOauthSlack(param.oAuthPayloadIn, param.idempotencyKey,  options).toPromise();\n    }\n\n    /**\n     * Partially update a transformation template\n     * Patch Transformation Template\n     * @param param the request object\n     */\n    public v1TransformationTemplatePatch(param: TransformationTemplateApiV1TransformationTemplatePatchRequest, options?: Configuration): Promise<TemplateOut> {\n        return this.api.v1TransformationTemplatePatch(param.transformationTemplateId, param.templatePatch,  options).toPromise();\n    }\n\n    /**\n     * Simulate running the transformation on the payload and code\n     * Simulate\n     * @param param the request object\n     */\n    public v1TransformationTemplateSimulate(param: TransformationTemplateApiV1TransformationTemplateSimulateRequest, options?: Configuration): Promise<TransformationSimulateOut> {\n        return this.api.v1TransformationTemplateSimulate(param.transformationSimulateIn, param.idempotencyKey,  options).toPromise();\n    }\n\n    /**\n     * Update a transformation template\n     * Update Transformation Template\n     * @param param the request object\n     */\n    public v1TransformationTemplateUpdate(param: TransformationTemplateApiV1TransformationTemplateUpdateRequest, options?: Configuration): Promise<TemplateOut> {\n        return this.api.v1TransformationTemplateUpdate(param.transformationTemplateId, param.templateUpdate,  options).toPromise();\n    }\n\n}\n"],"names":[],"mappings":"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"}},
    {"offset": {"line": 2195, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}