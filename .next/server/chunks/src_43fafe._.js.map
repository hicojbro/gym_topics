{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 5, "column": 0}, "map": {"version":3,"sources":["turbopack://[project]/src/lib/client.ts"],"sourcesContent":["import { PrismaClient } from \"@prisma/client\";\n\nconst globalForPrisma = globalThis as unknown as { prisma: PrismaClient };\n\nconst prisma = globalForPrisma.prisma || new PrismaClient();\n\nexport default prisma;\n\nif (process.env.NODE_ENV != \"production\") globalForPrisma.prisma = prisma;\n"],"names":[],"mappings":";;;;;;AAEA,MAAM,kBAAkB;AAExB,MAAM,SAAS,gBAAgB,MAAM,IAAI,IAAI,uDAAA,CAAA,eAAY;uCAE1C;AAEf,wCAA0C,gBAAgB,MAAM,GAAG"}},
    {"offset": {"line": 15, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 20, "column": 0}, "map": {"version":3,"sources":["turbopack://[project]/src/app/api/webhooks/clerk/route.ts"],"sourcesContent":["import { Webhook } from \"svix\";\nimport { headers } from \"next/headers\";\nimport { WebhookEvent } from \"@clerk/nextjs/server\";\nimport prisma from \"../../../../lib/client\";\n\nexport async function POST(req: Request) {\n  // You can find this in the Clerk Dashboard -> Webhooks -> choose the endpoint\n  const WEBHOOK_SECRET = process.env.WEBHOOK_SECRET;\n\n  if (!WEBHOOK_SECRET) {\n    throw new Error(\n      \"Please add WEBHOOK_SECRET from Clerk Dashboard to .env or .env.local\"\n    );\n  }\n\n  // Get the headers\n  const headerPayload = headers();\n  const svix_id = headerPayload.get(\"svix-id\");\n  const svix_timestamp = headerPayload.get(\"svix-timestamp\");\n  const svix_signature = headerPayload.get(\"svix-signature\");\n\n  // If there are no headers, error out\n  if (!svix_id || !svix_timestamp || !svix_signature) {\n    return new Response(\"Error occured -- no svix headers\", {\n      status: 400,\n    });\n  }\n\n  // Get the body\n  const payload = await req.json();\n  const body = JSON.stringify(payload);\n\n  // Create a new Svix instance with your secret.\n  const wh = new Webhook(WEBHOOK_SECRET);\n\n  let evt: WebhookEvent;\n\n  // Verify the payload with the headers\n  try {\n    evt = wh.verify(body, {\n      \"svix-id\": svix_id,\n      \"svix-timestamp\": svix_timestamp,\n      \"svix-signature\": svix_signature,\n    }) as WebhookEvent;\n  } catch (err) {\n    console.error(\"Error verifying webhook:\", err);\n    return new Response(\"Error occured\", {\n      status: 400,\n    });\n  }\n\n  // Do something with the payload\n  // For this guide, you simply log the payload to the console\n  const { id } = evt.data;\n  const eventType = evt.type;\n  // console.log(`Webhook with and ID of ${id} and type of ${eventType}`);\n  // console.log(\"Webhook body:\", body);\n  if (eventType === \"user.created\") {\n    try {\n      await prisma.user.create({\n        data: {\n          id: evt.data.id,\n          username: JSON.parse(body).data.username,\n          avatar: JSON.parse(body).data.image_url || \"/noAvatar.png\",\n          cover: \"/noCover.png\",\n        },\n      });\n      return new Response(\"User has been create!\", { status: 200 });\n    } catch (err) {\n      console.log(err);\n      return new Response(\"Failed to create the user!\", { status: 500 });\n    }\n  }\n  if (eventType === \"user.updated\") {\n    try {\n      await prisma.user.update({\n        where: {\n          id: evt.data.id,\n        },\n        data: {\n          username: JSON.parse(body).data.username,\n          avatar: JSON.parse(body).data.image_url || \"/noAvatar.png\",\n        },\n      });\n      return new Response(\"User has been updated!\", { status: 200 });\n    } catch (err) {\n      console.log(err);\n      return new Response(\"Failed to update the user!\", { status: 500 });\n    }\n  }\n  return new Response(\"Webhook received\", { status: 200 });\n}\n"],"names":[],"mappings":";;;;;;;;;;AAKO,eAAe,KAAK,GAAY;IACrC,8EAA8E;IAC9E,MAAM,iBAAiB,QAAQ,GAAG,CAAC,cAAc;IAEjD,IAAI,CAAC,gBAAgB;QACnB,MAAM,IAAI,MACR;IAEJ;IAEA,kBAAkB;IAClB,MAAM,gBAAgB,CAAA,GAAA,iIAAA,CAAA,UAAO,AAAD;IAC5B,MAAM,UAAU,cAAc,GAAG,CAAC;IAClC,MAAM,iBAAiB,cAAc,GAAG,CAAC;IACzC,MAAM,iBAAiB,cAAc,GAAG,CAAC;IAEzC,qCAAqC;IACrC,IAAI,CAAC,WAAW,CAAC,kBAAkB,CAAC,gBAAgB;QAClD,OAAO,IAAI,SAAS,oCAAoC;YACtD,QAAQ;QACV;IACF;IAEA,eAAe;IACf,MAAM,UAAU,MAAM,IAAI,IAAI;IAC9B,MAAM,OAAO,KAAK,SAAS,CAAC;IAE5B,+CAA+C;IAC/C,MAAM,KAAK,IAAI,uIAAA,CAAA,UAAO,CAAC;IAEvB,IAAI;IAEJ,sCAAsC;IACtC,IAAI;QACF,MAAM,GAAG,MAAM,CAAC,MAAM;YACpB,WAAW;YACX,kBAAkB;YAClB,kBAAkB;QACpB;IACF,EAAE,OAAO,KAAK;QACZ,QAAQ,KAAK,CAAC,4BAA4B;QAC1C,OAAO,IAAI,SAAS,iBAAiB;YACnC,QAAQ;QACV;IACF;IAEA,gCAAgC;IAChC,4DAA4D;IAC5D,MAAM,EAAE,EAAE,EAAE,GAAG,IAAI,IAAI;IACvB,MAAM,YAAY,IAAI,IAAI;IAC1B,wEAAwE;IACxE,sCAAsC;IACtC,IAAI,cAAc,gBAAgB;QAChC,IAAI;YACF,MAAM,sHAAA,CAAA,UAAM,CAAC,IAAI,CAAC,MAAM,CAAC;gBACvB,MAAM;oBACJ,IAAI,IAAI,IAAI,CAAC,EAAE;oBACf,UAAU,KAAK,KAAK,CAAC,MAAM,IAAI,CAAC,QAAQ;oBACxC,QAAQ,KAAK,KAAK,CAAC,MAAM,IAAI,CAAC,SAAS,IAAI;oBAC3C,OAAO;gBACT;YACF;YACA,OAAO,IAAI,SAAS,yBAAyB;gBAAE,QAAQ;YAAI;QAC7D,EAAE,OAAO,KAAK;YACZ,QAAQ,GAAG,CAAC;YACZ,OAAO,IAAI,SAAS,8BAA8B;gBAAE,QAAQ;YAAI;QAClE;IACF;IACA,IAAI,cAAc,gBAAgB;QAChC,IAAI;YACF,MAAM,sHAAA,CAAA,UAAM,CAAC,IAAI,CAAC,MAAM,CAAC;gBACvB,OAAO;oBACL,IAAI,IAAI,IAAI,CAAC,EAAE;gBACjB;gBACA,MAAM;oBACJ,UAAU,KAAK,KAAK,CAAC,MAAM,IAAI,CAAC,QAAQ;oBACxC,QAAQ,KAAK,KAAK,CAAC,MAAM,IAAI,CAAC,SAAS,IAAI;gBAC7C;YACF;YACA,OAAO,IAAI,SAAS,0BAA0B;gBAAE,QAAQ;YAAI;QAC9D,EAAE,OAAO,KAAK;YACZ,QAAQ,GAAG,CAAC;YACZ,OAAO,IAAI,SAAS,8BAA8B;gBAAE,QAAQ;YAAI;QAClE;IACF;IACA,OAAO,IAAI,SAAS,oBAAoB;QAAE,QAAQ;IAAI;AACxD"}},
    {"offset": {"line": 117, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}