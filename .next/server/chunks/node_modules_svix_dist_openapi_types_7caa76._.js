module.exports = {

"[project]/node_modules/svix/dist/openapi/types/ObservableAPI.js [app-route] (ecmascript)": (function({ r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: require }) { !function() {

"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.ObservableTransformationTemplateApi = exports.ObservableStreamApi = exports.ObservableStatisticsApi = exports.ObservableSinkApi = exports.ObservableMessageAttemptApi = exports.ObservableMessageApi = exports.ObservableIntegrationApi = exports.ObservableInboundApi = exports.ObservableHealthApi = exports.ObservableEventsApi = exports.ObservableEventTypeApi = exports.ObservableEnvironmentSettingsApi = exports.ObservableEnvironmentApi = exports.ObservableEndpointApi = exports.ObservableBroadcastApi = exports.ObservableBackgroundTasksApi = exports.ObservableAuthenticationApi = exports.ObservableApplicationApi = void 0;
const rxjsStub_1 = __turbopack_require__("[project]/node_modules/svix/dist/openapi/rxjsStub.js [app-route] (ecmascript)");
const rxjsStub_2 = __turbopack_require__("[project]/node_modules/svix/dist/openapi/rxjsStub.js [app-route] (ecmascript)");
const ApplicationApi_1 = __turbopack_require__("[project]/node_modules/svix/dist/openapi/apis/ApplicationApi.js [app-route] (ecmascript)");
class ObservableApplicationApi {
    constructor(configuration, requestFactory, responseProcessor){
        this.configuration = configuration;
        this.requestFactory = requestFactory || new ApplicationApi_1.ApplicationApiRequestFactory(configuration);
        this.responseProcessor = responseProcessor || new ApplicationApi_1.ApplicationApiResponseProcessor();
    }
    getAppUsageStatsApiV1AppStatsUsageGet(since, until, limit, iterator, _options) {
        const requestContextPromise = this.requestFactory.getAppUsageStatsApiV1AppStatsUsageGet(since, until, limit, iterator, _options);
        let middlewarePreObservable = rxjsStub_1.from(requestContextPromise);
        for (let middleware of this.configuration.middleware){
            middlewarePreObservable = middlewarePreObservable.pipe(rxjsStub_2.mergeMap((ctx)=>middleware.pre(ctx)));
        }
        return middlewarePreObservable.pipe(rxjsStub_2.mergeMap((ctx)=>this.configuration.httpApi.send(ctx))).pipe(rxjsStub_2.mergeMap((response)=>{
            let middlewarePostObservable = rxjsStub_1.of(response);
            for (let middleware of this.configuration.middleware){
                middlewarePostObservable = middlewarePostObservable.pipe(rxjsStub_2.mergeMap((rsp)=>middleware.post(rsp)));
            }
            return middlewarePostObservable.pipe(rxjsStub_2.map((rsp)=>this.responseProcessor.getAppUsageStatsApiV1AppStatsUsageGet(rsp)));
        }));
    }
    v1ApplicationCreate(applicationIn, getIfExists, idempotencyKey, _options) {
        const requestContextPromise = this.requestFactory.v1ApplicationCreate(applicationIn, getIfExists, idempotencyKey, _options);
        let middlewarePreObservable = rxjsStub_1.from(requestContextPromise);
        for (let middleware of this.configuration.middleware){
            middlewarePreObservable = middlewarePreObservable.pipe(rxjsStub_2.mergeMap((ctx)=>middleware.pre(ctx)));
        }
        return middlewarePreObservable.pipe(rxjsStub_2.mergeMap((ctx)=>this.configuration.httpApi.send(ctx))).pipe(rxjsStub_2.mergeMap((response)=>{
            let middlewarePostObservable = rxjsStub_1.of(response);
            for (let middleware of this.configuration.middleware){
                middlewarePostObservable = middlewarePostObservable.pipe(rxjsStub_2.mergeMap((rsp)=>middleware.post(rsp)));
            }
            return middlewarePostObservable.pipe(rxjsStub_2.map((rsp)=>this.responseProcessor.v1ApplicationCreate(rsp)));
        }));
    }
    v1ApplicationDelete(appId, _options) {
        const requestContextPromise = this.requestFactory.v1ApplicationDelete(appId, _options);
        let middlewarePreObservable = rxjsStub_1.from(requestContextPromise);
        for (let middleware of this.configuration.middleware){
            middlewarePreObservable = middlewarePreObservable.pipe(rxjsStub_2.mergeMap((ctx)=>middleware.pre(ctx)));
        }
        return middlewarePreObservable.pipe(rxjsStub_2.mergeMap((ctx)=>this.configuration.httpApi.send(ctx))).pipe(rxjsStub_2.mergeMap((response)=>{
            let middlewarePostObservable = rxjsStub_1.of(response);
            for (let middleware of this.configuration.middleware){
                middlewarePostObservable = middlewarePostObservable.pipe(rxjsStub_2.mergeMap((rsp)=>middleware.post(rsp)));
            }
            return middlewarePostObservable.pipe(rxjsStub_2.map((rsp)=>this.responseProcessor.v1ApplicationDelete(rsp)));
        }));
    }
    v1ApplicationGet(appId, _options) {
        const requestContextPromise = this.requestFactory.v1ApplicationGet(appId, _options);
        let middlewarePreObservable = rxjsStub_1.from(requestContextPromise);
        for (let middleware of this.configuration.middleware){
            middlewarePreObservable = middlewarePreObservable.pipe(rxjsStub_2.mergeMap((ctx)=>middleware.pre(ctx)));
        }
        return middlewarePreObservable.pipe(rxjsStub_2.mergeMap((ctx)=>this.configuration.httpApi.send(ctx))).pipe(rxjsStub_2.mergeMap((response)=>{
            let middlewarePostObservable = rxjsStub_1.of(response);
            for (let middleware of this.configuration.middleware){
                middlewarePostObservable = middlewarePostObservable.pipe(rxjsStub_2.mergeMap((rsp)=>middleware.post(rsp)));
            }
            return middlewarePostObservable.pipe(rxjsStub_2.map((rsp)=>this.responseProcessor.v1ApplicationGet(rsp)));
        }));
    }
    v1ApplicationGetStats(since, until, appId, _options) {
        const requestContextPromise = this.requestFactory.v1ApplicationGetStats(since, until, appId, _options);
        let middlewarePreObservable = rxjsStub_1.from(requestContextPromise);
        for (let middleware of this.configuration.middleware){
            middlewarePreObservable = middlewarePreObservable.pipe(rxjsStub_2.mergeMap((ctx)=>middleware.pre(ctx)));
        }
        return middlewarePreObservable.pipe(rxjsStub_2.mergeMap((ctx)=>this.configuration.httpApi.send(ctx))).pipe(rxjsStub_2.mergeMap((response)=>{
            let middlewarePostObservable = rxjsStub_1.of(response);
            for (let middleware of this.configuration.middleware){
                middlewarePostObservable = middlewarePostObservable.pipe(rxjsStub_2.mergeMap((rsp)=>middleware.post(rsp)));
            }
            return middlewarePostObservable.pipe(rxjsStub_2.map((rsp)=>this.responseProcessor.v1ApplicationGetStats(rsp)));
        }));
    }
    v1ApplicationList(limit, iterator, order, _options) {
        const requestContextPromise = this.requestFactory.v1ApplicationList(limit, iterator, order, _options);
        let middlewarePreObservable = rxjsStub_1.from(requestContextPromise);
        for (let middleware of this.configuration.middleware){
            middlewarePreObservable = middlewarePreObservable.pipe(rxjsStub_2.mergeMap((ctx)=>middleware.pre(ctx)));
        }
        return middlewarePreObservable.pipe(rxjsStub_2.mergeMap((ctx)=>this.configuration.httpApi.send(ctx))).pipe(rxjsStub_2.mergeMap((response)=>{
            let middlewarePostObservable = rxjsStub_1.of(response);
            for (let middleware of this.configuration.middleware){
                middlewarePostObservable = middlewarePostObservable.pipe(rxjsStub_2.mergeMap((rsp)=>middleware.post(rsp)));
            }
            return middlewarePostObservable.pipe(rxjsStub_2.map((rsp)=>this.responseProcessor.v1ApplicationList(rsp)));
        }));
    }
    v1ApplicationPatch(appId, applicationPatch, _options) {
        const requestContextPromise = this.requestFactory.v1ApplicationPatch(appId, applicationPatch, _options);
        let middlewarePreObservable = rxjsStub_1.from(requestContextPromise);
        for (let middleware of this.configuration.middleware){
            middlewarePreObservable = middlewarePreObservable.pipe(rxjsStub_2.mergeMap((ctx)=>middleware.pre(ctx)));
        }
        return middlewarePreObservable.pipe(rxjsStub_2.mergeMap((ctx)=>this.configuration.httpApi.send(ctx))).pipe(rxjsStub_2.mergeMap((response)=>{
            let middlewarePostObservable = rxjsStub_1.of(response);
            for (let middleware of this.configuration.middleware){
                middlewarePostObservable = middlewarePostObservable.pipe(rxjsStub_2.mergeMap((rsp)=>middleware.post(rsp)));
            }
            return middlewarePostObservable.pipe(rxjsStub_2.map((rsp)=>this.responseProcessor.v1ApplicationPatch(rsp)));
        }));
    }
    v1ApplicationUpdate(appId, applicationIn, _options) {
        const requestContextPromise = this.requestFactory.v1ApplicationUpdate(appId, applicationIn, _options);
        let middlewarePreObservable = rxjsStub_1.from(requestContextPromise);
        for (let middleware of this.configuration.middleware){
            middlewarePreObservable = middlewarePreObservable.pipe(rxjsStub_2.mergeMap((ctx)=>middleware.pre(ctx)));
        }
        return middlewarePreObservable.pipe(rxjsStub_2.mergeMap((ctx)=>this.configuration.httpApi.send(ctx))).pipe(rxjsStub_2.mergeMap((response)=>{
            let middlewarePostObservable = rxjsStub_1.of(response);
            for (let middleware of this.configuration.middleware){
                middlewarePostObservable = middlewarePostObservable.pipe(rxjsStub_2.mergeMap((rsp)=>middleware.post(rsp)));
            }
            return middlewarePostObservable.pipe(rxjsStub_2.map((rsp)=>this.responseProcessor.v1ApplicationUpdate(rsp)));
        }));
    }
}
exports.ObservableApplicationApi = ObservableApplicationApi;
const AuthenticationApi_1 = __turbopack_require__("[project]/node_modules/svix/dist/openapi/apis/AuthenticationApi.js [app-route] (ecmascript)");
class ObservableAuthenticationApi {
    constructor(configuration, requestFactory, responseProcessor){
        this.configuration = configuration;
        this.requestFactory = requestFactory || new AuthenticationApi_1.AuthenticationApiRequestFactory(configuration);
        this.responseProcessor = responseProcessor || new AuthenticationApi_1.AuthenticationApiResponseProcessor();
    }
    v1AuthenticationAppPortalAccess(appId, appPortalAccessIn, idempotencyKey, _options) {
        const requestContextPromise = this.requestFactory.v1AuthenticationAppPortalAccess(appId, appPortalAccessIn, idempotencyKey, _options);
        let middlewarePreObservable = rxjsStub_1.from(requestContextPromise);
        for (let middleware of this.configuration.middleware){
            middlewarePreObservable = middlewarePreObservable.pipe(rxjsStub_2.mergeMap((ctx)=>middleware.pre(ctx)));
        }
        return middlewarePreObservable.pipe(rxjsStub_2.mergeMap((ctx)=>this.configuration.httpApi.send(ctx))).pipe(rxjsStub_2.mergeMap((response)=>{
            let middlewarePostObservable = rxjsStub_1.of(response);
            for (let middleware of this.configuration.middleware){
                middlewarePostObservable = middlewarePostObservable.pipe(rxjsStub_2.mergeMap((rsp)=>middleware.post(rsp)));
            }
            return middlewarePostObservable.pipe(rxjsStub_2.map((rsp)=>this.responseProcessor.v1AuthenticationAppPortalAccess(rsp)));
        }));
    }
    v1AuthenticationCreateMessageToken(appId, createMessageTokenIn, idempotencyKey, _options) {
        const requestContextPromise = this.requestFactory.v1AuthenticationCreateMessageToken(appId, createMessageTokenIn, idempotencyKey, _options);
        let middlewarePreObservable = rxjsStub_1.from(requestContextPromise);
        for (let middleware of this.configuration.middleware){
            middlewarePreObservable = middlewarePreObservable.pipe(rxjsStub_2.mergeMap((ctx)=>middleware.pre(ctx)));
        }
        return middlewarePreObservable.pipe(rxjsStub_2.mergeMap((ctx)=>this.configuration.httpApi.send(ctx))).pipe(rxjsStub_2.mergeMap((response)=>{
            let middlewarePostObservable = rxjsStub_1.of(response);
            for (let middleware of this.configuration.middleware){
                middlewarePostObservable = middlewarePostObservable.pipe(rxjsStub_2.mergeMap((rsp)=>middleware.post(rsp)));
            }
            return middlewarePostObservable.pipe(rxjsStub_2.map((rsp)=>this.responseProcessor.v1AuthenticationCreateMessageToken(rsp)));
        }));
    }
    v1AuthenticationDashboardAccess(appId, idempotencyKey, _options) {
        const requestContextPromise = this.requestFactory.v1AuthenticationDashboardAccess(appId, idempotencyKey, _options);
        let middlewarePreObservable = rxjsStub_1.from(requestContextPromise);
        for (let middleware of this.configuration.middleware){
            middlewarePreObservable = middlewarePreObservable.pipe(rxjsStub_2.mergeMap((ctx)=>middleware.pre(ctx)));
        }
        return middlewarePreObservable.pipe(rxjsStub_2.mergeMap((ctx)=>this.configuration.httpApi.send(ctx))).pipe(rxjsStub_2.mergeMap((response)=>{
            let middlewarePostObservable = rxjsStub_1.of(response);
            for (let middleware of this.configuration.middleware){
                middlewarePostObservable = middlewarePostObservable.pipe(rxjsStub_2.mergeMap((rsp)=>middleware.post(rsp)));
            }
            return middlewarePostObservable.pipe(rxjsStub_2.map((rsp)=>this.responseProcessor.v1AuthenticationDashboardAccess(rsp)));
        }));
    }
    v1AuthenticationExchangeOneTimeToken(oneTimeTokenIn, idempotencyKey, _options) {
        const requestContextPromise = this.requestFactory.v1AuthenticationExchangeOneTimeToken(oneTimeTokenIn, idempotencyKey, _options);
        let middlewarePreObservable = rxjsStub_1.from(requestContextPromise);
        for (let middleware of this.configuration.middleware){
            middlewarePreObservable = middlewarePreObservable.pipe(rxjsStub_2.mergeMap((ctx)=>middleware.pre(ctx)));
        }
        return middlewarePreObservable.pipe(rxjsStub_2.mergeMap((ctx)=>this.configuration.httpApi.send(ctx))).pipe(rxjsStub_2.mergeMap((response)=>{
            let middlewarePostObservable = rxjsStub_1.of(response);
            for (let middleware of this.configuration.middleware){
                middlewarePostObservable = middlewarePostObservable.pipe(rxjsStub_2.mergeMap((rsp)=>middleware.post(rsp)));
            }
            return middlewarePostObservable.pipe(rxjsStub_2.map((rsp)=>this.responseProcessor.v1AuthenticationExchangeOneTimeToken(rsp)));
        }));
    }
    v1AuthenticationExpireAll(appId, applicationTokenExpireIn, idempotencyKey, _options) {
        const requestContextPromise = this.requestFactory.v1AuthenticationExpireAll(appId, applicationTokenExpireIn, idempotencyKey, _options);
        let middlewarePreObservable = rxjsStub_1.from(requestContextPromise);
        for (let middleware of this.configuration.middleware){
            middlewarePreObservable = middlewarePreObservable.pipe(rxjsStub_2.mergeMap((ctx)=>middleware.pre(ctx)));
        }
        return middlewarePreObservable.pipe(rxjsStub_2.mergeMap((ctx)=>this.configuration.httpApi.send(ctx))).pipe(rxjsStub_2.mergeMap((response)=>{
            let middlewarePostObservable = rxjsStub_1.of(response);
            for (let middleware of this.configuration.middleware){
                middlewarePostObservable = middlewarePostObservable.pipe(rxjsStub_2.mergeMap((rsp)=>middleware.post(rsp)));
            }
            return middlewarePostObservable.pipe(rxjsStub_2.map((rsp)=>this.responseProcessor.v1AuthenticationExpireAll(rsp)));
        }));
    }
    v1AuthenticationLogout(idempotencyKey, _options) {
        const requestContextPromise = this.requestFactory.v1AuthenticationLogout(idempotencyKey, _options);
        let middlewarePreObservable = rxjsStub_1.from(requestContextPromise);
        for (let middleware of this.configuration.middleware){
            middlewarePreObservable = middlewarePreObservable.pipe(rxjsStub_2.mergeMap((ctx)=>middleware.pre(ctx)));
        }
        return middlewarePreObservable.pipe(rxjsStub_2.mergeMap((ctx)=>this.configuration.httpApi.send(ctx))).pipe(rxjsStub_2.mergeMap((response)=>{
            let middlewarePostObservable = rxjsStub_1.of(response);
            for (let middleware of this.configuration.middleware){
                middlewarePostObservable = middlewarePostObservable.pipe(rxjsStub_2.mergeMap((rsp)=>middleware.post(rsp)));
            }
            return middlewarePostObservable.pipe(rxjsStub_2.map((rsp)=>this.responseProcessor.v1AuthenticationLogout(rsp)));
        }));
    }
}
exports.ObservableAuthenticationApi = ObservableAuthenticationApi;
const BackgroundTasksApi_1 = __turbopack_require__("[project]/node_modules/svix/dist/openapi/apis/BackgroundTasksApi.js [app-route] (ecmascript)");
class ObservableBackgroundTasksApi {
    constructor(configuration, requestFactory, responseProcessor){
        this.configuration = configuration;
        this.requestFactory = requestFactory || new BackgroundTasksApi_1.BackgroundTasksApiRequestFactory(configuration);
        this.responseProcessor = responseProcessor || new BackgroundTasksApi_1.BackgroundTasksApiResponseProcessor();
    }
    getBackgroundTask(taskId, _options) {
        const requestContextPromise = this.requestFactory.getBackgroundTask(taskId, _options);
        let middlewarePreObservable = rxjsStub_1.from(requestContextPromise);
        for (let middleware of this.configuration.middleware){
            middlewarePreObservable = middlewarePreObservable.pipe(rxjsStub_2.mergeMap((ctx)=>middleware.pre(ctx)));
        }
        return middlewarePreObservable.pipe(rxjsStub_2.mergeMap((ctx)=>this.configuration.httpApi.send(ctx))).pipe(rxjsStub_2.mergeMap((response)=>{
            let middlewarePostObservable = rxjsStub_1.of(response);
            for (let middleware of this.configuration.middleware){
                middlewarePostObservable = middlewarePostObservable.pipe(rxjsStub_2.mergeMap((rsp)=>middleware.post(rsp)));
            }
            return middlewarePostObservable.pipe(rxjsStub_2.map((rsp)=>this.responseProcessor.getBackgroundTask(rsp)));
        }));
    }
    listBackgroundTasks(status, task, limit, iterator, order, _options) {
        const requestContextPromise = this.requestFactory.listBackgroundTasks(status, task, limit, iterator, order, _options);
        let middlewarePreObservable = rxjsStub_1.from(requestContextPromise);
        for (let middleware of this.configuration.middleware){
            middlewarePreObservable = middlewarePreObservable.pipe(rxjsStub_2.mergeMap((ctx)=>middleware.pre(ctx)));
        }
        return middlewarePreObservable.pipe(rxjsStub_2.mergeMap((ctx)=>this.configuration.httpApi.send(ctx))).pipe(rxjsStub_2.mergeMap((response)=>{
            let middlewarePostObservable = rxjsStub_1.of(response);
            for (let middleware of this.configuration.middleware){
                middlewarePostObservable = middlewarePostObservable.pipe(rxjsStub_2.mergeMap((rsp)=>middleware.post(rsp)));
            }
            return middlewarePostObservable.pipe(rxjsStub_2.map((rsp)=>this.responseProcessor.listBackgroundTasks(rsp)));
        }));
    }
}
exports.ObservableBackgroundTasksApi = ObservableBackgroundTasksApi;
const BroadcastApi_1 = __turbopack_require__("[project]/node_modules/svix/dist/openapi/apis/BroadcastApi.js [app-route] (ecmascript)");
class ObservableBroadcastApi {
    constructor(configuration, requestFactory, responseProcessor){
        this.configuration = configuration;
        this.requestFactory = requestFactory || new BroadcastApi_1.BroadcastApiRequestFactory(configuration);
        this.responseProcessor = responseProcessor || new BroadcastApi_1.BroadcastApiResponseProcessor();
    }
    createBroadcastMessage(messageBroadcastIn, idempotencyKey, _options) {
        const requestContextPromise = this.requestFactory.createBroadcastMessage(messageBroadcastIn, idempotencyKey, _options);
        let middlewarePreObservable = rxjsStub_1.from(requestContextPromise);
        for (let middleware of this.configuration.middleware){
            middlewarePreObservable = middlewarePreObservable.pipe(rxjsStub_2.mergeMap((ctx)=>middleware.pre(ctx)));
        }
        return middlewarePreObservable.pipe(rxjsStub_2.mergeMap((ctx)=>this.configuration.httpApi.send(ctx))).pipe(rxjsStub_2.mergeMap((response)=>{
            let middlewarePostObservable = rxjsStub_1.of(response);
            for (let middleware of this.configuration.middleware){
                middlewarePostObservable = middlewarePostObservable.pipe(rxjsStub_2.mergeMap((rsp)=>middleware.post(rsp)));
            }
            return middlewarePostObservable.pipe(rxjsStub_2.map((rsp)=>this.responseProcessor.createBroadcastMessage(rsp)));
        }));
    }
}
exports.ObservableBroadcastApi = ObservableBroadcastApi;
const EndpointApi_1 = __turbopack_require__("[project]/node_modules/svix/dist/openapi/apis/EndpointApi.js [app-route] (ecmascript)");
class ObservableEndpointApi {
    constructor(configuration, requestFactory, responseProcessor){
        this.configuration = configuration;
        this.requestFactory = requestFactory || new EndpointApi_1.EndpointApiRequestFactory(configuration);
        this.responseProcessor = responseProcessor || new EndpointApi_1.EndpointApiResponseProcessor();
    }
    v1EndpointCreate(appId, endpointIn, idempotencyKey, _options) {
        const requestContextPromise = this.requestFactory.v1EndpointCreate(appId, endpointIn, idempotencyKey, _options);
        let middlewarePreObservable = rxjsStub_1.from(requestContextPromise);
        for (let middleware of this.configuration.middleware){
            middlewarePreObservable = middlewarePreObservable.pipe(rxjsStub_2.mergeMap((ctx)=>middleware.pre(ctx)));
        }
        return middlewarePreObservable.pipe(rxjsStub_2.mergeMap((ctx)=>this.configuration.httpApi.send(ctx))).pipe(rxjsStub_2.mergeMap((response)=>{
            let middlewarePostObservable = rxjsStub_1.of(response);
            for (let middleware of this.configuration.middleware){
                middlewarePostObservable = middlewarePostObservable.pipe(rxjsStub_2.mergeMap((rsp)=>middleware.post(rsp)));
            }
            return middlewarePostObservable.pipe(rxjsStub_2.map((rsp)=>this.responseProcessor.v1EndpointCreate(rsp)));
        }));
    }
    v1EndpointDelete(appId, endpointId, _options) {
        const requestContextPromise = this.requestFactory.v1EndpointDelete(appId, endpointId, _options);
        let middlewarePreObservable = rxjsStub_1.from(requestContextPromise);
        for (let middleware of this.configuration.middleware){
            middlewarePreObservable = middlewarePreObservable.pipe(rxjsStub_2.mergeMap((ctx)=>middleware.pre(ctx)));
        }
        return middlewarePreObservable.pipe(rxjsStub_2.mergeMap((ctx)=>this.configuration.httpApi.send(ctx))).pipe(rxjsStub_2.mergeMap((response)=>{
            let middlewarePostObservable = rxjsStub_1.of(response);
            for (let middleware of this.configuration.middleware){
                middlewarePostObservable = middlewarePostObservable.pipe(rxjsStub_2.mergeMap((rsp)=>middleware.post(rsp)));
            }
            return middlewarePostObservable.pipe(rxjsStub_2.map((rsp)=>this.responseProcessor.v1EndpointDelete(rsp)));
        }));
    }
    v1EndpointDeleteMtlsConfig(appId, endpointId, _options) {
        const requestContextPromise = this.requestFactory.v1EndpointDeleteMtlsConfig(appId, endpointId, _options);
        let middlewarePreObservable = rxjsStub_1.from(requestContextPromise);
        for (let middleware of this.configuration.middleware){
            middlewarePreObservable = middlewarePreObservable.pipe(rxjsStub_2.mergeMap((ctx)=>middleware.pre(ctx)));
        }
        return middlewarePreObservable.pipe(rxjsStub_2.mergeMap((ctx)=>this.configuration.httpApi.send(ctx))).pipe(rxjsStub_2.mergeMap((response)=>{
            let middlewarePostObservable = rxjsStub_1.of(response);
            for (let middleware of this.configuration.middleware){
                middlewarePostObservable = middlewarePostObservable.pipe(rxjsStub_2.mergeMap((rsp)=>middleware.post(rsp)));
            }
            return middlewarePostObservable.pipe(rxjsStub_2.map((rsp)=>this.responseProcessor.v1EndpointDeleteMtlsConfig(rsp)));
        }));
    }
    v1EndpointDeleteOauthConfig(appId, endpointId, _options) {
        const requestContextPromise = this.requestFactory.v1EndpointDeleteOauthConfig(appId, endpointId, _options);
        let middlewarePreObservable = rxjsStub_1.from(requestContextPromise);
        for (let middleware of this.configuration.middleware){
            middlewarePreObservable = middlewarePreObservable.pipe(rxjsStub_2.mergeMap((ctx)=>middleware.pre(ctx)));
        }
        return middlewarePreObservable.pipe(rxjsStub_2.mergeMap((ctx)=>this.configuration.httpApi.send(ctx))).pipe(rxjsStub_2.mergeMap((response)=>{
            let middlewarePostObservable = rxjsStub_1.of(response);
            for (let middleware of this.configuration.middleware){
                middlewarePostObservable = middlewarePostObservable.pipe(rxjsStub_2.mergeMap((rsp)=>middleware.post(rsp)));
            }
            return middlewarePostObservable.pipe(rxjsStub_2.map((rsp)=>this.responseProcessor.v1EndpointDeleteOauthConfig(rsp)));
        }));
    }
    v1EndpointGet(appId, endpointId, _options) {
        const requestContextPromise = this.requestFactory.v1EndpointGet(appId, endpointId, _options);
        let middlewarePreObservable = rxjsStub_1.from(requestContextPromise);
        for (let middleware of this.configuration.middleware){
            middlewarePreObservable = middlewarePreObservable.pipe(rxjsStub_2.mergeMap((ctx)=>middleware.pre(ctx)));
        }
        return middlewarePreObservable.pipe(rxjsStub_2.mergeMap((ctx)=>this.configuration.httpApi.send(ctx))).pipe(rxjsStub_2.mergeMap((response)=>{
            let middlewarePostObservable = rxjsStub_1.of(response);
            for (let middleware of this.configuration.middleware){
                middlewarePostObservable = middlewarePostObservable.pipe(rxjsStub_2.mergeMap((rsp)=>middleware.post(rsp)));
            }
            return middlewarePostObservable.pipe(rxjsStub_2.map((rsp)=>this.responseProcessor.v1EndpointGet(rsp)));
        }));
    }
    v1EndpointGetHeaders(appId, endpointId, _options) {
        const requestContextPromise = this.requestFactory.v1EndpointGetHeaders(appId, endpointId, _options);
        let middlewarePreObservable = rxjsStub_1.from(requestContextPromise);
        for (let middleware of this.configuration.middleware){
            middlewarePreObservable = middlewarePreObservable.pipe(rxjsStub_2.mergeMap((ctx)=>middleware.pre(ctx)));
        }
        return middlewarePreObservable.pipe(rxjsStub_2.mergeMap((ctx)=>this.configuration.httpApi.send(ctx))).pipe(rxjsStub_2.mergeMap((response)=>{
            let middlewarePostObservable = rxjsStub_1.of(response);
            for (let middleware of this.configuration.middleware){
                middlewarePostObservable = middlewarePostObservable.pipe(rxjsStub_2.mergeMap((rsp)=>middleware.post(rsp)));
            }
            return middlewarePostObservable.pipe(rxjsStub_2.map((rsp)=>this.responseProcessor.v1EndpointGetHeaders(rsp)));
        }));
    }
    v1EndpointGetSecret(appId, endpointId, _options) {
        const requestContextPromise = this.requestFactory.v1EndpointGetSecret(appId, endpointId, _options);
        let middlewarePreObservable = rxjsStub_1.from(requestContextPromise);
        for (let middleware of this.configuration.middleware){
            middlewarePreObservable = middlewarePreObservable.pipe(rxjsStub_2.mergeMap((ctx)=>middleware.pre(ctx)));
        }
        return middlewarePreObservable.pipe(rxjsStub_2.mergeMap((ctx)=>this.configuration.httpApi.send(ctx))).pipe(rxjsStub_2.mergeMap((response)=>{
            let middlewarePostObservable = rxjsStub_1.of(response);
            for (let middleware of this.configuration.middleware){
                middlewarePostObservable = middlewarePostObservable.pipe(rxjsStub_2.mergeMap((rsp)=>middleware.post(rsp)));
            }
            return middlewarePostObservable.pipe(rxjsStub_2.map((rsp)=>this.responseProcessor.v1EndpointGetSecret(rsp)));
        }));
    }
    v1EndpointGetStats(appId, endpointId, since, until, _options) {
        const requestContextPromise = this.requestFactory.v1EndpointGetStats(appId, endpointId, since, until, _options);
        let middlewarePreObservable = rxjsStub_1.from(requestContextPromise);
        for (let middleware of this.configuration.middleware){
            middlewarePreObservable = middlewarePreObservable.pipe(rxjsStub_2.mergeMap((ctx)=>middleware.pre(ctx)));
        }
        return middlewarePreObservable.pipe(rxjsStub_2.mergeMap((ctx)=>this.configuration.httpApi.send(ctx))).pipe(rxjsStub_2.mergeMap((response)=>{
            let middlewarePostObservable = rxjsStub_1.of(response);
            for (let middleware of this.configuration.middleware){
                middlewarePostObservable = middlewarePostObservable.pipe(rxjsStub_2.mergeMap((rsp)=>middleware.post(rsp)));
            }
            return middlewarePostObservable.pipe(rxjsStub_2.map((rsp)=>this.responseProcessor.v1EndpointGetStats(rsp)));
        }));
    }
    v1EndpointList(appId, limit, iterator, order, _options) {
        const requestContextPromise = this.requestFactory.v1EndpointList(appId, limit, iterator, order, _options);
        let middlewarePreObservable = rxjsStub_1.from(requestContextPromise);
        for (let middleware of this.configuration.middleware){
            middlewarePreObservable = middlewarePreObservable.pipe(rxjsStub_2.mergeMap((ctx)=>middleware.pre(ctx)));
        }
        return middlewarePreObservable.pipe(rxjsStub_2.mergeMap((ctx)=>this.configuration.httpApi.send(ctx))).pipe(rxjsStub_2.mergeMap((response)=>{
            let middlewarePostObservable = rxjsStub_1.of(response);
            for (let middleware of this.configuration.middleware){
                middlewarePostObservable = middlewarePostObservable.pipe(rxjsStub_2.mergeMap((rsp)=>middleware.post(rsp)));
            }
            return middlewarePostObservable.pipe(rxjsStub_2.map((rsp)=>this.responseProcessor.v1EndpointList(rsp)));
        }));
    }
    v1EndpointPatch(appId, endpointId, endpointPatch, _options) {
        const requestContextPromise = this.requestFactory.v1EndpointPatch(appId, endpointId, endpointPatch, _options);
        let middlewarePreObservable = rxjsStub_1.from(requestContextPromise);
        for (let middleware of this.configuration.middleware){
            middlewarePreObservable = middlewarePreObservable.pipe(rxjsStub_2.mergeMap((ctx)=>middleware.pre(ctx)));
        }
        return middlewarePreObservable.pipe(rxjsStub_2.mergeMap((ctx)=>this.configuration.httpApi.send(ctx))).pipe(rxjsStub_2.mergeMap((response)=>{
            let middlewarePostObservable = rxjsStub_1.of(response);
            for (let middleware of this.configuration.middleware){
                middlewarePostObservable = middlewarePostObservable.pipe(rxjsStub_2.mergeMap((rsp)=>middleware.post(rsp)));
            }
            return middlewarePostObservable.pipe(rxjsStub_2.map((rsp)=>this.responseProcessor.v1EndpointPatch(rsp)));
        }));
    }
    v1EndpointPatchHeaders(appId, endpointId, endpointHeadersPatchIn, _options) {
        const requestContextPromise = this.requestFactory.v1EndpointPatchHeaders(appId, endpointId, endpointHeadersPatchIn, _options);
        let middlewarePreObservable = rxjsStub_1.from(requestContextPromise);
        for (let middleware of this.configuration.middleware){
            middlewarePreObservable = middlewarePreObservable.pipe(rxjsStub_2.mergeMap((ctx)=>middleware.pre(ctx)));
        }
        return middlewarePreObservable.pipe(rxjsStub_2.mergeMap((ctx)=>this.configuration.httpApi.send(ctx))).pipe(rxjsStub_2.mergeMap((response)=>{
            let middlewarePostObservable = rxjsStub_1.of(response);
            for (let middleware of this.configuration.middleware){
                middlewarePostObservable = middlewarePostObservable.pipe(rxjsStub_2.mergeMap((rsp)=>middleware.post(rsp)));
            }
            return middlewarePostObservable.pipe(rxjsStub_2.map((rsp)=>this.responseProcessor.v1EndpointPatchHeaders(rsp)));
        }));
    }
    v1EndpointRecover(appId, endpointId, recoverIn, idempotencyKey, _options) {
        const requestContextPromise = this.requestFactory.v1EndpointRecover(appId, endpointId, recoverIn, idempotencyKey, _options);
        let middlewarePreObservable = rxjsStub_1.from(requestContextPromise);
        for (let middleware of this.configuration.middleware){
            middlewarePreObservable = middlewarePreObservable.pipe(rxjsStub_2.mergeMap((ctx)=>middleware.pre(ctx)));
        }
        return middlewarePreObservable.pipe(rxjsStub_2.mergeMap((ctx)=>this.configuration.httpApi.send(ctx))).pipe(rxjsStub_2.mergeMap((response)=>{
            let middlewarePostObservable = rxjsStub_1.of(response);
            for (let middleware of this.configuration.middleware){
                middlewarePostObservable = middlewarePostObservable.pipe(rxjsStub_2.mergeMap((rsp)=>middleware.post(rsp)));
            }
            return middlewarePostObservable.pipe(rxjsStub_2.map((rsp)=>this.responseProcessor.v1EndpointRecover(rsp)));
        }));
    }
    v1EndpointReplay(appId, endpointId, replayIn, idempotencyKey, _options) {
        const requestContextPromise = this.requestFactory.v1EndpointReplay(appId, endpointId, replayIn, idempotencyKey, _options);
        let middlewarePreObservable = rxjsStub_1.from(requestContextPromise);
        for (let middleware of this.configuration.middleware){
            middlewarePreObservable = middlewarePreObservable.pipe(rxjsStub_2.mergeMap((ctx)=>middleware.pre(ctx)));
        }
        return middlewarePreObservable.pipe(rxjsStub_2.mergeMap((ctx)=>this.configuration.httpApi.send(ctx))).pipe(rxjsStub_2.mergeMap((response)=>{
            let middlewarePostObservable = rxjsStub_1.of(response);
            for (let middleware of this.configuration.middleware){
                middlewarePostObservable = middlewarePostObservable.pipe(rxjsStub_2.mergeMap((rsp)=>middleware.post(rsp)));
            }
            return middlewarePostObservable.pipe(rxjsStub_2.map((rsp)=>this.responseProcessor.v1EndpointReplay(rsp)));
        }));
    }
    v1EndpointRotateSecret(appId, endpointId, endpointSecretRotateIn, idempotencyKey, _options) {
        const requestContextPromise = this.requestFactory.v1EndpointRotateSecret(appId, endpointId, endpointSecretRotateIn, idempotencyKey, _options);
        let middlewarePreObservable = rxjsStub_1.from(requestContextPromise);
        for (let middleware of this.configuration.middleware){
            middlewarePreObservable = middlewarePreObservable.pipe(rxjsStub_2.mergeMap((ctx)=>middleware.pre(ctx)));
        }
        return middlewarePreObservable.pipe(rxjsStub_2.mergeMap((ctx)=>this.configuration.httpApi.send(ctx))).pipe(rxjsStub_2.mergeMap((response)=>{
            let middlewarePostObservable = rxjsStub_1.of(response);
            for (let middleware of this.configuration.middleware){
                middlewarePostObservable = middlewarePostObservable.pipe(rxjsStub_2.mergeMap((rsp)=>middleware.post(rsp)));
            }
            return middlewarePostObservable.pipe(rxjsStub_2.map((rsp)=>this.responseProcessor.v1EndpointRotateSecret(rsp)));
        }));
    }
    v1EndpointSendExample(appId, endpointId, eventExampleIn, idempotencyKey, _options) {
        const requestContextPromise = this.requestFactory.v1EndpointSendExample(appId, endpointId, eventExampleIn, idempotencyKey, _options);
        let middlewarePreObservable = rxjsStub_1.from(requestContextPromise);
        for (let middleware of this.configuration.middleware){
            middlewarePreObservable = middlewarePreObservable.pipe(rxjsStub_2.mergeMap((ctx)=>middleware.pre(ctx)));
        }
        return middlewarePreObservable.pipe(rxjsStub_2.mergeMap((ctx)=>this.configuration.httpApi.send(ctx))).pipe(rxjsStub_2.mergeMap((response)=>{
            let middlewarePostObservable = rxjsStub_1.of(response);
            for (let middleware of this.configuration.middleware){
                middlewarePostObservable = middlewarePostObservable.pipe(rxjsStub_2.mergeMap((rsp)=>middleware.post(rsp)));
            }
            return middlewarePostObservable.pipe(rxjsStub_2.map((rsp)=>this.responseProcessor.v1EndpointSendExample(rsp)));
        }));
    }
    v1EndpointTransformationGet(appId, endpointId, _options) {
        const requestContextPromise = this.requestFactory.v1EndpointTransformationGet(appId, endpointId, _options);
        let middlewarePreObservable = rxjsStub_1.from(requestContextPromise);
        for (let middleware of this.configuration.middleware){
            middlewarePreObservable = middlewarePreObservable.pipe(rxjsStub_2.mergeMap((ctx)=>middleware.pre(ctx)));
        }
        return middlewarePreObservable.pipe(rxjsStub_2.mergeMap((ctx)=>this.configuration.httpApi.send(ctx))).pipe(rxjsStub_2.mergeMap((response)=>{
            let middlewarePostObservable = rxjsStub_1.of(response);
            for (let middleware of this.configuration.middleware){
                middlewarePostObservable = middlewarePostObservable.pipe(rxjsStub_2.mergeMap((rsp)=>middleware.post(rsp)));
            }
            return middlewarePostObservable.pipe(rxjsStub_2.map((rsp)=>this.responseProcessor.v1EndpointTransformationGet(rsp)));
        }));
    }
    v1EndpointTransformationPartialUpdate(appId, endpointId, endpointTransformationIn, _options) {
        const requestContextPromise = this.requestFactory.v1EndpointTransformationPartialUpdate(appId, endpointId, endpointTransformationIn, _options);
        let middlewarePreObservable = rxjsStub_1.from(requestContextPromise);
        for (let middleware of this.configuration.middleware){
            middlewarePreObservable = middlewarePreObservable.pipe(rxjsStub_2.mergeMap((ctx)=>middleware.pre(ctx)));
        }
        return middlewarePreObservable.pipe(rxjsStub_2.mergeMap((ctx)=>this.configuration.httpApi.send(ctx))).pipe(rxjsStub_2.mergeMap((response)=>{
            let middlewarePostObservable = rxjsStub_1.of(response);
            for (let middleware of this.configuration.middleware){
                middlewarePostObservable = middlewarePostObservable.pipe(rxjsStub_2.mergeMap((rsp)=>middleware.post(rsp)));
            }
            return middlewarePostObservable.pipe(rxjsStub_2.map((rsp)=>this.responseProcessor.v1EndpointTransformationPartialUpdate(rsp)));
        }));
    }
    v1EndpointTransformationSimulate(appId, endpointId, endpointTransformationSimulateIn, idempotencyKey, _options) {
        const requestContextPromise = this.requestFactory.v1EndpointTransformationSimulate(appId, endpointId, endpointTransformationSimulateIn, idempotencyKey, _options);
        let middlewarePreObservable = rxjsStub_1.from(requestContextPromise);
        for (let middleware of this.configuration.middleware){
            middlewarePreObservable = middlewarePreObservable.pipe(rxjsStub_2.mergeMap((ctx)=>middleware.pre(ctx)));
        }
        return middlewarePreObservable.pipe(rxjsStub_2.mergeMap((ctx)=>this.configuration.httpApi.send(ctx))).pipe(rxjsStub_2.mergeMap((response)=>{
            let middlewarePostObservable = rxjsStub_1.of(response);
            for (let middleware of this.configuration.middleware){
                middlewarePostObservable = middlewarePostObservable.pipe(rxjsStub_2.mergeMap((rsp)=>middleware.post(rsp)));
            }
            return middlewarePostObservable.pipe(rxjsStub_2.map((rsp)=>this.responseProcessor.v1EndpointTransformationSimulate(rsp)));
        }));
    }
    v1EndpointUpdate(appId, endpointId, endpointUpdate, _options) {
        const requestContextPromise = this.requestFactory.v1EndpointUpdate(appId, endpointId, endpointUpdate, _options);
        let middlewarePreObservable = rxjsStub_1.from(requestContextPromise);
        for (let middleware of this.configuration.middleware){
            middlewarePreObservable = middlewarePreObservable.pipe(rxjsStub_2.mergeMap((ctx)=>middleware.pre(ctx)));
        }
        return middlewarePreObservable.pipe(rxjsStub_2.mergeMap((ctx)=>this.configuration.httpApi.send(ctx))).pipe(rxjsStub_2.mergeMap((response)=>{
            let middlewarePostObservable = rxjsStub_1.of(response);
            for (let middleware of this.configuration.middleware){
                middlewarePostObservable = middlewarePostObservable.pipe(rxjsStub_2.mergeMap((rsp)=>middleware.post(rsp)));
            }
            return middlewarePostObservable.pipe(rxjsStub_2.map((rsp)=>this.responseProcessor.v1EndpointUpdate(rsp)));
        }));
    }
    v1EndpointUpdateHeaders(appId, endpointId, endpointHeadersIn, _options) {
        const requestContextPromise = this.requestFactory.v1EndpointUpdateHeaders(appId, endpointId, endpointHeadersIn, _options);
        let middlewarePreObservable = rxjsStub_1.from(requestContextPromise);
        for (let middleware of this.configuration.middleware){
            middlewarePreObservable = middlewarePreObservable.pipe(rxjsStub_2.mergeMap((ctx)=>middleware.pre(ctx)));
        }
        return middlewarePreObservable.pipe(rxjsStub_2.mergeMap((ctx)=>this.configuration.httpApi.send(ctx))).pipe(rxjsStub_2.mergeMap((response)=>{
            let middlewarePostObservable = rxjsStub_1.of(response);
            for (let middleware of this.configuration.middleware){
                middlewarePostObservable = middlewarePostObservable.pipe(rxjsStub_2.mergeMap((rsp)=>middleware.post(rsp)));
            }
            return middlewarePostObservable.pipe(rxjsStub_2.map((rsp)=>this.responseProcessor.v1EndpointUpdateHeaders(rsp)));
        }));
    }
    v1EndpointUpdateMtlsConfig(appId, endpointId, endpointMtlsConfigIn, _options) {
        const requestContextPromise = this.requestFactory.v1EndpointUpdateMtlsConfig(appId, endpointId, endpointMtlsConfigIn, _options);
        let middlewarePreObservable = rxjsStub_1.from(requestContextPromise);
        for (let middleware of this.configuration.middleware){
            middlewarePreObservable = middlewarePreObservable.pipe(rxjsStub_2.mergeMap((ctx)=>middleware.pre(ctx)));
        }
        return middlewarePreObservable.pipe(rxjsStub_2.mergeMap((ctx)=>this.configuration.httpApi.send(ctx))).pipe(rxjsStub_2.mergeMap((response)=>{
            let middlewarePostObservable = rxjsStub_1.of(response);
            for (let middleware of this.configuration.middleware){
                middlewarePostObservable = middlewarePostObservable.pipe(rxjsStub_2.mergeMap((rsp)=>middleware.post(rsp)));
            }
            return middlewarePostObservable.pipe(rxjsStub_2.map((rsp)=>this.responseProcessor.v1EndpointUpdateMtlsConfig(rsp)));
        }));
    }
    v1EndpointUpdateOauthConfig(appId, endpointId, endpointOauthConfigIn, _options) {
        const requestContextPromise = this.requestFactory.v1EndpointUpdateOauthConfig(appId, endpointId, endpointOauthConfigIn, _options);
        let middlewarePreObservable = rxjsStub_1.from(requestContextPromise);
        for (let middleware of this.configuration.middleware){
            middlewarePreObservable = middlewarePreObservable.pipe(rxjsStub_2.mergeMap((ctx)=>middleware.pre(ctx)));
        }
        return middlewarePreObservable.pipe(rxjsStub_2.mergeMap((ctx)=>this.configuration.httpApi.send(ctx))).pipe(rxjsStub_2.mergeMap((response)=>{
            let middlewarePostObservable = rxjsStub_1.of(response);
            for (let middleware of this.configuration.middleware){
                middlewarePostObservable = middlewarePostObservable.pipe(rxjsStub_2.mergeMap((rsp)=>middleware.post(rsp)));
            }
            return middlewarePostObservable.pipe(rxjsStub_2.map((rsp)=>this.responseProcessor.v1EndpointUpdateOauthConfig(rsp)));
        }));
    }
    v1SinkCreate(appId, sinkIn, idempotencyKey, _options) {
        const requestContextPromise = this.requestFactory.v1SinkCreate(appId, sinkIn, idempotencyKey, _options);
        let middlewarePreObservable = rxjsStub_1.from(requestContextPromise);
        for (let middleware of this.configuration.middleware){
            middlewarePreObservable = middlewarePreObservable.pipe(rxjsStub_2.mergeMap((ctx)=>middleware.pre(ctx)));
        }
        return middlewarePreObservable.pipe(rxjsStub_2.mergeMap((ctx)=>this.configuration.httpApi.send(ctx))).pipe(rxjsStub_2.mergeMap((response)=>{
            let middlewarePostObservable = rxjsStub_1.of(response);
            for (let middleware of this.configuration.middleware){
                middlewarePostObservable = middlewarePostObservable.pipe(rxjsStub_2.mergeMap((rsp)=>middleware.post(rsp)));
            }
            return middlewarePostObservable.pipe(rxjsStub_2.map((rsp)=>this.responseProcessor.v1SinkCreate(rsp)));
        }));
    }
    v1SinkGet(appId, sinkId, _options) {
        const requestContextPromise = this.requestFactory.v1SinkGet(appId, sinkId, _options);
        let middlewarePreObservable = rxjsStub_1.from(requestContextPromise);
        for (let middleware of this.configuration.middleware){
            middlewarePreObservable = middlewarePreObservable.pipe(rxjsStub_2.mergeMap((ctx)=>middleware.pre(ctx)));
        }
        return middlewarePreObservable.pipe(rxjsStub_2.mergeMap((ctx)=>this.configuration.httpApi.send(ctx))).pipe(rxjsStub_2.mergeMap((response)=>{
            let middlewarePostObservable = rxjsStub_1.of(response);
            for (let middleware of this.configuration.middleware){
                middlewarePostObservable = middlewarePostObservable.pipe(rxjsStub_2.mergeMap((rsp)=>middleware.post(rsp)));
            }
            return middlewarePostObservable.pipe(rxjsStub_2.map((rsp)=>this.responseProcessor.v1SinkGet(rsp)));
        }));
    }
    v1SinkList(appId, limit, iterator, order, _options) {
        const requestContextPromise = this.requestFactory.v1SinkList(appId, limit, iterator, order, _options);
        let middlewarePreObservable = rxjsStub_1.from(requestContextPromise);
        for (let middleware of this.configuration.middleware){
            middlewarePreObservable = middlewarePreObservable.pipe(rxjsStub_2.mergeMap((ctx)=>middleware.pre(ctx)));
        }
        return middlewarePreObservable.pipe(rxjsStub_2.mergeMap((ctx)=>this.configuration.httpApi.send(ctx))).pipe(rxjsStub_2.mergeMap((response)=>{
            let middlewarePostObservable = rxjsStub_1.of(response);
            for (let middleware of this.configuration.middleware){
                middlewarePostObservable = middlewarePostObservable.pipe(rxjsStub_2.mergeMap((rsp)=>middleware.post(rsp)));
            }
            return middlewarePostObservable.pipe(rxjsStub_2.map((rsp)=>this.responseProcessor.v1SinkList(rsp)));
        }));
    }
}
exports.ObservableEndpointApi = ObservableEndpointApi;
const EnvironmentApi_1 = __turbopack_require__("[project]/node_modules/svix/dist/openapi/apis/EnvironmentApi.js [app-route] (ecmascript)");
class ObservableEnvironmentApi {
    constructor(configuration, requestFactory, responseProcessor){
        this.configuration = configuration;
        this.requestFactory = requestFactory || new EnvironmentApi_1.EnvironmentApiRequestFactory(configuration);
        this.responseProcessor = responseProcessor || new EnvironmentApi_1.EnvironmentApiResponseProcessor();
    }
    v1EnvironmentExport(idempotencyKey, _options) {
        const requestContextPromise = this.requestFactory.v1EnvironmentExport(idempotencyKey, _options);
        let middlewarePreObservable = rxjsStub_1.from(requestContextPromise);
        for (let middleware of this.configuration.middleware){
            middlewarePreObservable = middlewarePreObservable.pipe(rxjsStub_2.mergeMap((ctx)=>middleware.pre(ctx)));
        }
        return middlewarePreObservable.pipe(rxjsStub_2.mergeMap((ctx)=>this.configuration.httpApi.send(ctx))).pipe(rxjsStub_2.mergeMap((response)=>{
            let middlewarePostObservable = rxjsStub_1.of(response);
            for (let middleware of this.configuration.middleware){
                middlewarePostObservable = middlewarePostObservable.pipe(rxjsStub_2.mergeMap((rsp)=>middleware.post(rsp)));
            }
            return middlewarePostObservable.pipe(rxjsStub_2.map((rsp)=>this.responseProcessor.v1EnvironmentExport(rsp)));
        }));
    }
    v1EnvironmentExportGet(_options) {
        const requestContextPromise = this.requestFactory.v1EnvironmentExportGet(_options);
        let middlewarePreObservable = rxjsStub_1.from(requestContextPromise);
        for (let middleware of this.configuration.middleware){
            middlewarePreObservable = middlewarePreObservable.pipe(rxjsStub_2.mergeMap((ctx)=>middleware.pre(ctx)));
        }
        return middlewarePreObservable.pipe(rxjsStub_2.mergeMap((ctx)=>this.configuration.httpApi.send(ctx))).pipe(rxjsStub_2.mergeMap((response)=>{
            let middlewarePostObservable = rxjsStub_1.of(response);
            for (let middleware of this.configuration.middleware){
                middlewarePostObservable = middlewarePostObservable.pipe(rxjsStub_2.mergeMap((rsp)=>middleware.post(rsp)));
            }
            return middlewarePostObservable.pipe(rxjsStub_2.map((rsp)=>this.responseProcessor.v1EnvironmentExportGet(rsp)));
        }));
    }
    v1EnvironmentImport(environmentIn, idempotencyKey, _options) {
        const requestContextPromise = this.requestFactory.v1EnvironmentImport(environmentIn, idempotencyKey, _options);
        let middlewarePreObservable = rxjsStub_1.from(requestContextPromise);
        for (let middleware of this.configuration.middleware){
            middlewarePreObservable = middlewarePreObservable.pipe(rxjsStub_2.mergeMap((ctx)=>middleware.pre(ctx)));
        }
        return middlewarePreObservable.pipe(rxjsStub_2.mergeMap((ctx)=>this.configuration.httpApi.send(ctx))).pipe(rxjsStub_2.mergeMap((response)=>{
            let middlewarePostObservable = rxjsStub_1.of(response);
            for (let middleware of this.configuration.middleware){
                middlewarePostObservable = middlewarePostObservable.pipe(rxjsStub_2.mergeMap((rsp)=>middleware.post(rsp)));
            }
            return middlewarePostObservable.pipe(rxjsStub_2.map((rsp)=>this.responseProcessor.v1EnvironmentImport(rsp)));
        }));
    }
}
exports.ObservableEnvironmentApi = ObservableEnvironmentApi;
const EnvironmentSettingsApi_1 = __turbopack_require__("[project]/node_modules/svix/dist/openapi/apis/EnvironmentSettingsApi.js [app-route] (ecmascript)");
class ObservableEnvironmentSettingsApi {
    constructor(configuration, requestFactory, responseProcessor){
        this.configuration = configuration;
        this.requestFactory = requestFactory || new EnvironmentSettingsApi_1.EnvironmentSettingsApiRequestFactory(configuration);
        this.responseProcessor = responseProcessor || new EnvironmentSettingsApi_1.EnvironmentSettingsApiResponseProcessor();
    }
    v1EnvironmentGetSettings(_options) {
        const requestContextPromise = this.requestFactory.v1EnvironmentGetSettings(_options);
        let middlewarePreObservable = rxjsStub_1.from(requestContextPromise);
        for (let middleware of this.configuration.middleware){
            middlewarePreObservable = middlewarePreObservable.pipe(rxjsStub_2.mergeMap((ctx)=>middleware.pre(ctx)));
        }
        return middlewarePreObservable.pipe(rxjsStub_2.mergeMap((ctx)=>this.configuration.httpApi.send(ctx))).pipe(rxjsStub_2.mergeMap((response)=>{
            let middlewarePostObservable = rxjsStub_1.of(response);
            for (let middleware of this.configuration.middleware){
                middlewarePostObservable = middlewarePostObservable.pipe(rxjsStub_2.mergeMap((rsp)=>middleware.post(rsp)));
            }
            return middlewarePostObservable.pipe(rxjsStub_2.map((rsp)=>this.responseProcessor.v1EnvironmentGetSettings(rsp)));
        }));
    }
}
exports.ObservableEnvironmentSettingsApi = ObservableEnvironmentSettingsApi;
const EventTypeApi_1 = __turbopack_require__("[project]/node_modules/svix/dist/openapi/apis/EventTypeApi.js [app-route] (ecmascript)");
class ObservableEventTypeApi {
    constructor(configuration, requestFactory, responseProcessor){
        this.configuration = configuration;
        this.requestFactory = requestFactory || new EventTypeApi_1.EventTypeApiRequestFactory(configuration);
        this.responseProcessor = responseProcessor || new EventTypeApi_1.EventTypeApiResponseProcessor();
    }
    v1EventTypeCreate(eventTypeIn, idempotencyKey, _options) {
        const requestContextPromise = this.requestFactory.v1EventTypeCreate(eventTypeIn, idempotencyKey, _options);
        let middlewarePreObservable = rxjsStub_1.from(requestContextPromise);
        for (let middleware of this.configuration.middleware){
            middlewarePreObservable = middlewarePreObservable.pipe(rxjsStub_2.mergeMap((ctx)=>middleware.pre(ctx)));
        }
        return middlewarePreObservable.pipe(rxjsStub_2.mergeMap((ctx)=>this.configuration.httpApi.send(ctx))).pipe(rxjsStub_2.mergeMap((response)=>{
            let middlewarePostObservable = rxjsStub_1.of(response);
            for (let middleware of this.configuration.middleware){
                middlewarePostObservable = middlewarePostObservable.pipe(rxjsStub_2.mergeMap((rsp)=>middleware.post(rsp)));
            }
            return middlewarePostObservable.pipe(rxjsStub_2.map((rsp)=>this.responseProcessor.v1EventTypeCreate(rsp)));
        }));
    }
    v1EventTypeDelete(eventTypeName, expunge, _options) {
        const requestContextPromise = this.requestFactory.v1EventTypeDelete(eventTypeName, expunge, _options);
        let middlewarePreObservable = rxjsStub_1.from(requestContextPromise);
        for (let middleware of this.configuration.middleware){
            middlewarePreObservable = middlewarePreObservable.pipe(rxjsStub_2.mergeMap((ctx)=>middleware.pre(ctx)));
        }
        return middlewarePreObservable.pipe(rxjsStub_2.mergeMap((ctx)=>this.configuration.httpApi.send(ctx))).pipe(rxjsStub_2.mergeMap((response)=>{
            let middlewarePostObservable = rxjsStub_1.of(response);
            for (let middleware of this.configuration.middleware){
                middlewarePostObservable = middlewarePostObservable.pipe(rxjsStub_2.mergeMap((rsp)=>middleware.post(rsp)));
            }
            return middlewarePostObservable.pipe(rxjsStub_2.map((rsp)=>this.responseProcessor.v1EventTypeDelete(rsp)));
        }));
    }
    v1EventTypeExportOpenapi(idempotencyKey, _options) {
        const requestContextPromise = this.requestFactory.v1EventTypeExportOpenapi(idempotencyKey, _options);
        let middlewarePreObservable = rxjsStub_1.from(requestContextPromise);
        for (let middleware of this.configuration.middleware){
            middlewarePreObservable = middlewarePreObservable.pipe(rxjsStub_2.mergeMap((ctx)=>middleware.pre(ctx)));
        }
        return middlewarePreObservable.pipe(rxjsStub_2.mergeMap((ctx)=>this.configuration.httpApi.send(ctx))).pipe(rxjsStub_2.mergeMap((response)=>{
            let middlewarePostObservable = rxjsStub_1.of(response);
            for (let middleware of this.configuration.middleware){
                middlewarePostObservable = middlewarePostObservable.pipe(rxjsStub_2.mergeMap((rsp)=>middleware.post(rsp)));
            }
            return middlewarePostObservable.pipe(rxjsStub_2.map((rsp)=>this.responseProcessor.v1EventTypeExportOpenapi(rsp)));
        }));
    }
    v1EventTypeGenerateExample(eventTypeSchemaIn, idempotencyKey, _options) {
        const requestContextPromise = this.requestFactory.v1EventTypeGenerateExample(eventTypeSchemaIn, idempotencyKey, _options);
        let middlewarePreObservable = rxjsStub_1.from(requestContextPromise);
        for (let middleware of this.configuration.middleware){
            middlewarePreObservable = middlewarePreObservable.pipe(rxjsStub_2.mergeMap((ctx)=>middleware.pre(ctx)));
        }
        return middlewarePreObservable.pipe(rxjsStub_2.mergeMap((ctx)=>this.configuration.httpApi.send(ctx))).pipe(rxjsStub_2.mergeMap((response)=>{
            let middlewarePostObservable = rxjsStub_1.of(response);
            for (let middleware of this.configuration.middleware){
                middlewarePostObservable = middlewarePostObservable.pipe(rxjsStub_2.mergeMap((rsp)=>middleware.post(rsp)));
            }
            return middlewarePostObservable.pipe(rxjsStub_2.map((rsp)=>this.responseProcessor.v1EventTypeGenerateExample(rsp)));
        }));
    }
    v1EventTypeGet(eventTypeName, _options) {
        const requestContextPromise = this.requestFactory.v1EventTypeGet(eventTypeName, _options);
        let middlewarePreObservable = rxjsStub_1.from(requestContextPromise);
        for (let middleware of this.configuration.middleware){
            middlewarePreObservable = middlewarePreObservable.pipe(rxjsStub_2.mergeMap((ctx)=>middleware.pre(ctx)));
        }
        return middlewarePreObservable.pipe(rxjsStub_2.mergeMap((ctx)=>this.configuration.httpApi.send(ctx))).pipe(rxjsStub_2.mergeMap((response)=>{
            let middlewarePostObservable = rxjsStub_1.of(response);
            for (let middleware of this.configuration.middleware){
                middlewarePostObservable = middlewarePostObservable.pipe(rxjsStub_2.mergeMap((rsp)=>middleware.post(rsp)));
            }
            return middlewarePostObservable.pipe(rxjsStub_2.map((rsp)=>this.responseProcessor.v1EventTypeGet(rsp)));
        }));
    }
    v1EventTypeGetRetrySchedule(eventTypeName, _options) {
        const requestContextPromise = this.requestFactory.v1EventTypeGetRetrySchedule(eventTypeName, _options);
        let middlewarePreObservable = rxjsStub_1.from(requestContextPromise);
        for (let middleware of this.configuration.middleware){
            middlewarePreObservable = middlewarePreObservable.pipe(rxjsStub_2.mergeMap((ctx)=>middleware.pre(ctx)));
        }
        return middlewarePreObservable.pipe(rxjsStub_2.mergeMap((ctx)=>this.configuration.httpApi.send(ctx))).pipe(rxjsStub_2.mergeMap((response)=>{
            let middlewarePostObservable = rxjsStub_1.of(response);
            for (let middleware of this.configuration.middleware){
                middlewarePostObservable = middlewarePostObservable.pipe(rxjsStub_2.mergeMap((rsp)=>middleware.post(rsp)));
            }
            return middlewarePostObservable.pipe(rxjsStub_2.map((rsp)=>this.responseProcessor.v1EventTypeGetRetrySchedule(rsp)));
        }));
    }
    v1EventTypeImportOpenapi(eventTypeImportOpenApiIn, idempotencyKey, _options) {
        const requestContextPromise = this.requestFactory.v1EventTypeImportOpenapi(eventTypeImportOpenApiIn, idempotencyKey, _options);
        let middlewarePreObservable = rxjsStub_1.from(requestContextPromise);
        for (let middleware of this.configuration.middleware){
            middlewarePreObservable = middlewarePreObservable.pipe(rxjsStub_2.mergeMap((ctx)=>middleware.pre(ctx)));
        }
        return middlewarePreObservable.pipe(rxjsStub_2.mergeMap((ctx)=>this.configuration.httpApi.send(ctx))).pipe(rxjsStub_2.mergeMap((response)=>{
            let middlewarePostObservable = rxjsStub_1.of(response);
            for (let middleware of this.configuration.middleware){
                middlewarePostObservable = middlewarePostObservable.pipe(rxjsStub_2.mergeMap((rsp)=>middleware.post(rsp)));
            }
            return middlewarePostObservable.pipe(rxjsStub_2.map((rsp)=>this.responseProcessor.v1EventTypeImportOpenapi(rsp)));
        }));
    }
    v1EventTypeList(limit, iterator, order, includeArchived, withContent, _options) {
        const requestContextPromise = this.requestFactory.v1EventTypeList(limit, iterator, order, includeArchived, withContent, _options);
        let middlewarePreObservable = rxjsStub_1.from(requestContextPromise);
        for (let middleware of this.configuration.middleware){
            middlewarePreObservable = middlewarePreObservable.pipe(rxjsStub_2.mergeMap((ctx)=>middleware.pre(ctx)));
        }
        return middlewarePreObservable.pipe(rxjsStub_2.mergeMap((ctx)=>this.configuration.httpApi.send(ctx))).pipe(rxjsStub_2.mergeMap((response)=>{
            let middlewarePostObservable = rxjsStub_1.of(response);
            for (let middleware of this.configuration.middleware){
                middlewarePostObservable = middlewarePostObservable.pipe(rxjsStub_2.mergeMap((rsp)=>middleware.post(rsp)));
            }
            return middlewarePostObservable.pipe(rxjsStub_2.map((rsp)=>this.responseProcessor.v1EventTypeList(rsp)));
        }));
    }
    v1EventTypePatch(eventTypeName, eventTypePatch, _options) {
        const requestContextPromise = this.requestFactory.v1EventTypePatch(eventTypeName, eventTypePatch, _options);
        let middlewarePreObservable = rxjsStub_1.from(requestContextPromise);
        for (let middleware of this.configuration.middleware){
            middlewarePreObservable = middlewarePreObservable.pipe(rxjsStub_2.mergeMap((ctx)=>middleware.pre(ctx)));
        }
        return middlewarePreObservable.pipe(rxjsStub_2.mergeMap((ctx)=>this.configuration.httpApi.send(ctx))).pipe(rxjsStub_2.mergeMap((response)=>{
            let middlewarePostObservable = rxjsStub_1.of(response);
            for (let middleware of this.configuration.middleware){
                middlewarePostObservable = middlewarePostObservable.pipe(rxjsStub_2.mergeMap((rsp)=>middleware.post(rsp)));
            }
            return middlewarePostObservable.pipe(rxjsStub_2.map((rsp)=>this.responseProcessor.v1EventTypePatch(rsp)));
        }));
    }
    v1EventTypeUpdate(eventTypeName, eventTypeUpdate, _options) {
        const requestContextPromise = this.requestFactory.v1EventTypeUpdate(eventTypeName, eventTypeUpdate, _options);
        let middlewarePreObservable = rxjsStub_1.from(requestContextPromise);
        for (let middleware of this.configuration.middleware){
            middlewarePreObservable = middlewarePreObservable.pipe(rxjsStub_2.mergeMap((ctx)=>middleware.pre(ctx)));
        }
        return middlewarePreObservable.pipe(rxjsStub_2.mergeMap((ctx)=>this.configuration.httpApi.send(ctx))).pipe(rxjsStub_2.mergeMap((response)=>{
            let middlewarePostObservable = rxjsStub_1.of(response);
            for (let middleware of this.configuration.middleware){
                middlewarePostObservable = middlewarePostObservable.pipe(rxjsStub_2.mergeMap((rsp)=>middleware.post(rsp)));
            }
            return middlewarePostObservable.pipe(rxjsStub_2.map((rsp)=>this.responseProcessor.v1EventTypeUpdate(rsp)));
        }));
    }
    v1EventTypeUpdateRetrySchedule(eventTypeName, retryScheduleInOut, _options) {
        const requestContextPromise = this.requestFactory.v1EventTypeUpdateRetrySchedule(eventTypeName, retryScheduleInOut, _options);
        let middlewarePreObservable = rxjsStub_1.from(requestContextPromise);
        for (let middleware of this.configuration.middleware){
            middlewarePreObservable = middlewarePreObservable.pipe(rxjsStub_2.mergeMap((ctx)=>middleware.pre(ctx)));
        }
        return middlewarePreObservable.pipe(rxjsStub_2.mergeMap((ctx)=>this.configuration.httpApi.send(ctx))).pipe(rxjsStub_2.mergeMap((response)=>{
            let middlewarePostObservable = rxjsStub_1.of(response);
            for (let middleware of this.configuration.middleware){
                middlewarePostObservable = middlewarePostObservable.pipe(rxjsStub_2.mergeMap((rsp)=>middleware.post(rsp)));
            }
            return middlewarePostObservable.pipe(rxjsStub_2.map((rsp)=>this.responseProcessor.v1EventTypeUpdateRetrySchedule(rsp)));
        }));
    }
}
exports.ObservableEventTypeApi = ObservableEventTypeApi;
const EventsApi_1 = __turbopack_require__("[project]/node_modules/svix/dist/openapi/apis/EventsApi.js [app-route] (ecmascript)");
class ObservableEventsApi {
    constructor(configuration, requestFactory, responseProcessor){
        this.configuration = configuration;
        this.requestFactory = requestFactory || new EventsApi_1.EventsApiRequestFactory(configuration);
        this.responseProcessor = responseProcessor || new EventsApi_1.EventsApiResponseProcessor();
    }
    v1Events(limit, iterator, eventTypes, channels, after, _options) {
        const requestContextPromise = this.requestFactory.v1Events(limit, iterator, eventTypes, channels, after, _options);
        let middlewarePreObservable = rxjsStub_1.from(requestContextPromise);
        for (let middleware of this.configuration.middleware){
            middlewarePreObservable = middlewarePreObservable.pipe(rxjsStub_2.mergeMap((ctx)=>middleware.pre(ctx)));
        }
        return middlewarePreObservable.pipe(rxjsStub_2.mergeMap((ctx)=>this.configuration.httpApi.send(ctx))).pipe(rxjsStub_2.mergeMap((response)=>{
            let middlewarePostObservable = rxjsStub_1.of(response);
            for (let middleware of this.configuration.middleware){
                middlewarePostObservable = middlewarePostObservable.pipe(rxjsStub_2.mergeMap((rsp)=>middleware.post(rsp)));
            }
            return middlewarePostObservable.pipe(rxjsStub_2.map((rsp)=>this.responseProcessor.v1Events(rsp)));
        }));
    }
}
exports.ObservableEventsApi = ObservableEventsApi;
const HealthApi_1 = __turbopack_require__("[project]/node_modules/svix/dist/openapi/apis/HealthApi.js [app-route] (ecmascript)");
class ObservableHealthApi {
    constructor(configuration, requestFactory, responseProcessor){
        this.configuration = configuration;
        this.requestFactory = requestFactory || new HealthApi_1.HealthApiRequestFactory(configuration);
        this.responseProcessor = responseProcessor || new HealthApi_1.HealthApiResponseProcessor();
    }
    v1HealthGet(_options) {
        const requestContextPromise = this.requestFactory.v1HealthGet(_options);
        let middlewarePreObservable = rxjsStub_1.from(requestContextPromise);
        for (let middleware of this.configuration.middleware){
            middlewarePreObservable = middlewarePreObservable.pipe(rxjsStub_2.mergeMap((ctx)=>middleware.pre(ctx)));
        }
        return middlewarePreObservable.pipe(rxjsStub_2.mergeMap((ctx)=>this.configuration.httpApi.send(ctx))).pipe(rxjsStub_2.mergeMap((response)=>{
            let middlewarePostObservable = rxjsStub_1.of(response);
            for (let middleware of this.configuration.middleware){
                middlewarePostObservable = middlewarePostObservable.pipe(rxjsStub_2.mergeMap((rsp)=>middleware.post(rsp)));
            }
            return middlewarePostObservable.pipe(rxjsStub_2.map((rsp)=>this.responseProcessor.v1HealthGet(rsp)));
        }));
    }
}
exports.ObservableHealthApi = ObservableHealthApi;
const InboundApi_1 = __turbopack_require__("[project]/node_modules/svix/dist/openapi/apis/InboundApi.js [app-route] (ecmascript)");
class ObservableInboundApi {
    constructor(configuration, requestFactory, responseProcessor){
        this.configuration = configuration;
        this.requestFactory = requestFactory || new InboundApi_1.InboundApiRequestFactory(configuration);
        this.responseProcessor = responseProcessor || new InboundApi_1.InboundApiResponseProcessor();
    }
    v1InboundMsg(appId, inboundToken, body, eventType, idempotencyKey, _options) {
        const requestContextPromise = this.requestFactory.v1InboundMsg(appId, inboundToken, body, eventType, idempotencyKey, _options);
        let middlewarePreObservable = rxjsStub_1.from(requestContextPromise);
        for (let middleware of this.configuration.middleware){
            middlewarePreObservable = middlewarePreObservable.pipe(rxjsStub_2.mergeMap((ctx)=>middleware.pre(ctx)));
        }
        return middlewarePreObservable.pipe(rxjsStub_2.mergeMap((ctx)=>this.configuration.httpApi.send(ctx))).pipe(rxjsStub_2.mergeMap((response)=>{
            let middlewarePostObservable = rxjsStub_1.of(response);
            for (let middleware of this.configuration.middleware){
                middlewarePostObservable = middlewarePostObservable.pipe(rxjsStub_2.mergeMap((rsp)=>middleware.post(rsp)));
            }
            return middlewarePostObservable.pipe(rxjsStub_2.map((rsp)=>this.responseProcessor.v1InboundMsg(rsp)));
        }));
    }
    v1InboundRotateUrl(appId, idempotencyKey, _options) {
        const requestContextPromise = this.requestFactory.v1InboundRotateUrl(appId, idempotencyKey, _options);
        let middlewarePreObservable = rxjsStub_1.from(requestContextPromise);
        for (let middleware of this.configuration.middleware){
            middlewarePreObservable = middlewarePreObservable.pipe(rxjsStub_2.mergeMap((ctx)=>middleware.pre(ctx)));
        }
        return middlewarePreObservable.pipe(rxjsStub_2.mergeMap((ctx)=>this.configuration.httpApi.send(ctx))).pipe(rxjsStub_2.mergeMap((response)=>{
            let middlewarePostObservable = rxjsStub_1.of(response);
            for (let middleware of this.configuration.middleware){
                middlewarePostObservable = middlewarePostObservable.pipe(rxjsStub_2.mergeMap((rsp)=>middleware.post(rsp)));
            }
            return middlewarePostObservable.pipe(rxjsStub_2.map((rsp)=>this.responseProcessor.v1InboundRotateUrl(rsp)));
        }));
    }
}
exports.ObservableInboundApi = ObservableInboundApi;
const IntegrationApi_1 = __turbopack_require__("[project]/node_modules/svix/dist/openapi/apis/IntegrationApi.js [app-route] (ecmascript)");
class ObservableIntegrationApi {
    constructor(configuration, requestFactory, responseProcessor){
        this.configuration = configuration;
        this.requestFactory = requestFactory || new IntegrationApi_1.IntegrationApiRequestFactory(configuration);
        this.responseProcessor = responseProcessor || new IntegrationApi_1.IntegrationApiResponseProcessor();
    }
    v1IntegrationCreate(appId, integrationIn, idempotencyKey, _options) {
        const requestContextPromise = this.requestFactory.v1IntegrationCreate(appId, integrationIn, idempotencyKey, _options);
        let middlewarePreObservable = rxjsStub_1.from(requestContextPromise);
        for (let middleware of this.configuration.middleware){
            middlewarePreObservable = middlewarePreObservable.pipe(rxjsStub_2.mergeMap((ctx)=>middleware.pre(ctx)));
        }
        return middlewarePreObservable.pipe(rxjsStub_2.mergeMap((ctx)=>this.configuration.httpApi.send(ctx))).pipe(rxjsStub_2.mergeMap((response)=>{
            let middlewarePostObservable = rxjsStub_1.of(response);
            for (let middleware of this.configuration.middleware){
                middlewarePostObservable = middlewarePostObservable.pipe(rxjsStub_2.mergeMap((rsp)=>middleware.post(rsp)));
            }
            return middlewarePostObservable.pipe(rxjsStub_2.map((rsp)=>this.responseProcessor.v1IntegrationCreate(rsp)));
        }));
    }
    v1IntegrationDelete(appId, integId, _options) {
        const requestContextPromise = this.requestFactory.v1IntegrationDelete(appId, integId, _options);
        let middlewarePreObservable = rxjsStub_1.from(requestContextPromise);
        for (let middleware of this.configuration.middleware){
            middlewarePreObservable = middlewarePreObservable.pipe(rxjsStub_2.mergeMap((ctx)=>middleware.pre(ctx)));
        }
        return middlewarePreObservable.pipe(rxjsStub_2.mergeMap((ctx)=>this.configuration.httpApi.send(ctx))).pipe(rxjsStub_2.mergeMap((response)=>{
            let middlewarePostObservable = rxjsStub_1.of(response);
            for (let middleware of this.configuration.middleware){
                middlewarePostObservable = middlewarePostObservable.pipe(rxjsStub_2.mergeMap((rsp)=>middleware.post(rsp)));
            }
            return middlewarePostObservable.pipe(rxjsStub_2.map((rsp)=>this.responseProcessor.v1IntegrationDelete(rsp)));
        }));
    }
    v1IntegrationGet(appId, integId, _options) {
        const requestContextPromise = this.requestFactory.v1IntegrationGet(appId, integId, _options);
        let middlewarePreObservable = rxjsStub_1.from(requestContextPromise);
        for (let middleware of this.configuration.middleware){
            middlewarePreObservable = middlewarePreObservable.pipe(rxjsStub_2.mergeMap((ctx)=>middleware.pre(ctx)));
        }
        return middlewarePreObservable.pipe(rxjsStub_2.mergeMap((ctx)=>this.configuration.httpApi.send(ctx))).pipe(rxjsStub_2.mergeMap((response)=>{
            let middlewarePostObservable = rxjsStub_1.of(response);
            for (let middleware of this.configuration.middleware){
                middlewarePostObservable = middlewarePostObservable.pipe(rxjsStub_2.mergeMap((rsp)=>middleware.post(rsp)));
            }
            return middlewarePostObservable.pipe(rxjsStub_2.map((rsp)=>this.responseProcessor.v1IntegrationGet(rsp)));
        }));
    }
    v1IntegrationGetKey(appId, integId, _options) {
        const requestContextPromise = this.requestFactory.v1IntegrationGetKey(appId, integId, _options);
        let middlewarePreObservable = rxjsStub_1.from(requestContextPromise);
        for (let middleware of this.configuration.middleware){
            middlewarePreObservable = middlewarePreObservable.pipe(rxjsStub_2.mergeMap((ctx)=>middleware.pre(ctx)));
        }
        return middlewarePreObservable.pipe(rxjsStub_2.mergeMap((ctx)=>this.configuration.httpApi.send(ctx))).pipe(rxjsStub_2.mergeMap((response)=>{
            let middlewarePostObservable = rxjsStub_1.of(response);
            for (let middleware of this.configuration.middleware){
                middlewarePostObservable = middlewarePostObservable.pipe(rxjsStub_2.mergeMap((rsp)=>middleware.post(rsp)));
            }
            return middlewarePostObservable.pipe(rxjsStub_2.map((rsp)=>this.responseProcessor.v1IntegrationGetKey(rsp)));
        }));
    }
    v1IntegrationList(appId, limit, iterator, order, _options) {
        const requestContextPromise = this.requestFactory.v1IntegrationList(appId, limit, iterator, order, _options);
        let middlewarePreObservable = rxjsStub_1.from(requestContextPromise);
        for (let middleware of this.configuration.middleware){
            middlewarePreObservable = middlewarePreObservable.pipe(rxjsStub_2.mergeMap((ctx)=>middleware.pre(ctx)));
        }
        return middlewarePreObservable.pipe(rxjsStub_2.mergeMap((ctx)=>this.configuration.httpApi.send(ctx))).pipe(rxjsStub_2.mergeMap((response)=>{
            let middlewarePostObservable = rxjsStub_1.of(response);
            for (let middleware of this.configuration.middleware){
                middlewarePostObservable = middlewarePostObservable.pipe(rxjsStub_2.mergeMap((rsp)=>middleware.post(rsp)));
            }
            return middlewarePostObservable.pipe(rxjsStub_2.map((rsp)=>this.responseProcessor.v1IntegrationList(rsp)));
        }));
    }
    v1IntegrationRotateKey(appId, integId, idempotencyKey, _options) {
        const requestContextPromise = this.requestFactory.v1IntegrationRotateKey(appId, integId, idempotencyKey, _options);
        let middlewarePreObservable = rxjsStub_1.from(requestContextPromise);
        for (let middleware of this.configuration.middleware){
            middlewarePreObservable = middlewarePreObservable.pipe(rxjsStub_2.mergeMap((ctx)=>middleware.pre(ctx)));
        }
        return middlewarePreObservable.pipe(rxjsStub_2.mergeMap((ctx)=>this.configuration.httpApi.send(ctx))).pipe(rxjsStub_2.mergeMap((response)=>{
            let middlewarePostObservable = rxjsStub_1.of(response);
            for (let middleware of this.configuration.middleware){
                middlewarePostObservable = middlewarePostObservable.pipe(rxjsStub_2.mergeMap((rsp)=>middleware.post(rsp)));
            }
            return middlewarePostObservable.pipe(rxjsStub_2.map((rsp)=>this.responseProcessor.v1IntegrationRotateKey(rsp)));
        }));
    }
    v1IntegrationUpdate(appId, integId, integrationUpdate, _options) {
        const requestContextPromise = this.requestFactory.v1IntegrationUpdate(appId, integId, integrationUpdate, _options);
        let middlewarePreObservable = rxjsStub_1.from(requestContextPromise);
        for (let middleware of this.configuration.middleware){
            middlewarePreObservable = middlewarePreObservable.pipe(rxjsStub_2.mergeMap((ctx)=>middleware.pre(ctx)));
        }
        return middlewarePreObservable.pipe(rxjsStub_2.mergeMap((ctx)=>this.configuration.httpApi.send(ctx))).pipe(rxjsStub_2.mergeMap((response)=>{
            let middlewarePostObservable = rxjsStub_1.of(response);
            for (let middleware of this.configuration.middleware){
                middlewarePostObservable = middlewarePostObservable.pipe(rxjsStub_2.mergeMap((rsp)=>middleware.post(rsp)));
            }
            return middlewarePostObservable.pipe(rxjsStub_2.map((rsp)=>this.responseProcessor.v1IntegrationUpdate(rsp)));
        }));
    }
}
exports.ObservableIntegrationApi = ObservableIntegrationApi;
const MessageApi_1 = __turbopack_require__("[project]/node_modules/svix/dist/openapi/apis/MessageApi.js [app-route] (ecmascript)");
class ObservableMessageApi {
    constructor(configuration, requestFactory, responseProcessor){
        this.configuration = configuration;
        this.requestFactory = requestFactory || new MessageApi_1.MessageApiRequestFactory(configuration);
        this.responseProcessor = responseProcessor || new MessageApi_1.MessageApiResponseProcessor();
    }
    createMessageAttemptForEndpoint(appId, endpointId, messageIn, idempotencyKey, _options) {
        const requestContextPromise = this.requestFactory.createMessageAttemptForEndpoint(appId, endpointId, messageIn, idempotencyKey, _options);
        let middlewarePreObservable = rxjsStub_1.from(requestContextPromise);
        for (let middleware of this.configuration.middleware){
            middlewarePreObservable = middlewarePreObservable.pipe(rxjsStub_2.mergeMap((ctx)=>middleware.pre(ctx)));
        }
        return middlewarePreObservable.pipe(rxjsStub_2.mergeMap((ctx)=>this.configuration.httpApi.send(ctx))).pipe(rxjsStub_2.mergeMap((response)=>{
            let middlewarePostObservable = rxjsStub_1.of(response);
            for (let middleware of this.configuration.middleware){
                middlewarePostObservable = middlewarePostObservable.pipe(rxjsStub_2.mergeMap((rsp)=>middleware.post(rsp)));
            }
            return middlewarePostObservable.pipe(rxjsStub_2.map((rsp)=>this.responseProcessor.createMessageAttemptForEndpoint(rsp)));
        }));
    }
    v1MessageCreate(appId, messageIn, withContent, idempotencyKey, _options) {
        const requestContextPromise = this.requestFactory.v1MessageCreate(appId, messageIn, withContent, idempotencyKey, _options);
        let middlewarePreObservable = rxjsStub_1.from(requestContextPromise);
        for (let middleware of this.configuration.middleware){
            middlewarePreObservable = middlewarePreObservable.pipe(rxjsStub_2.mergeMap((ctx)=>middleware.pre(ctx)));
        }
        return middlewarePreObservable.pipe(rxjsStub_2.mergeMap((ctx)=>this.configuration.httpApi.send(ctx))).pipe(rxjsStub_2.mergeMap((response)=>{
            let middlewarePostObservable = rxjsStub_1.of(response);
            for (let middleware of this.configuration.middleware){
                middlewarePostObservable = middlewarePostObservable.pipe(rxjsStub_2.mergeMap((rsp)=>middleware.post(rsp)));
            }
            return middlewarePostObservable.pipe(rxjsStub_2.map((rsp)=>this.responseProcessor.v1MessageCreate(rsp)));
        }));
    }
    v1MessageEvents(appId, limit, iterator, eventTypes, channels, after, _options) {
        const requestContextPromise = this.requestFactory.v1MessageEvents(appId, limit, iterator, eventTypes, channels, after, _options);
        let middlewarePreObservable = rxjsStub_1.from(requestContextPromise);
        for (let middleware of this.configuration.middleware){
            middlewarePreObservable = middlewarePreObservable.pipe(rxjsStub_2.mergeMap((ctx)=>middleware.pre(ctx)));
        }
        return middlewarePreObservable.pipe(rxjsStub_2.mergeMap((ctx)=>this.configuration.httpApi.send(ctx))).pipe(rxjsStub_2.mergeMap((response)=>{
            let middlewarePostObservable = rxjsStub_1.of(response);
            for (let middleware of this.configuration.middleware){
                middlewarePostObservable = middlewarePostObservable.pipe(rxjsStub_2.mergeMap((rsp)=>middleware.post(rsp)));
            }
            return middlewarePostObservable.pipe(rxjsStub_2.map((rsp)=>this.responseProcessor.v1MessageEvents(rsp)));
        }));
    }
    v1MessageEventsSubscription(appId, subscriptionId, limit, iterator, eventTypes, channels, after, _options) {
        const requestContextPromise = this.requestFactory.v1MessageEventsSubscription(appId, subscriptionId, limit, iterator, eventTypes, channels, after, _options);
        let middlewarePreObservable = rxjsStub_1.from(requestContextPromise);
        for (let middleware of this.configuration.middleware){
            middlewarePreObservable = middlewarePreObservable.pipe(rxjsStub_2.mergeMap((ctx)=>middleware.pre(ctx)));
        }
        return middlewarePreObservable.pipe(rxjsStub_2.mergeMap((ctx)=>this.configuration.httpApi.send(ctx))).pipe(rxjsStub_2.mergeMap((response)=>{
            let middlewarePostObservable = rxjsStub_1.of(response);
            for (let middleware of this.configuration.middleware){
                middlewarePostObservable = middlewarePostObservable.pipe(rxjsStub_2.mergeMap((rsp)=>middleware.post(rsp)));
            }
            return middlewarePostObservable.pipe(rxjsStub_2.map((rsp)=>this.responseProcessor.v1MessageEventsSubscription(rsp)));
        }));
    }
    v1MessageEventsSubscriptionCreateToken(appId, subscriptionId, idempotencyKey, _options) {
        const requestContextPromise = this.requestFactory.v1MessageEventsSubscriptionCreateToken(appId, subscriptionId, idempotencyKey, _options);
        let middlewarePreObservable = rxjsStub_1.from(requestContextPromise);
        for (let middleware of this.configuration.middleware){
            middlewarePreObservable = middlewarePreObservable.pipe(rxjsStub_2.mergeMap((ctx)=>middleware.pre(ctx)));
        }
        return middlewarePreObservable.pipe(rxjsStub_2.mergeMap((ctx)=>this.configuration.httpApi.send(ctx))).pipe(rxjsStub_2.mergeMap((response)=>{
            let middlewarePostObservable = rxjsStub_1.of(response);
            for (let middleware of this.configuration.middleware){
                middlewarePostObservable = middlewarePostObservable.pipe(rxjsStub_2.mergeMap((rsp)=>middleware.post(rsp)));
            }
            return middlewarePostObservable.pipe(rxjsStub_2.map((rsp)=>this.responseProcessor.v1MessageEventsSubscriptionCreateToken(rsp)));
        }));
    }
    v1MessageExpungeContent(appId, msgId, _options) {
        const requestContextPromise = this.requestFactory.v1MessageExpungeContent(appId, msgId, _options);
        let middlewarePreObservable = rxjsStub_1.from(requestContextPromise);
        for (let middleware of this.configuration.middleware){
            middlewarePreObservable = middlewarePreObservable.pipe(rxjsStub_2.mergeMap((ctx)=>middleware.pre(ctx)));
        }
        return middlewarePreObservable.pipe(rxjsStub_2.mergeMap((ctx)=>this.configuration.httpApi.send(ctx))).pipe(rxjsStub_2.mergeMap((response)=>{
            let middlewarePostObservable = rxjsStub_1.of(response);
            for (let middleware of this.configuration.middleware){
                middlewarePostObservable = middlewarePostObservable.pipe(rxjsStub_2.mergeMap((rsp)=>middleware.post(rsp)));
            }
            return middlewarePostObservable.pipe(rxjsStub_2.map((rsp)=>this.responseProcessor.v1MessageExpungeContent(rsp)));
        }));
    }
    v1MessageGet(appId, msgId, withContent, _options) {
        const requestContextPromise = this.requestFactory.v1MessageGet(appId, msgId, withContent, _options);
        let middlewarePreObservable = rxjsStub_1.from(requestContextPromise);
        for (let middleware of this.configuration.middleware){
            middlewarePreObservable = middlewarePreObservable.pipe(rxjsStub_2.mergeMap((ctx)=>middleware.pre(ctx)));
        }
        return middlewarePreObservable.pipe(rxjsStub_2.mergeMap((ctx)=>this.configuration.httpApi.send(ctx))).pipe(rxjsStub_2.mergeMap((response)=>{
            let middlewarePostObservable = rxjsStub_1.of(response);
            for (let middleware of this.configuration.middleware){
                middlewarePostObservable = middlewarePostObservable.pipe(rxjsStub_2.mergeMap((rsp)=>middleware.post(rsp)));
            }
            return middlewarePostObservable.pipe(rxjsStub_2.map((rsp)=>this.responseProcessor.v1MessageGet(rsp)));
        }));
    }
    v1MessageGetRawPayload(appId, msgId, _options) {
        const requestContextPromise = this.requestFactory.v1MessageGetRawPayload(appId, msgId, _options);
        let middlewarePreObservable = rxjsStub_1.from(requestContextPromise);
        for (let middleware of this.configuration.middleware){
            middlewarePreObservable = middlewarePreObservable.pipe(rxjsStub_2.mergeMap((ctx)=>middleware.pre(ctx)));
        }
        return middlewarePreObservable.pipe(rxjsStub_2.mergeMap((ctx)=>this.configuration.httpApi.send(ctx))).pipe(rxjsStub_2.mergeMap((response)=>{
            let middlewarePostObservable = rxjsStub_1.of(response);
            for (let middleware of this.configuration.middleware){
                middlewarePostObservable = middlewarePostObservable.pipe(rxjsStub_2.mergeMap((rsp)=>middleware.post(rsp)));
            }
            return middlewarePostObservable.pipe(rxjsStub_2.map((rsp)=>this.responseProcessor.v1MessageGetRawPayload(rsp)));
        }));
    }
    v1MessageList(appId, limit, iterator, channel, before, after, withContent, tag, eventTypes, _options) {
        const requestContextPromise = this.requestFactory.v1MessageList(appId, limit, iterator, channel, before, after, withContent, tag, eventTypes, _options);
        let middlewarePreObservable = rxjsStub_1.from(requestContextPromise);
        for (let middleware of this.configuration.middleware){
            middlewarePreObservable = middlewarePreObservable.pipe(rxjsStub_2.mergeMap((ctx)=>middleware.pre(ctx)));
        }
        return middlewarePreObservable.pipe(rxjsStub_2.mergeMap((ctx)=>this.configuration.httpApi.send(ctx))).pipe(rxjsStub_2.mergeMap((response)=>{
            let middlewarePostObservable = rxjsStub_1.of(response);
            for (let middleware of this.configuration.middleware){
                middlewarePostObservable = middlewarePostObservable.pipe(rxjsStub_2.mergeMap((rsp)=>middleware.post(rsp)));
            }
            return middlewarePostObservable.pipe(rxjsStub_2.map((rsp)=>this.responseProcessor.v1MessageList(rsp)));
        }));
    }
}
exports.ObservableMessageApi = ObservableMessageApi;
const MessageAttemptApi_1 = __turbopack_require__("[project]/node_modules/svix/dist/openapi/apis/MessageAttemptApi.js [app-route] (ecmascript)");
class ObservableMessageAttemptApi {
    constructor(configuration, requestFactory, responseProcessor){
        this.configuration = configuration;
        this.requestFactory = requestFactory || new MessageAttemptApi_1.MessageAttemptApiRequestFactory(configuration);
        this.responseProcessor = responseProcessor || new MessageAttemptApi_1.MessageAttemptApiResponseProcessor();
    }
    v1MessageAttemptExpungeContent(appId, msgId, attemptId, _options) {
        const requestContextPromise = this.requestFactory.v1MessageAttemptExpungeContent(appId, msgId, attemptId, _options);
        let middlewarePreObservable = rxjsStub_1.from(requestContextPromise);
        for (let middleware of this.configuration.middleware){
            middlewarePreObservable = middlewarePreObservable.pipe(rxjsStub_2.mergeMap((ctx)=>middleware.pre(ctx)));
        }
        return middlewarePreObservable.pipe(rxjsStub_2.mergeMap((ctx)=>this.configuration.httpApi.send(ctx))).pipe(rxjsStub_2.mergeMap((response)=>{
            let middlewarePostObservable = rxjsStub_1.of(response);
            for (let middleware of this.configuration.middleware){
                middlewarePostObservable = middlewarePostObservable.pipe(rxjsStub_2.mergeMap((rsp)=>middleware.post(rsp)));
            }
            return middlewarePostObservable.pipe(rxjsStub_2.map((rsp)=>this.responseProcessor.v1MessageAttemptExpungeContent(rsp)));
        }));
    }
    v1MessageAttemptGet(appId, msgId, attemptId, _options) {
        const requestContextPromise = this.requestFactory.v1MessageAttemptGet(appId, msgId, attemptId, _options);
        let middlewarePreObservable = rxjsStub_1.from(requestContextPromise);
        for (let middleware of this.configuration.middleware){
            middlewarePreObservable = middlewarePreObservable.pipe(rxjsStub_2.mergeMap((ctx)=>middleware.pre(ctx)));
        }
        return middlewarePreObservable.pipe(rxjsStub_2.mergeMap((ctx)=>this.configuration.httpApi.send(ctx))).pipe(rxjsStub_2.mergeMap((response)=>{
            let middlewarePostObservable = rxjsStub_1.of(response);
            for (let middleware of this.configuration.middleware){
                middlewarePostObservable = middlewarePostObservable.pipe(rxjsStub_2.mergeMap((rsp)=>middleware.post(rsp)));
            }
            return middlewarePostObservable.pipe(rxjsStub_2.map((rsp)=>this.responseProcessor.v1MessageAttemptGet(rsp)));
        }));
    }
    v1MessageAttemptGetHeaders(appId, msgId, attemptId, _options) {
        const requestContextPromise = this.requestFactory.v1MessageAttemptGetHeaders(appId, msgId, attemptId, _options);
        let middlewarePreObservable = rxjsStub_1.from(requestContextPromise);
        for (let middleware of this.configuration.middleware){
            middlewarePreObservable = middlewarePreObservable.pipe(rxjsStub_2.mergeMap((ctx)=>middleware.pre(ctx)));
        }
        return middlewarePreObservable.pipe(rxjsStub_2.mergeMap((ctx)=>this.configuration.httpApi.send(ctx))).pipe(rxjsStub_2.mergeMap((response)=>{
            let middlewarePostObservable = rxjsStub_1.of(response);
            for (let middleware of this.configuration.middleware){
                middlewarePostObservable = middlewarePostObservable.pipe(rxjsStub_2.mergeMap((rsp)=>middleware.post(rsp)));
            }
            return middlewarePostObservable.pipe(rxjsStub_2.map((rsp)=>this.responseProcessor.v1MessageAttemptGetHeaders(rsp)));
        }));
    }
    v1MessageAttemptListAttemptedDestinations(appId, msgId, limit, iterator, _options) {
        const requestContextPromise = this.requestFactory.v1MessageAttemptListAttemptedDestinations(appId, msgId, limit, iterator, _options);
        let middlewarePreObservable = rxjsStub_1.from(requestContextPromise);
        for (let middleware of this.configuration.middleware){
            middlewarePreObservable = middlewarePreObservable.pipe(rxjsStub_2.mergeMap((ctx)=>middleware.pre(ctx)));
        }
        return middlewarePreObservable.pipe(rxjsStub_2.mergeMap((ctx)=>this.configuration.httpApi.send(ctx))).pipe(rxjsStub_2.mergeMap((response)=>{
            let middlewarePostObservable = rxjsStub_1.of(response);
            for (let middleware of this.configuration.middleware){
                middlewarePostObservable = middlewarePostObservable.pipe(rxjsStub_2.mergeMap((rsp)=>middleware.post(rsp)));
            }
            return middlewarePostObservable.pipe(rxjsStub_2.map((rsp)=>this.responseProcessor.v1MessageAttemptListAttemptedDestinations(rsp)));
        }));
    }
    v1MessageAttemptListAttemptedMessages(appId, endpointId, limit, iterator, channel, tag, status, before, after, withContent, eventTypes, _options) {
        const requestContextPromise = this.requestFactory.v1MessageAttemptListAttemptedMessages(appId, endpointId, limit, iterator, channel, tag, status, before, after, withContent, eventTypes, _options);
        let middlewarePreObservable = rxjsStub_1.from(requestContextPromise);
        for (let middleware of this.configuration.middleware){
            middlewarePreObservable = middlewarePreObservable.pipe(rxjsStub_2.mergeMap((ctx)=>middleware.pre(ctx)));
        }
        return middlewarePreObservable.pipe(rxjsStub_2.mergeMap((ctx)=>this.configuration.httpApi.send(ctx))).pipe(rxjsStub_2.mergeMap((response)=>{
            let middlewarePostObservable = rxjsStub_1.of(response);
            for (let middleware of this.configuration.middleware){
                middlewarePostObservable = middlewarePostObservable.pipe(rxjsStub_2.mergeMap((rsp)=>middleware.post(rsp)));
            }
            return middlewarePostObservable.pipe(rxjsStub_2.map((rsp)=>this.responseProcessor.v1MessageAttemptListAttemptedMessages(rsp)));
        }));
    }
    v1MessageAttemptListByEndpoint(appId, endpointId, limit, iterator, status, statusCodeClass, channel, tag, before, after, withContent, withMsg, eventTypes, _options) {
        const requestContextPromise = this.requestFactory.v1MessageAttemptListByEndpoint(appId, endpointId, limit, iterator, status, statusCodeClass, channel, tag, before, after, withContent, withMsg, eventTypes, _options);
        let middlewarePreObservable = rxjsStub_1.from(requestContextPromise);
        for (let middleware of this.configuration.middleware){
            middlewarePreObservable = middlewarePreObservable.pipe(rxjsStub_2.mergeMap((ctx)=>middleware.pre(ctx)));
        }
        return middlewarePreObservable.pipe(rxjsStub_2.mergeMap((ctx)=>this.configuration.httpApi.send(ctx))).pipe(rxjsStub_2.mergeMap((response)=>{
            let middlewarePostObservable = rxjsStub_1.of(response);
            for (let middleware of this.configuration.middleware){
                middlewarePostObservable = middlewarePostObservable.pipe(rxjsStub_2.mergeMap((rsp)=>middleware.post(rsp)));
            }
            return middlewarePostObservable.pipe(rxjsStub_2.map((rsp)=>this.responseProcessor.v1MessageAttemptListByEndpoint(rsp)));
        }));
    }
    v1MessageAttemptListByEndpointDeprecated(appId, msgId, endpointId, limit, iterator, channel, tag, status, before, after, eventTypes, _options) {
        const requestContextPromise = this.requestFactory.v1MessageAttemptListByEndpointDeprecated(appId, msgId, endpointId, limit, iterator, channel, tag, status, before, after, eventTypes, _options);
        let middlewarePreObservable = rxjsStub_1.from(requestContextPromise);
        for (let middleware of this.configuration.middleware){
            middlewarePreObservable = middlewarePreObservable.pipe(rxjsStub_2.mergeMap((ctx)=>middleware.pre(ctx)));
        }
        return middlewarePreObservable.pipe(rxjsStub_2.mergeMap((ctx)=>this.configuration.httpApi.send(ctx))).pipe(rxjsStub_2.mergeMap((response)=>{
            let middlewarePostObservable = rxjsStub_1.of(response);
            for (let middleware of this.configuration.middleware){
                middlewarePostObservable = middlewarePostObservable.pipe(rxjsStub_2.mergeMap((rsp)=>middleware.post(rsp)));
            }
            return middlewarePostObservable.pipe(rxjsStub_2.map((rsp)=>this.responseProcessor.v1MessageAttemptListByEndpointDeprecated(rsp)));
        }));
    }
    v1MessageAttemptListByMsg(appId, msgId, limit, iterator, status, statusCodeClass, channel, tag, endpointId, before, after, withContent, eventTypes, _options) {
        const requestContextPromise = this.requestFactory.v1MessageAttemptListByMsg(appId, msgId, limit, iterator, status, statusCodeClass, channel, tag, endpointId, before, after, withContent, eventTypes, _options);
        let middlewarePreObservable = rxjsStub_1.from(requestContextPromise);
        for (let middleware of this.configuration.middleware){
            middlewarePreObservable = middlewarePreObservable.pipe(rxjsStub_2.mergeMap((ctx)=>middleware.pre(ctx)));
        }
        return middlewarePreObservable.pipe(rxjsStub_2.mergeMap((ctx)=>this.configuration.httpApi.send(ctx))).pipe(rxjsStub_2.mergeMap((response)=>{
            let middlewarePostObservable = rxjsStub_1.of(response);
            for (let middleware of this.configuration.middleware){
                middlewarePostObservable = middlewarePostObservable.pipe(rxjsStub_2.mergeMap((rsp)=>middleware.post(rsp)));
            }
            return middlewarePostObservable.pipe(rxjsStub_2.map((rsp)=>this.responseProcessor.v1MessageAttemptListByMsg(rsp)));
        }));
    }
    v1MessageAttemptListByMsgDeprecated(appId, msgId, limit, iterator, endpointId, channel, tag, status, before, after, statusCodeClass, eventTypes, _options) {
        const requestContextPromise = this.requestFactory.v1MessageAttemptListByMsgDeprecated(appId, msgId, limit, iterator, endpointId, channel, tag, status, before, after, statusCodeClass, eventTypes, _options);
        let middlewarePreObservable = rxjsStub_1.from(requestContextPromise);
        for (let middleware of this.configuration.middleware){
            middlewarePreObservable = middlewarePreObservable.pipe(rxjsStub_2.mergeMap((ctx)=>middleware.pre(ctx)));
        }
        return middlewarePreObservable.pipe(rxjsStub_2.mergeMap((ctx)=>this.configuration.httpApi.send(ctx))).pipe(rxjsStub_2.mergeMap((response)=>{
            let middlewarePostObservable = rxjsStub_1.of(response);
            for (let middleware of this.configuration.middleware){
                middlewarePostObservable = middlewarePostObservable.pipe(rxjsStub_2.mergeMap((rsp)=>middleware.post(rsp)));
            }
            return middlewarePostObservable.pipe(rxjsStub_2.map((rsp)=>this.responseProcessor.v1MessageAttemptListByMsgDeprecated(rsp)));
        }));
    }
    v1MessageAttemptResend(appId, msgId, endpointId, idempotencyKey, _options) {
        const requestContextPromise = this.requestFactory.v1MessageAttemptResend(appId, msgId, endpointId, idempotencyKey, _options);
        let middlewarePreObservable = rxjsStub_1.from(requestContextPromise);
        for (let middleware of this.configuration.middleware){
            middlewarePreObservable = middlewarePreObservable.pipe(rxjsStub_2.mergeMap((ctx)=>middleware.pre(ctx)));
        }
        return middlewarePreObservable.pipe(rxjsStub_2.mergeMap((ctx)=>this.configuration.httpApi.send(ctx))).pipe(rxjsStub_2.mergeMap((response)=>{
            let middlewarePostObservable = rxjsStub_1.of(response);
            for (let middleware of this.configuration.middleware){
                middlewarePostObservable = middlewarePostObservable.pipe(rxjsStub_2.mergeMap((rsp)=>middleware.post(rsp)));
            }
            return middlewarePostObservable.pipe(rxjsStub_2.map((rsp)=>this.responseProcessor.v1MessageAttemptResend(rsp)));
        }));
    }
}
exports.ObservableMessageAttemptApi = ObservableMessageAttemptApi;
const SinkApi_1 = __turbopack_require__("[project]/node_modules/svix/dist/openapi/apis/SinkApi.js [app-route] (ecmascript)");
class ObservableSinkApi {
    constructor(configuration, requestFactory, responseProcessor){
        this.configuration = configuration;
        this.requestFactory = requestFactory || new SinkApi_1.SinkApiRequestFactory(configuration);
        this.responseProcessor = responseProcessor || new SinkApi_1.SinkApiResponseProcessor();
    }
    v1StreamCreateEvents(streamId, createStreamIn, idempotencyKey, _options) {
        const requestContextPromise = this.requestFactory.v1StreamCreateEvents(streamId, createStreamIn, idempotencyKey, _options);
        let middlewarePreObservable = rxjsStub_1.from(requestContextPromise);
        for (let middleware of this.configuration.middleware){
            middlewarePreObservable = middlewarePreObservable.pipe(rxjsStub_2.mergeMap((ctx)=>middleware.pre(ctx)));
        }
        return middlewarePreObservable.pipe(rxjsStub_2.mergeMap((ctx)=>this.configuration.httpApi.send(ctx))).pipe(rxjsStub_2.mergeMap((response)=>{
            let middlewarePostObservable = rxjsStub_1.of(response);
            for (let middleware of this.configuration.middleware){
                middlewarePostObservable = middlewarePostObservable.pipe(rxjsStub_2.mergeMap((rsp)=>middleware.post(rsp)));
            }
            return middlewarePostObservable.pipe(rxjsStub_2.map((rsp)=>this.responseProcessor.v1StreamCreateEvents(rsp)));
        }));
    }
    v1StreamEventsGet(streamId, limit, iterator, after, _options) {
        const requestContextPromise = this.requestFactory.v1StreamEventsGet(streamId, limit, iterator, after, _options);
        let middlewarePreObservable = rxjsStub_1.from(requestContextPromise);
        for (let middleware of this.configuration.middleware){
            middlewarePreObservable = middlewarePreObservable.pipe(rxjsStub_2.mergeMap((ctx)=>middleware.pre(ctx)));
        }
        return middlewarePreObservable.pipe(rxjsStub_2.mergeMap((ctx)=>this.configuration.httpApi.send(ctx))).pipe(rxjsStub_2.mergeMap((response)=>{
            let middlewarePostObservable = rxjsStub_1.of(response);
            for (let middleware of this.configuration.middleware){
                middlewarePostObservable = middlewarePostObservable.pipe(rxjsStub_2.mergeMap((rsp)=>middleware.post(rsp)));
            }
            return middlewarePostObservable.pipe(rxjsStub_2.map((rsp)=>this.responseProcessor.v1StreamEventsGet(rsp)));
        }));
    }
}
exports.ObservableSinkApi = ObservableSinkApi;
const StatisticsApi_1 = __turbopack_require__("[project]/node_modules/svix/dist/openapi/apis/StatisticsApi.js [app-route] (ecmascript)");
class ObservableStatisticsApi {
    constructor(configuration, requestFactory, responseProcessor){
        this.configuration = configuration;
        this.requestFactory = requestFactory || new StatisticsApi_1.StatisticsApiRequestFactory(configuration);
        this.responseProcessor = responseProcessor || new StatisticsApi_1.StatisticsApiResponseProcessor();
    }
    v1StatisticsAggregateAppStats(appUsageStatsIn, idempotencyKey, _options) {
        const requestContextPromise = this.requestFactory.v1StatisticsAggregateAppStats(appUsageStatsIn, idempotencyKey, _options);
        let middlewarePreObservable = rxjsStub_1.from(requestContextPromise);
        for (let middleware of this.configuration.middleware){
            middlewarePreObservable = middlewarePreObservable.pipe(rxjsStub_2.mergeMap((ctx)=>middleware.pre(ctx)));
        }
        return middlewarePreObservable.pipe(rxjsStub_2.mergeMap((ctx)=>this.configuration.httpApi.send(ctx))).pipe(rxjsStub_2.mergeMap((response)=>{
            let middlewarePostObservable = rxjsStub_1.of(response);
            for (let middleware of this.configuration.middleware){
                middlewarePostObservable = middlewarePostObservable.pipe(rxjsStub_2.mergeMap((rsp)=>middleware.post(rsp)));
            }
            return middlewarePostObservable.pipe(rxjsStub_2.map((rsp)=>this.responseProcessor.v1StatisticsAggregateAppStats(rsp)));
        }));
    }
    v1StatisticsAggregateEventTypes(_options) {
        const requestContextPromise = this.requestFactory.v1StatisticsAggregateEventTypes(_options);
        let middlewarePreObservable = rxjsStub_1.from(requestContextPromise);
        for (let middleware of this.configuration.middleware){
            middlewarePreObservable = middlewarePreObservable.pipe(rxjsStub_2.mergeMap((ctx)=>middleware.pre(ctx)));
        }
        return middlewarePreObservable.pipe(rxjsStub_2.mergeMap((ctx)=>this.configuration.httpApi.send(ctx))).pipe(rxjsStub_2.mergeMap((response)=>{
            let middlewarePostObservable = rxjsStub_1.of(response);
            for (let middleware of this.configuration.middleware){
                middlewarePostObservable = middlewarePostObservable.pipe(rxjsStub_2.mergeMap((rsp)=>middleware.post(rsp)));
            }
            return middlewarePostObservable.pipe(rxjsStub_2.map((rsp)=>this.responseProcessor.v1StatisticsAggregateEventTypes(rsp)));
        }));
    }
    v1StatsAppAttempts(appId, startDate, endDate, _options) {
        const requestContextPromise = this.requestFactory.v1StatsAppAttempts(appId, startDate, endDate, _options);
        let middlewarePreObservable = rxjsStub_1.from(requestContextPromise);
        for (let middleware of this.configuration.middleware){
            middlewarePreObservable = middlewarePreObservable.pipe(rxjsStub_2.mergeMap((ctx)=>middleware.pre(ctx)));
        }
        return middlewarePreObservable.pipe(rxjsStub_2.mergeMap((ctx)=>this.configuration.httpApi.send(ctx))).pipe(rxjsStub_2.mergeMap((response)=>{
            let middlewarePostObservable = rxjsStub_1.of(response);
            for (let middleware of this.configuration.middleware){
                middlewarePostObservable = middlewarePostObservable.pipe(rxjsStub_2.mergeMap((rsp)=>middleware.post(rsp)));
            }
            return middlewarePostObservable.pipe(rxjsStub_2.map((rsp)=>this.responseProcessor.v1StatsAppAttempts(rsp)));
        }));
    }
    v1StatsEndpointAttempts(appId, endpointId, startDate, endDate, _options) {
        const requestContextPromise = this.requestFactory.v1StatsEndpointAttempts(appId, endpointId, startDate, endDate, _options);
        let middlewarePreObservable = rxjsStub_1.from(requestContextPromise);
        for (let middleware of this.configuration.middleware){
            middlewarePreObservable = middlewarePreObservable.pipe(rxjsStub_2.mergeMap((ctx)=>middleware.pre(ctx)));
        }
        return middlewarePreObservable.pipe(rxjsStub_2.mergeMap((ctx)=>this.configuration.httpApi.send(ctx))).pipe(rxjsStub_2.mergeMap((response)=>{
            let middlewarePostObservable = rxjsStub_1.of(response);
            for (let middleware of this.configuration.middleware){
                middlewarePostObservable = middlewarePostObservable.pipe(rxjsStub_2.mergeMap((rsp)=>middleware.post(rsp)));
            }
            return middlewarePostObservable.pipe(rxjsStub_2.map((rsp)=>this.responseProcessor.v1StatsEndpointAttempts(rsp)));
        }));
    }
}
exports.ObservableStatisticsApi = ObservableStatisticsApi;
const StreamApi_1 = __turbopack_require__("[project]/node_modules/svix/dist/openapi/apis/StreamApi.js [app-route] (ecmascript)");
class ObservableStreamApi {
    constructor(configuration, requestFactory, responseProcessor){
        this.configuration = configuration;
        this.requestFactory = requestFactory || new StreamApi_1.StreamApiRequestFactory(configuration);
        this.responseProcessor = responseProcessor || new StreamApi_1.StreamApiResponseProcessor();
    }
    v1StreamCreate(streamIn, idempotencyKey, _options) {
        const requestContextPromise = this.requestFactory.v1StreamCreate(streamIn, idempotencyKey, _options);
        let middlewarePreObservable = rxjsStub_1.from(requestContextPromise);
        for (let middleware of this.configuration.middleware){
            middlewarePreObservable = middlewarePreObservable.pipe(rxjsStub_2.mergeMap((ctx)=>middleware.pre(ctx)));
        }
        return middlewarePreObservable.pipe(rxjsStub_2.mergeMap((ctx)=>this.configuration.httpApi.send(ctx))).pipe(rxjsStub_2.mergeMap((response)=>{
            let middlewarePostObservable = rxjsStub_1.of(response);
            for (let middleware of this.configuration.middleware){
                middlewarePostObservable = middlewarePostObservable.pipe(rxjsStub_2.mergeMap((rsp)=>middleware.post(rsp)));
            }
            return middlewarePostObservable.pipe(rxjsStub_2.map((rsp)=>this.responseProcessor.v1StreamCreate(rsp)));
        }));
    }
    v1StreamDelete(streamId, _options) {
        const requestContextPromise = this.requestFactory.v1StreamDelete(streamId, _options);
        let middlewarePreObservable = rxjsStub_1.from(requestContextPromise);
        for (let middleware of this.configuration.middleware){
            middlewarePreObservable = middlewarePreObservable.pipe(rxjsStub_2.mergeMap((ctx)=>middleware.pre(ctx)));
        }
        return middlewarePreObservable.pipe(rxjsStub_2.mergeMap((ctx)=>this.configuration.httpApi.send(ctx))).pipe(rxjsStub_2.mergeMap((response)=>{
            let middlewarePostObservable = rxjsStub_1.of(response);
            for (let middleware of this.configuration.middleware){
                middlewarePostObservable = middlewarePostObservable.pipe(rxjsStub_2.mergeMap((rsp)=>middleware.post(rsp)));
            }
            return middlewarePostObservable.pipe(rxjsStub_2.map((rsp)=>this.responseProcessor.v1StreamDelete(rsp)));
        }));
    }
    v1StreamGet(streamId, _options) {
        const requestContextPromise = this.requestFactory.v1StreamGet(streamId, _options);
        let middlewarePreObservable = rxjsStub_1.from(requestContextPromise);
        for (let middleware of this.configuration.middleware){
            middlewarePreObservable = middlewarePreObservable.pipe(rxjsStub_2.mergeMap((ctx)=>middleware.pre(ctx)));
        }
        return middlewarePreObservable.pipe(rxjsStub_2.mergeMap((ctx)=>this.configuration.httpApi.send(ctx))).pipe(rxjsStub_2.mergeMap((response)=>{
            let middlewarePostObservable = rxjsStub_1.of(response);
            for (let middleware of this.configuration.middleware){
                middlewarePostObservable = middlewarePostObservable.pipe(rxjsStub_2.mergeMap((rsp)=>middleware.post(rsp)));
            }
            return middlewarePostObservable.pipe(rxjsStub_2.map((rsp)=>this.responseProcessor.v1StreamGet(rsp)));
        }));
    }
    v1StreamList(limit, iterator, order, _options) {
        const requestContextPromise = this.requestFactory.v1StreamList(limit, iterator, order, _options);
        let middlewarePreObservable = rxjsStub_1.from(requestContextPromise);
        for (let middleware of this.configuration.middleware){
            middlewarePreObservable = middlewarePreObservable.pipe(rxjsStub_2.mergeMap((ctx)=>middleware.pre(ctx)));
        }
        return middlewarePreObservable.pipe(rxjsStub_2.mergeMap((ctx)=>this.configuration.httpApi.send(ctx))).pipe(rxjsStub_2.mergeMap((response)=>{
            let middlewarePostObservable = rxjsStub_1.of(response);
            for (let middleware of this.configuration.middleware){
                middlewarePostObservable = middlewarePostObservable.pipe(rxjsStub_2.mergeMap((rsp)=>middleware.post(rsp)));
            }
            return middlewarePostObservable.pipe(rxjsStub_2.map((rsp)=>this.responseProcessor.v1StreamList(rsp)));
        }));
    }
    v1StreamPatch(streamId, streamPatch, _options) {
        const requestContextPromise = this.requestFactory.v1StreamPatch(streamId, streamPatch, _options);
        let middlewarePreObservable = rxjsStub_1.from(requestContextPromise);
        for (let middleware of this.configuration.middleware){
            middlewarePreObservable = middlewarePreObservable.pipe(rxjsStub_2.mergeMap((ctx)=>middleware.pre(ctx)));
        }
        return middlewarePreObservable.pipe(rxjsStub_2.mergeMap((ctx)=>this.configuration.httpApi.send(ctx))).pipe(rxjsStub_2.mergeMap((response)=>{
            let middlewarePostObservable = rxjsStub_1.of(response);
            for (let middleware of this.configuration.middleware){
                middlewarePostObservable = middlewarePostObservable.pipe(rxjsStub_2.mergeMap((rsp)=>middleware.post(rsp)));
            }
            return middlewarePostObservable.pipe(rxjsStub_2.map((rsp)=>this.responseProcessor.v1StreamPatch(rsp)));
        }));
    }
    v1StreamUpdate(streamId, streamIn, _options) {
        const requestContextPromise = this.requestFactory.v1StreamUpdate(streamId, streamIn, _options);
        let middlewarePreObservable = rxjsStub_1.from(requestContextPromise);
        for (let middleware of this.configuration.middleware){
            middlewarePreObservable = middlewarePreObservable.pipe(rxjsStub_2.mergeMap((ctx)=>middleware.pre(ctx)));
        }
        return middlewarePreObservable.pipe(rxjsStub_2.mergeMap((ctx)=>this.configuration.httpApi.send(ctx))).pipe(rxjsStub_2.mergeMap((response)=>{
            let middlewarePostObservable = rxjsStub_1.of(response);
            for (let middleware of this.configuration.middleware){
                middlewarePostObservable = middlewarePostObservable.pipe(rxjsStub_2.mergeMap((rsp)=>middleware.post(rsp)));
            }
            return middlewarePostObservable.pipe(rxjsStub_2.map((rsp)=>this.responseProcessor.v1StreamUpdate(rsp)));
        }));
    }
}
exports.ObservableStreamApi = ObservableStreamApi;
const TransformationTemplateApi_1 = __turbopack_require__("[project]/node_modules/svix/dist/openapi/apis/TransformationTemplateApi.js [app-route] (ecmascript)");
class ObservableTransformationTemplateApi {
    constructor(configuration, requestFactory, responseProcessor){
        this.configuration = configuration;
        this.requestFactory = requestFactory || new TransformationTemplateApi_1.TransformationTemplateApiRequestFactory(configuration);
        this.responseProcessor = responseProcessor || new TransformationTemplateApi_1.TransformationTemplateApiResponseProcessor();
    }
    v1EndpointUpdateHubspotOauthConfig(appId, endpointId, hubspotOauthConfigIn, _options) {
        const requestContextPromise = this.requestFactory.v1EndpointUpdateHubspotOauthConfig(appId, endpointId, hubspotOauthConfigIn, _options);
        let middlewarePreObservable = rxjsStub_1.from(requestContextPromise);
        for (let middleware of this.configuration.middleware){
            middlewarePreObservable = middlewarePreObservable.pipe(rxjsStub_2.mergeMap((ctx)=>middleware.pre(ctx)));
        }
        return middlewarePreObservable.pipe(rxjsStub_2.mergeMap((ctx)=>this.configuration.httpApi.send(ctx))).pipe(rxjsStub_2.mergeMap((response)=>{
            let middlewarePostObservable = rxjsStub_1.of(response);
            for (let middleware of this.configuration.middleware){
                middlewarePostObservable = middlewarePostObservable.pipe(rxjsStub_2.mergeMap((rsp)=>middleware.post(rsp)));
            }
            return middlewarePostObservable.pipe(rxjsStub_2.map((rsp)=>this.responseProcessor.v1EndpointUpdateHubspotOauthConfig(rsp)));
        }));
    }
    v1TransformationTemplateCreate(templateIn, idempotencyKey, _options) {
        const requestContextPromise = this.requestFactory.v1TransformationTemplateCreate(templateIn, idempotencyKey, _options);
        let middlewarePreObservable = rxjsStub_1.from(requestContextPromise);
        for (let middleware of this.configuration.middleware){
            middlewarePreObservable = middlewarePreObservable.pipe(rxjsStub_2.mergeMap((ctx)=>middleware.pre(ctx)));
        }
        return middlewarePreObservable.pipe(rxjsStub_2.mergeMap((ctx)=>this.configuration.httpApi.send(ctx))).pipe(rxjsStub_2.mergeMap((response)=>{
            let middlewarePostObservable = rxjsStub_1.of(response);
            for (let middleware of this.configuration.middleware){
                middlewarePostObservable = middlewarePostObservable.pipe(rxjsStub_2.mergeMap((rsp)=>middleware.post(rsp)));
            }
            return middlewarePostObservable.pipe(rxjsStub_2.map((rsp)=>this.responseProcessor.v1TransformationTemplateCreate(rsp)));
        }));
    }
    v1TransformationTemplateDelete(transformationTemplateId, _options) {
        const requestContextPromise = this.requestFactory.v1TransformationTemplateDelete(transformationTemplateId, _options);
        let middlewarePreObservable = rxjsStub_1.from(requestContextPromise);
        for (let middleware of this.configuration.middleware){
            middlewarePreObservable = middlewarePreObservable.pipe(rxjsStub_2.mergeMap((ctx)=>middleware.pre(ctx)));
        }
        return middlewarePreObservable.pipe(rxjsStub_2.mergeMap((ctx)=>this.configuration.httpApi.send(ctx))).pipe(rxjsStub_2.mergeMap((response)=>{
            let middlewarePostObservable = rxjsStub_1.of(response);
            for (let middleware of this.configuration.middleware){
                middlewarePostObservable = middlewarePostObservable.pipe(rxjsStub_2.mergeMap((rsp)=>middleware.post(rsp)));
            }
            return middlewarePostObservable.pipe(rxjsStub_2.map((rsp)=>this.responseProcessor.v1TransformationTemplateDelete(rsp)));
        }));
    }
    v1TransformationTemplateGenerate(generateIn, idempotencyKey, _options) {
        const requestContextPromise = this.requestFactory.v1TransformationTemplateGenerate(generateIn, idempotencyKey, _options);
        let middlewarePreObservable = rxjsStub_1.from(requestContextPromise);
        for (let middleware of this.configuration.middleware){
            middlewarePreObservable = middlewarePreObservable.pipe(rxjsStub_2.mergeMap((ctx)=>middleware.pre(ctx)));
        }
        return middlewarePreObservable.pipe(rxjsStub_2.mergeMap((ctx)=>this.configuration.httpApi.send(ctx))).pipe(rxjsStub_2.mergeMap((response)=>{
            let middlewarePostObservable = rxjsStub_1.of(response);
            for (let middleware of this.configuration.middleware){
                middlewarePostObservable = middlewarePostObservable.pipe(rxjsStub_2.mergeMap((rsp)=>middleware.post(rsp)));
            }
            return middlewarePostObservable.pipe(rxjsStub_2.map((rsp)=>this.responseProcessor.v1TransformationTemplateGenerate(rsp)));
        }));
    }
    v1TransformationTemplateGet(transformationTemplateId, _options) {
        const requestContextPromise = this.requestFactory.v1TransformationTemplateGet(transformationTemplateId, _options);
        let middlewarePreObservable = rxjsStub_1.from(requestContextPromise);
        for (let middleware of this.configuration.middleware){
            middlewarePreObservable = middlewarePreObservable.pipe(rxjsStub_2.mergeMap((ctx)=>middleware.pre(ctx)));
        }
        return middlewarePreObservable.pipe(rxjsStub_2.mergeMap((ctx)=>this.configuration.httpApi.send(ctx))).pipe(rxjsStub_2.mergeMap((response)=>{
            let middlewarePostObservable = rxjsStub_1.of(response);
            for (let middleware of this.configuration.middleware){
                middlewarePostObservable = middlewarePostObservable.pipe(rxjsStub_2.mergeMap((rsp)=>middleware.post(rsp)));
            }
            return middlewarePostObservable.pipe(rxjsStub_2.map((rsp)=>this.responseProcessor.v1TransformationTemplateGet(rsp)));
        }));
    }
    v1TransformationTemplateList(limit, iterator, order, _options) {
        const requestContextPromise = this.requestFactory.v1TransformationTemplateList(limit, iterator, order, _options);
        let middlewarePreObservable = rxjsStub_1.from(requestContextPromise);
        for (let middleware of this.configuration.middleware){
            middlewarePreObservable = middlewarePreObservable.pipe(rxjsStub_2.mergeMap((ctx)=>middleware.pre(ctx)));
        }
        return middlewarePreObservable.pipe(rxjsStub_2.mergeMap((ctx)=>this.configuration.httpApi.send(ctx))).pipe(rxjsStub_2.mergeMap((response)=>{
            let middlewarePostObservable = rxjsStub_1.of(response);
            for (let middleware of this.configuration.middleware){
                middlewarePostObservable = middlewarePostObservable.pipe(rxjsStub_2.mergeMap((rsp)=>middleware.post(rsp)));
            }
            return middlewarePostObservable.pipe(rxjsStub_2.map((rsp)=>this.responseProcessor.v1TransformationTemplateList(rsp)));
        }));
    }
    v1TransformationTemplateOauthDiscord(oAuthPayloadIn, idempotencyKey, _options) {
        const requestContextPromise = this.requestFactory.v1TransformationTemplateOauthDiscord(oAuthPayloadIn, idempotencyKey, _options);
        let middlewarePreObservable = rxjsStub_1.from(requestContextPromise);
        for (let middleware of this.configuration.middleware){
            middlewarePreObservable = middlewarePreObservable.pipe(rxjsStub_2.mergeMap((ctx)=>middleware.pre(ctx)));
        }
        return middlewarePreObservable.pipe(rxjsStub_2.mergeMap((ctx)=>this.configuration.httpApi.send(ctx))).pipe(rxjsStub_2.mergeMap((response)=>{
            let middlewarePostObservable = rxjsStub_1.of(response);
            for (let middleware of this.configuration.middleware){
                middlewarePostObservable = middlewarePostObservable.pipe(rxjsStub_2.mergeMap((rsp)=>middleware.post(rsp)));
            }
            return middlewarePostObservable.pipe(rxjsStub_2.map((rsp)=>this.responseProcessor.v1TransformationTemplateOauthDiscord(rsp)));
        }));
    }
    v1TransformationTemplateOauthHubspot(oAuthPayloadIn, idempotencyKey, _options) {
        const requestContextPromise = this.requestFactory.v1TransformationTemplateOauthHubspot(oAuthPayloadIn, idempotencyKey, _options);
        let middlewarePreObservable = rxjsStub_1.from(requestContextPromise);
        for (let middleware of this.configuration.middleware){
            middlewarePreObservable = middlewarePreObservable.pipe(rxjsStub_2.mergeMap((ctx)=>middleware.pre(ctx)));
        }
        return middlewarePreObservable.pipe(rxjsStub_2.mergeMap((ctx)=>this.configuration.httpApi.send(ctx))).pipe(rxjsStub_2.mergeMap((response)=>{
            let middlewarePostObservable = rxjsStub_1.of(response);
            for (let middleware of this.configuration.middleware){
                middlewarePostObservable = middlewarePostObservable.pipe(rxjsStub_2.mergeMap((rsp)=>middleware.post(rsp)));
            }
            return middlewarePostObservable.pipe(rxjsStub_2.map((rsp)=>this.responseProcessor.v1TransformationTemplateOauthHubspot(rsp)));
        }));
    }
    v1TransformationTemplateOauthSlack(oAuthPayloadIn, idempotencyKey, _options) {
        const requestContextPromise = this.requestFactory.v1TransformationTemplateOauthSlack(oAuthPayloadIn, idempotencyKey, _options);
        let middlewarePreObservable = rxjsStub_1.from(requestContextPromise);
        for (let middleware of this.configuration.middleware){
            middlewarePreObservable = middlewarePreObservable.pipe(rxjsStub_2.mergeMap((ctx)=>middleware.pre(ctx)));
        }
        return middlewarePreObservable.pipe(rxjsStub_2.mergeMap((ctx)=>this.configuration.httpApi.send(ctx))).pipe(rxjsStub_2.mergeMap((response)=>{
            let middlewarePostObservable = rxjsStub_1.of(response);
            for (let middleware of this.configuration.middleware){
                middlewarePostObservable = middlewarePostObservable.pipe(rxjsStub_2.mergeMap((rsp)=>middleware.post(rsp)));
            }
            return middlewarePostObservable.pipe(rxjsStub_2.map((rsp)=>this.responseProcessor.v1TransformationTemplateOauthSlack(rsp)));
        }));
    }
    v1TransformationTemplatePatch(transformationTemplateId, templatePatch, _options) {
        const requestContextPromise = this.requestFactory.v1TransformationTemplatePatch(transformationTemplateId, templatePatch, _options);
        let middlewarePreObservable = rxjsStub_1.from(requestContextPromise);
        for (let middleware of this.configuration.middleware){
            middlewarePreObservable = middlewarePreObservable.pipe(rxjsStub_2.mergeMap((ctx)=>middleware.pre(ctx)));
        }
        return middlewarePreObservable.pipe(rxjsStub_2.mergeMap((ctx)=>this.configuration.httpApi.send(ctx))).pipe(rxjsStub_2.mergeMap((response)=>{
            let middlewarePostObservable = rxjsStub_1.of(response);
            for (let middleware of this.configuration.middleware){
                middlewarePostObservable = middlewarePostObservable.pipe(rxjsStub_2.mergeMap((rsp)=>middleware.post(rsp)));
            }
            return middlewarePostObservable.pipe(rxjsStub_2.map((rsp)=>this.responseProcessor.v1TransformationTemplatePatch(rsp)));
        }));
    }
    v1TransformationTemplateSimulate(transformationSimulateIn, idempotencyKey, _options) {
        const requestContextPromise = this.requestFactory.v1TransformationTemplateSimulate(transformationSimulateIn, idempotencyKey, _options);
        let middlewarePreObservable = rxjsStub_1.from(requestContextPromise);
        for (let middleware of this.configuration.middleware){
            middlewarePreObservable = middlewarePreObservable.pipe(rxjsStub_2.mergeMap((ctx)=>middleware.pre(ctx)));
        }
        return middlewarePreObservable.pipe(rxjsStub_2.mergeMap((ctx)=>this.configuration.httpApi.send(ctx))).pipe(rxjsStub_2.mergeMap((response)=>{
            let middlewarePostObservable = rxjsStub_1.of(response);
            for (let middleware of this.configuration.middleware){
                middlewarePostObservable = middlewarePostObservable.pipe(rxjsStub_2.mergeMap((rsp)=>middleware.post(rsp)));
            }
            return middlewarePostObservable.pipe(rxjsStub_2.map((rsp)=>this.responseProcessor.v1TransformationTemplateSimulate(rsp)));
        }));
    }
    v1TransformationTemplateUpdate(transformationTemplateId, templateUpdate, _options) {
        const requestContextPromise = this.requestFactory.v1TransformationTemplateUpdate(transformationTemplateId, templateUpdate, _options);
        let middlewarePreObservable = rxjsStub_1.from(requestContextPromise);
        for (let middleware of this.configuration.middleware){
            middlewarePreObservable = middlewarePreObservable.pipe(rxjsStub_2.mergeMap((ctx)=>middleware.pre(ctx)));
        }
        return middlewarePreObservable.pipe(rxjsStub_2.mergeMap((ctx)=>this.configuration.httpApi.send(ctx))).pipe(rxjsStub_2.mergeMap((response)=>{
            let middlewarePostObservable = rxjsStub_1.of(response);
            for (let middleware of this.configuration.middleware){
                middlewarePostObservable = middlewarePostObservable.pipe(rxjsStub_2.mergeMap((rsp)=>middleware.post(rsp)));
            }
            return middlewarePostObservable.pipe(rxjsStub_2.map((rsp)=>this.responseProcessor.v1TransformationTemplateUpdate(rsp)));
        }));
    }
}
exports.ObservableTransformationTemplateApi = ObservableTransformationTemplateApi; //# sourceMappingURL=ObservableAPI.js.map

}.call(this) }),
"[project]/node_modules/svix/dist/openapi/types/ObjectParamAPI.js [app-route] (ecmascript)": (function({ r: __turbopack_require__, f: __turbopack_module_context__, i: __turbopack_import__, s: __turbopack_esm__, v: __turbopack_export_value__, n: __turbopack_export_namespace__, c: __turbopack_cache__, M: __turbopack_modules__, l: __turbopack_load__, j: __turbopack_dynamic__, P: __turbopack_resolve_absolute_path__, U: __turbopack_relative_url__, R: __turbopack_resolve_module_id_path__, g: global, __dirname, x: __turbopack_external_require__, y: __turbopack_external_import__, m: module, e: exports, t: require }) { !function() {

"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.ObjectTransformationTemplateApi = exports.ObjectStreamApi = exports.ObjectStatisticsApi = exports.ObjectSinkApi = exports.ObjectMessageAttemptApi = exports.ObjectMessageApi = exports.ObjectIntegrationApi = exports.ObjectInboundApi = exports.ObjectHealthApi = exports.ObjectEventsApi = exports.ObjectEventTypeApi = exports.ObjectEnvironmentSettingsApi = exports.ObjectEnvironmentApi = exports.ObjectEndpointApi = exports.ObjectBroadcastApi = exports.ObjectBackgroundTasksApi = exports.ObjectAuthenticationApi = exports.ObjectApplicationApi = void 0;
const ObservableAPI_1 = __turbopack_require__("[project]/node_modules/svix/dist/openapi/types/ObservableAPI.js [app-route] (ecmascript)");
class ObjectApplicationApi {
    constructor(configuration, requestFactory, responseProcessor){
        this.api = new ObservableAPI_1.ObservableApplicationApi(configuration, requestFactory, responseProcessor);
    }
    getAppUsageStatsApiV1AppStatsUsageGet(param, options) {
        return this.api.getAppUsageStatsApiV1AppStatsUsageGet(param.since, param.until, param.limit, param.iterator, options).toPromise();
    }
    v1ApplicationCreate(param, options) {
        return this.api.v1ApplicationCreate(param.applicationIn, param.getIfExists, param.idempotencyKey, options).toPromise();
    }
    v1ApplicationDelete(param, options) {
        return this.api.v1ApplicationDelete(param.appId, options).toPromise();
    }
    v1ApplicationGet(param, options) {
        return this.api.v1ApplicationGet(param.appId, options).toPromise();
    }
    v1ApplicationGetStats(param, options) {
        return this.api.v1ApplicationGetStats(param.since, param.until, param.appId, options).toPromise();
    }
    v1ApplicationList(param, options) {
        return this.api.v1ApplicationList(param.limit, param.iterator, param.order, options).toPromise();
    }
    v1ApplicationPatch(param, options) {
        return this.api.v1ApplicationPatch(param.appId, param.applicationPatch, options).toPromise();
    }
    v1ApplicationUpdate(param, options) {
        return this.api.v1ApplicationUpdate(param.appId, param.applicationIn, options).toPromise();
    }
}
exports.ObjectApplicationApi = ObjectApplicationApi;
const ObservableAPI_2 = __turbopack_require__("[project]/node_modules/svix/dist/openapi/types/ObservableAPI.js [app-route] (ecmascript)");
class ObjectAuthenticationApi {
    constructor(configuration, requestFactory, responseProcessor){
        this.api = new ObservableAPI_2.ObservableAuthenticationApi(configuration, requestFactory, responseProcessor);
    }
    v1AuthenticationAppPortalAccess(param, options) {
        return this.api.v1AuthenticationAppPortalAccess(param.appId, param.appPortalAccessIn, param.idempotencyKey, options).toPromise();
    }
    v1AuthenticationCreateMessageToken(param, options) {
        return this.api.v1AuthenticationCreateMessageToken(param.appId, param.createMessageTokenIn, param.idempotencyKey, options).toPromise();
    }
    v1AuthenticationDashboardAccess(param, options) {
        return this.api.v1AuthenticationDashboardAccess(param.appId, param.idempotencyKey, options).toPromise();
    }
    v1AuthenticationExchangeOneTimeToken(param, options) {
        return this.api.v1AuthenticationExchangeOneTimeToken(param.oneTimeTokenIn, param.idempotencyKey, options).toPromise();
    }
    v1AuthenticationExpireAll(param, options) {
        return this.api.v1AuthenticationExpireAll(param.appId, param.applicationTokenExpireIn, param.idempotencyKey, options).toPromise();
    }
    v1AuthenticationLogout(param, options) {
        return this.api.v1AuthenticationLogout(param.idempotencyKey, options).toPromise();
    }
}
exports.ObjectAuthenticationApi = ObjectAuthenticationApi;
const ObservableAPI_3 = __turbopack_require__("[project]/node_modules/svix/dist/openapi/types/ObservableAPI.js [app-route] (ecmascript)");
class ObjectBackgroundTasksApi {
    constructor(configuration, requestFactory, responseProcessor){
        this.api = new ObservableAPI_3.ObservableBackgroundTasksApi(configuration, requestFactory, responseProcessor);
    }
    getBackgroundTask(param, options) {
        return this.api.getBackgroundTask(param.taskId, options).toPromise();
    }
    listBackgroundTasks(param, options) {
        return this.api.listBackgroundTasks(param.status, param.task, param.limit, param.iterator, param.order, options).toPromise();
    }
}
exports.ObjectBackgroundTasksApi = ObjectBackgroundTasksApi;
const ObservableAPI_4 = __turbopack_require__("[project]/node_modules/svix/dist/openapi/types/ObservableAPI.js [app-route] (ecmascript)");
class ObjectBroadcastApi {
    constructor(configuration, requestFactory, responseProcessor){
        this.api = new ObservableAPI_4.ObservableBroadcastApi(configuration, requestFactory, responseProcessor);
    }
    createBroadcastMessage(param, options) {
        return this.api.createBroadcastMessage(param.messageBroadcastIn, param.idempotencyKey, options).toPromise();
    }
}
exports.ObjectBroadcastApi = ObjectBroadcastApi;
const ObservableAPI_5 = __turbopack_require__("[project]/node_modules/svix/dist/openapi/types/ObservableAPI.js [app-route] (ecmascript)");
class ObjectEndpointApi {
    constructor(configuration, requestFactory, responseProcessor){
        this.api = new ObservableAPI_5.ObservableEndpointApi(configuration, requestFactory, responseProcessor);
    }
    v1EndpointCreate(param, options) {
        return this.api.v1EndpointCreate(param.appId, param.endpointIn, param.idempotencyKey, options).toPromise();
    }
    v1EndpointDelete(param, options) {
        return this.api.v1EndpointDelete(param.appId, param.endpointId, options).toPromise();
    }
    v1EndpointDeleteMtlsConfig(param, options) {
        return this.api.v1EndpointDeleteMtlsConfig(param.appId, param.endpointId, options).toPromise();
    }
    v1EndpointDeleteOauthConfig(param, options) {
        return this.api.v1EndpointDeleteOauthConfig(param.appId, param.endpointId, options).toPromise();
    }
    v1EndpointGet(param, options) {
        return this.api.v1EndpointGet(param.appId, param.endpointId, options).toPromise();
    }
    v1EndpointGetHeaders(param, options) {
        return this.api.v1EndpointGetHeaders(param.appId, param.endpointId, options).toPromise();
    }
    v1EndpointGetSecret(param, options) {
        return this.api.v1EndpointGetSecret(param.appId, param.endpointId, options).toPromise();
    }
    v1EndpointGetStats(param, options) {
        return this.api.v1EndpointGetStats(param.appId, param.endpointId, param.since, param.until, options).toPromise();
    }
    v1EndpointList(param, options) {
        return this.api.v1EndpointList(param.appId, param.limit, param.iterator, param.order, options).toPromise();
    }
    v1EndpointPatch(param, options) {
        return this.api.v1EndpointPatch(param.appId, param.endpointId, param.endpointPatch, options).toPromise();
    }
    v1EndpointPatchHeaders(param, options) {
        return this.api.v1EndpointPatchHeaders(param.appId, param.endpointId, param.endpointHeadersPatchIn, options).toPromise();
    }
    v1EndpointRecover(param, options) {
        return this.api.v1EndpointRecover(param.appId, param.endpointId, param.recoverIn, param.idempotencyKey, options).toPromise();
    }
    v1EndpointReplay(param, options) {
        return this.api.v1EndpointReplay(param.appId, param.endpointId, param.replayIn, param.idempotencyKey, options).toPromise();
    }
    v1EndpointRotateSecret(param, options) {
        return this.api.v1EndpointRotateSecret(param.appId, param.endpointId, param.endpointSecretRotateIn, param.idempotencyKey, options).toPromise();
    }
    v1EndpointSendExample(param, options) {
        return this.api.v1EndpointSendExample(param.appId, param.endpointId, param.eventExampleIn, param.idempotencyKey, options).toPromise();
    }
    v1EndpointTransformationGet(param, options) {
        return this.api.v1EndpointTransformationGet(param.appId, param.endpointId, options).toPromise();
    }
    v1EndpointTransformationPartialUpdate(param, options) {
        return this.api.v1EndpointTransformationPartialUpdate(param.appId, param.endpointId, param.endpointTransformationIn, options).toPromise();
    }
    v1EndpointTransformationSimulate(param, options) {
        return this.api.v1EndpointTransformationSimulate(param.appId, param.endpointId, param.endpointTransformationSimulateIn, param.idempotencyKey, options).toPromise();
    }
    v1EndpointUpdate(param, options) {
        return this.api.v1EndpointUpdate(param.appId, param.endpointId, param.endpointUpdate, options).toPromise();
    }
    v1EndpointUpdateHeaders(param, options) {
        return this.api.v1EndpointUpdateHeaders(param.appId, param.endpointId, param.endpointHeadersIn, options).toPromise();
    }
    v1EndpointUpdateMtlsConfig(param, options) {
        return this.api.v1EndpointUpdateMtlsConfig(param.appId, param.endpointId, param.endpointMtlsConfigIn, options).toPromise();
    }
    v1EndpointUpdateOauthConfig(param, options) {
        return this.api.v1EndpointUpdateOauthConfig(param.appId, param.endpointId, param.endpointOauthConfigIn, options).toPromise();
    }
    v1SinkCreate(param, options) {
        return this.api.v1SinkCreate(param.appId, param.sinkIn, param.idempotencyKey, options).toPromise();
    }
    v1SinkGet(param, options) {
        return this.api.v1SinkGet(param.appId, param.sinkId, options).toPromise();
    }
    v1SinkList(param, options) {
        return this.api.v1SinkList(param.appId, param.limit, param.iterator, param.order, options).toPromise();
    }
}
exports.ObjectEndpointApi = ObjectEndpointApi;
const ObservableAPI_6 = __turbopack_require__("[project]/node_modules/svix/dist/openapi/types/ObservableAPI.js [app-route] (ecmascript)");
class ObjectEnvironmentApi {
    constructor(configuration, requestFactory, responseProcessor){
        this.api = new ObservableAPI_6.ObservableEnvironmentApi(configuration, requestFactory, responseProcessor);
    }
    v1EnvironmentExport(param, options) {
        return this.api.v1EnvironmentExport(param.idempotencyKey, options).toPromise();
    }
    v1EnvironmentExportGet(param, options) {
        return this.api.v1EnvironmentExportGet(options).toPromise();
    }
    v1EnvironmentImport(param, options) {
        return this.api.v1EnvironmentImport(param.environmentIn, param.idempotencyKey, options).toPromise();
    }
}
exports.ObjectEnvironmentApi = ObjectEnvironmentApi;
const ObservableAPI_7 = __turbopack_require__("[project]/node_modules/svix/dist/openapi/types/ObservableAPI.js [app-route] (ecmascript)");
class ObjectEnvironmentSettingsApi {
    constructor(configuration, requestFactory, responseProcessor){
        this.api = new ObservableAPI_7.ObservableEnvironmentSettingsApi(configuration, requestFactory, responseProcessor);
    }
    v1EnvironmentGetSettings(param, options) {
        return this.api.v1EnvironmentGetSettings(options).toPromise();
    }
}
exports.ObjectEnvironmentSettingsApi = ObjectEnvironmentSettingsApi;
const ObservableAPI_8 = __turbopack_require__("[project]/node_modules/svix/dist/openapi/types/ObservableAPI.js [app-route] (ecmascript)");
class ObjectEventTypeApi {
    constructor(configuration, requestFactory, responseProcessor){
        this.api = new ObservableAPI_8.ObservableEventTypeApi(configuration, requestFactory, responseProcessor);
    }
    v1EventTypeCreate(param, options) {
        return this.api.v1EventTypeCreate(param.eventTypeIn, param.idempotencyKey, options).toPromise();
    }
    v1EventTypeDelete(param, options) {
        return this.api.v1EventTypeDelete(param.eventTypeName, param.expunge, options).toPromise();
    }
    v1EventTypeExportOpenapi(param, options) {
        return this.api.v1EventTypeExportOpenapi(param.idempotencyKey, options).toPromise();
    }
    v1EventTypeGenerateExample(param, options) {
        return this.api.v1EventTypeGenerateExample(param.eventTypeSchemaIn, param.idempotencyKey, options).toPromise();
    }
    v1EventTypeGet(param, options) {
        return this.api.v1EventTypeGet(param.eventTypeName, options).toPromise();
    }
    v1EventTypeGetRetrySchedule(param, options) {
        return this.api.v1EventTypeGetRetrySchedule(param.eventTypeName, options).toPromise();
    }
    v1EventTypeImportOpenapi(param, options) {
        return this.api.v1EventTypeImportOpenapi(param.eventTypeImportOpenApiIn, param.idempotencyKey, options).toPromise();
    }
    v1EventTypeList(param, options) {
        return this.api.v1EventTypeList(param.limit, param.iterator, param.order, param.includeArchived, param.withContent, options).toPromise();
    }
    v1EventTypePatch(param, options) {
        return this.api.v1EventTypePatch(param.eventTypeName, param.eventTypePatch, options).toPromise();
    }
    v1EventTypeUpdate(param, options) {
        return this.api.v1EventTypeUpdate(param.eventTypeName, param.eventTypeUpdate, options).toPromise();
    }
    v1EventTypeUpdateRetrySchedule(param, options) {
        return this.api.v1EventTypeUpdateRetrySchedule(param.eventTypeName, param.retryScheduleInOut, options).toPromise();
    }
}
exports.ObjectEventTypeApi = ObjectEventTypeApi;
const ObservableAPI_9 = __turbopack_require__("[project]/node_modules/svix/dist/openapi/types/ObservableAPI.js [app-route] (ecmascript)");
class ObjectEventsApi {
    constructor(configuration, requestFactory, responseProcessor){
        this.api = new ObservableAPI_9.ObservableEventsApi(configuration, requestFactory, responseProcessor);
    }
    v1Events(param, options) {
        return this.api.v1Events(param.limit, param.iterator, param.eventTypes, param.channels, param.after, options).toPromise();
    }
}
exports.ObjectEventsApi = ObjectEventsApi;
const ObservableAPI_10 = __turbopack_require__("[project]/node_modules/svix/dist/openapi/types/ObservableAPI.js [app-route] (ecmascript)");
class ObjectHealthApi {
    constructor(configuration, requestFactory, responseProcessor){
        this.api = new ObservableAPI_10.ObservableHealthApi(configuration, requestFactory, responseProcessor);
    }
    v1HealthGet(param, options) {
        return this.api.v1HealthGet(options).toPromise();
    }
}
exports.ObjectHealthApi = ObjectHealthApi;
const ObservableAPI_11 = __turbopack_require__("[project]/node_modules/svix/dist/openapi/types/ObservableAPI.js [app-route] (ecmascript)");
class ObjectInboundApi {
    constructor(configuration, requestFactory, responseProcessor){
        this.api = new ObservableAPI_11.ObservableInboundApi(configuration, requestFactory, responseProcessor);
    }
    v1InboundMsg(param, options) {
        return this.api.v1InboundMsg(param.appId, param.inboundToken, param.body, param.eventType, param.idempotencyKey, options).toPromise();
    }
    v1InboundRotateUrl(param, options) {
        return this.api.v1InboundRotateUrl(param.appId, param.idempotencyKey, options).toPromise();
    }
}
exports.ObjectInboundApi = ObjectInboundApi;
const ObservableAPI_12 = __turbopack_require__("[project]/node_modules/svix/dist/openapi/types/ObservableAPI.js [app-route] (ecmascript)");
class ObjectIntegrationApi {
    constructor(configuration, requestFactory, responseProcessor){
        this.api = new ObservableAPI_12.ObservableIntegrationApi(configuration, requestFactory, responseProcessor);
    }
    v1IntegrationCreate(param, options) {
        return this.api.v1IntegrationCreate(param.appId, param.integrationIn, param.idempotencyKey, options).toPromise();
    }
    v1IntegrationDelete(param, options) {
        return this.api.v1IntegrationDelete(param.appId, param.integId, options).toPromise();
    }
    v1IntegrationGet(param, options) {
        return this.api.v1IntegrationGet(param.appId, param.integId, options).toPromise();
    }
    v1IntegrationGetKey(param, options) {
        return this.api.v1IntegrationGetKey(param.appId, param.integId, options).toPromise();
    }
    v1IntegrationList(param, options) {
        return this.api.v1IntegrationList(param.appId, param.limit, param.iterator, param.order, options).toPromise();
    }
    v1IntegrationRotateKey(param, options) {
        return this.api.v1IntegrationRotateKey(param.appId, param.integId, param.idempotencyKey, options).toPromise();
    }
    v1IntegrationUpdate(param, options) {
        return this.api.v1IntegrationUpdate(param.appId, param.integId, param.integrationUpdate, options).toPromise();
    }
}
exports.ObjectIntegrationApi = ObjectIntegrationApi;
const ObservableAPI_13 = __turbopack_require__("[project]/node_modules/svix/dist/openapi/types/ObservableAPI.js [app-route] (ecmascript)");
class ObjectMessageApi {
    constructor(configuration, requestFactory, responseProcessor){
        this.api = new ObservableAPI_13.ObservableMessageApi(configuration, requestFactory, responseProcessor);
    }
    createMessageAttemptForEndpoint(param, options) {
        return this.api.createMessageAttemptForEndpoint(param.appId, param.endpointId, param.messageIn, param.idempotencyKey, options).toPromise();
    }
    v1MessageCreate(param, options) {
        return this.api.v1MessageCreate(param.appId, param.messageIn, param.withContent, param.idempotencyKey, options).toPromise();
    }
    v1MessageEvents(param, options) {
        return this.api.v1MessageEvents(param.appId, param.limit, param.iterator, param.eventTypes, param.channels, param.after, options).toPromise();
    }
    v1MessageEventsSubscription(param, options) {
        return this.api.v1MessageEventsSubscription(param.appId, param.subscriptionId, param.limit, param.iterator, param.eventTypes, param.channels, param.after, options).toPromise();
    }
    v1MessageEventsSubscriptionCreateToken(param, options) {
        return this.api.v1MessageEventsSubscriptionCreateToken(param.appId, param.subscriptionId, param.idempotencyKey, options).toPromise();
    }
    v1MessageExpungeContent(param, options) {
        return this.api.v1MessageExpungeContent(param.appId, param.msgId, options).toPromise();
    }
    v1MessageGet(param, options) {
        return this.api.v1MessageGet(param.appId, param.msgId, param.withContent, options).toPromise();
    }
    v1MessageGetRawPayload(param, options) {
        return this.api.v1MessageGetRawPayload(param.appId, param.msgId, options).toPromise();
    }
    v1MessageList(param, options) {
        return this.api.v1MessageList(param.appId, param.limit, param.iterator, param.channel, param.before, param.after, param.withContent, param.tag, param.eventTypes, options).toPromise();
    }
}
exports.ObjectMessageApi = ObjectMessageApi;
const ObservableAPI_14 = __turbopack_require__("[project]/node_modules/svix/dist/openapi/types/ObservableAPI.js [app-route] (ecmascript)");
class ObjectMessageAttemptApi {
    constructor(configuration, requestFactory, responseProcessor){
        this.api = new ObservableAPI_14.ObservableMessageAttemptApi(configuration, requestFactory, responseProcessor);
    }
    v1MessageAttemptExpungeContent(param, options) {
        return this.api.v1MessageAttemptExpungeContent(param.appId, param.msgId, param.attemptId, options).toPromise();
    }
    v1MessageAttemptGet(param, options) {
        return this.api.v1MessageAttemptGet(param.appId, param.msgId, param.attemptId, options).toPromise();
    }
    v1MessageAttemptGetHeaders(param, options) {
        return this.api.v1MessageAttemptGetHeaders(param.appId, param.msgId, param.attemptId, options).toPromise();
    }
    v1MessageAttemptListAttemptedDestinations(param, options) {
        return this.api.v1MessageAttemptListAttemptedDestinations(param.appId, param.msgId, param.limit, param.iterator, options).toPromise();
    }
    v1MessageAttemptListAttemptedMessages(param, options) {
        return this.api.v1MessageAttemptListAttemptedMessages(param.appId, param.endpointId, param.limit, param.iterator, param.channel, param.tag, param.status, param.before, param.after, param.withContent, param.eventTypes, options).toPromise();
    }
    v1MessageAttemptListByEndpoint(param, options) {
        return this.api.v1MessageAttemptListByEndpoint(param.appId, param.endpointId, param.limit, param.iterator, param.status, param.statusCodeClass, param.channel, param.tag, param.before, param.after, param.withContent, param.withMsg, param.eventTypes, options).toPromise();
    }
    v1MessageAttemptListByEndpointDeprecated(param, options) {
        return this.api.v1MessageAttemptListByEndpointDeprecated(param.appId, param.msgId, param.endpointId, param.limit, param.iterator, param.channel, param.tag, param.status, param.before, param.after, param.eventTypes, options).toPromise();
    }
    v1MessageAttemptListByMsg(param, options) {
        return this.api.v1MessageAttemptListByMsg(param.appId, param.msgId, param.limit, param.iterator, param.status, param.statusCodeClass, param.channel, param.tag, param.endpointId, param.before, param.after, param.withContent, param.eventTypes, options).toPromise();
    }
    v1MessageAttemptListByMsgDeprecated(param, options) {
        return this.api.v1MessageAttemptListByMsgDeprecated(param.appId, param.msgId, param.limit, param.iterator, param.endpointId, param.channel, param.tag, param.status, param.before, param.after, param.statusCodeClass, param.eventTypes, options).toPromise();
    }
    v1MessageAttemptResend(param, options) {
        return this.api.v1MessageAttemptResend(param.appId, param.msgId, param.endpointId, param.idempotencyKey, options).toPromise();
    }
}
exports.ObjectMessageAttemptApi = ObjectMessageAttemptApi;
const ObservableAPI_15 = __turbopack_require__("[project]/node_modules/svix/dist/openapi/types/ObservableAPI.js [app-route] (ecmascript)");
class ObjectSinkApi {
    constructor(configuration, requestFactory, responseProcessor){
        this.api = new ObservableAPI_15.ObservableSinkApi(configuration, requestFactory, responseProcessor);
    }
    v1StreamCreateEvents(param, options) {
        return this.api.v1StreamCreateEvents(param.streamId, param.createStreamIn, param.idempotencyKey, options).toPromise();
    }
    v1StreamEventsGet(param, options) {
        return this.api.v1StreamEventsGet(param.streamId, param.limit, param.iterator, param.after, options).toPromise();
    }
}
exports.ObjectSinkApi = ObjectSinkApi;
const ObservableAPI_16 = __turbopack_require__("[project]/node_modules/svix/dist/openapi/types/ObservableAPI.js [app-route] (ecmascript)");
class ObjectStatisticsApi {
    constructor(configuration, requestFactory, responseProcessor){
        this.api = new ObservableAPI_16.ObservableStatisticsApi(configuration, requestFactory, responseProcessor);
    }
    v1StatisticsAggregateAppStats(param, options) {
        return this.api.v1StatisticsAggregateAppStats(param.appUsageStatsIn, param.idempotencyKey, options).toPromise();
    }
    v1StatisticsAggregateEventTypes(param, options) {
        return this.api.v1StatisticsAggregateEventTypes(options).toPromise();
    }
    v1StatsAppAttempts(param, options) {
        return this.api.v1StatsAppAttempts(param.appId, param.startDate, param.endDate, options).toPromise();
    }
    v1StatsEndpointAttempts(param, options) {
        return this.api.v1StatsEndpointAttempts(param.appId, param.endpointId, param.startDate, param.endDate, options).toPromise();
    }
}
exports.ObjectStatisticsApi = ObjectStatisticsApi;
const ObservableAPI_17 = __turbopack_require__("[project]/node_modules/svix/dist/openapi/types/ObservableAPI.js [app-route] (ecmascript)");
class ObjectStreamApi {
    constructor(configuration, requestFactory, responseProcessor){
        this.api = new ObservableAPI_17.ObservableStreamApi(configuration, requestFactory, responseProcessor);
    }
    v1StreamCreate(param, options) {
        return this.api.v1StreamCreate(param.streamIn, param.idempotencyKey, options).toPromise();
    }
    v1StreamDelete(param, options) {
        return this.api.v1StreamDelete(param.streamId, options).toPromise();
    }
    v1StreamGet(param, options) {
        return this.api.v1StreamGet(param.streamId, options).toPromise();
    }
    v1StreamList(param, options) {
        return this.api.v1StreamList(param.limit, param.iterator, param.order, options).toPromise();
    }
    v1StreamPatch(param, options) {
        return this.api.v1StreamPatch(param.streamId, param.streamPatch, options).toPromise();
    }
    v1StreamUpdate(param, options) {
        return this.api.v1StreamUpdate(param.streamId, param.streamIn, options).toPromise();
    }
}
exports.ObjectStreamApi = ObjectStreamApi;
const ObservableAPI_18 = __turbopack_require__("[project]/node_modules/svix/dist/openapi/types/ObservableAPI.js [app-route] (ecmascript)");
class ObjectTransformationTemplateApi {
    constructor(configuration, requestFactory, responseProcessor){
        this.api = new ObservableAPI_18.ObservableTransformationTemplateApi(configuration, requestFactory, responseProcessor);
    }
    v1EndpointUpdateHubspotOauthConfig(param, options) {
        return this.api.v1EndpointUpdateHubspotOauthConfig(param.appId, param.endpointId, param.hubspotOauthConfigIn, options).toPromise();
    }
    v1TransformationTemplateCreate(param, options) {
        return this.api.v1TransformationTemplateCreate(param.templateIn, param.idempotencyKey, options).toPromise();
    }
    v1TransformationTemplateDelete(param, options) {
        return this.api.v1TransformationTemplateDelete(param.transformationTemplateId, options).toPromise();
    }
    v1TransformationTemplateGenerate(param, options) {
        return this.api.v1TransformationTemplateGenerate(param.generateIn, param.idempotencyKey, options).toPromise();
    }
    v1TransformationTemplateGet(param, options) {
        return this.api.v1TransformationTemplateGet(param.transformationTemplateId, options).toPromise();
    }
    v1TransformationTemplateList(param, options) {
        return this.api.v1TransformationTemplateList(param.limit, param.iterator, param.order, options).toPromise();
    }
    v1TransformationTemplateOauthDiscord(param, options) {
        return this.api.v1TransformationTemplateOauthDiscord(param.oAuthPayloadIn, param.idempotencyKey, options).toPromise();
    }
    v1TransformationTemplateOauthHubspot(param, options) {
        return this.api.v1TransformationTemplateOauthHubspot(param.oAuthPayloadIn, param.idempotencyKey, options).toPromise();
    }
    v1TransformationTemplateOauthSlack(param, options) {
        return this.api.v1TransformationTemplateOauthSlack(param.oAuthPayloadIn, param.idempotencyKey, options).toPromise();
    }
    v1TransformationTemplatePatch(param, options) {
        return this.api.v1TransformationTemplatePatch(param.transformationTemplateId, param.templatePatch, options).toPromise();
    }
    v1TransformationTemplateSimulate(param, options) {
        return this.api.v1TransformationTemplateSimulate(param.transformationSimulateIn, param.idempotencyKey, options).toPromise();
    }
    v1TransformationTemplateUpdate(param, options) {
        return this.api.v1TransformationTemplateUpdate(param.transformationTemplateId, param.templateUpdate, options).toPromise();
    }
}
exports.ObjectTransformationTemplateApi = ObjectTransformationTemplateApi; //# sourceMappingURL=ObjectParamAPI.js.map

}.call(this) }),

};

//# sourceMappingURL=node_modules_svix_dist_openapi_types_7caa76._.js.map