{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 4, "column": 0}, "map": {"version":3,"sources":["turbopack://[project]/node_modules/svix/src/openapi/rxjsStub.ts"],"sourcesContent":["export class Observable<T> {\n  constructor(private promise: Promise<T>) {}\n\n  toPromise() {\n    return this.promise;\n  }\n\n  pipe<S>(callback: (value: T) => S | Promise<S>): Observable<S> {\n    return new Observable(this.promise.then(callback));\n  }\n}\n\nexport function from<T>(promise: Promise<any>) {\n  return new Observable(promise);\n}\n\nexport function of<T>(value: T) {\n  return new Observable<T>(Promise.resolve(value));\n}\n\nexport function mergeMap<T, S>(callback: (value: T) => Observable<S>) {\n  return (value: T) => callback(value).toPromise();\n}\n\nexport function map(callback: any) {\n  return callback;\n}\n"],"names":[],"mappings":";;;;;AAAA,MAAa;IACX,YAAoB,OAAmB,CAAA;QAAnB,IAAA,CAAA,OAAO,GAAP;IAAsB;IAE1C,YAAS;QACP,OAAO,IAAI,CAAC,OAAO;IACrB;IAEA,KAAQ,QAAsC,EAAA;QAC5C,OAAO,IAAI,WAAW,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC;IAC1C;;AATF,QAAA,UAAA,GAAA;AAYA,SAAgB,KAAQ,OAAqB;IAC3C,OAAO,IAAI,WAAW;AACxB;AAFA,QAAA,IAAA,GAAA;AAIA,SAAgB,GAAM,KAAQ;IAC5B,OAAO,IAAI,WAAc,QAAQ,OAAO,CAAC;AAC3C;AAFA,QAAA,EAAA,GAAA;AAIA,SAAgB,SAAe,QAAqC;IAClE,OAAO,CAAC,QAAa,SAAS,OAAO,SAAS;AAChD;AAFA,QAAA,QAAA,GAAA;AAIA,SAAgB,IAAI,QAAa;IAC/B,OAAO;AACT;AAFA,QAAA,GAAA,GAAA"}},
    {"offset": {"line": 37, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 41, "column": 0}, "map": {"version":3,"sources":["turbopack://[project]/node_modules/svix/src/openapi/http/isomorphic-fetch.ts"],"sourcesContent":["import { HttpLibrary, RequestContext, ResponseContext } from './http';\nimport { from, Observable } from '../rxjsStub';\nimport \"svix-fetch\";\n\nconst numRetries = 2;\nconst sleep = (interval: number) => new Promise(resolve => setTimeout(resolve, interval));\n\nexport class IsomorphicFetchHttpLibrary implements HttpLibrary {\n  public send(request: RequestContext): Observable<ResponseContext> {\n    const resultPromise = this.sendWithRetry(request, numRetries, 50, 1);\n    return from<Promise<ResponseContext>>(resultPromise);\n  }\n\n  private async sendWithRetry(request: RequestContext, triesLeft: number, nextInterval: number, retryCount: number): Promise<ResponseContext> {\n    try {\n      const response = await this.sendOnce(request);\n      if (triesLeft <= 0 || response.httpStatusCode < 500) {\n        return response;\n      }\n    } catch (e) {\n      if (triesLeft <= 0) {\n        throw e;\n      }\n    };\n    await sleep(nextInterval);\n    const headers = request.getHeaders();\n    headers['svix-retry-count'] = retryCount.toString()\n    return await this.sendWithRetry(request, --triesLeft, nextInterval * 2, ++retryCount);\n  }\n\n  private sendOnce(request: RequestContext): Promise<ResponseContext> {\n    let method = request.getHttpMethod().toString();\n    let body = request.getBody();\n\n    // Cloudflare Workers fail if the credentials option is used in a fetch call.\n    // This work around that. Source:\n    // https://github.com/cloudflare/workers-sdk/issues/2514#issuecomment-2178070014\n    const isCredentialsSupported = \"credentials\" in Request.prototype;\n\n    return fetch(request.getUrl(), {\n      method: method,\n      body: body as any,\n      headers: request.getHeaders(),\n      credentials: isCredentialsSupported ? \"same-origin\" : undefined\n    }).then((resp: any) => {\n      const headers: { [name: string]: string } = {};\n      resp.headers.forEach((value: string, name: string) => {\n        headers[name] = value;\n      });\n\n      const body = {\n        text: () => resp.text(),\n        binary: () => resp.blob()\n      };\n      return new ResponseContext(resp.status, headers, body);\n    });\n  }\n}\n"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,MAAA;AACA,MAAA;;AAGA,MAAM,aAAa;AACnB,MAAM,QAAQ,CAAC,WAAqB,IAAI,QAAQ,CAAA,UAAW,WAAW,SAAS;AAE/E,MAAa;IACJ,KAAK,OAAuB,EAAA;QACjC,MAAM,gBAAgB,IAAI,CAAC,aAAa,CAAC,SAAS,YAAY,IAAI;QAClE,OAAO,WAAA,IAAI,CAA2B;IACxC;IAEc,cAAc,OAAuB,EAAE,SAAiB,EAAE,YAAoB,EAAE,UAAkB,EAAA;;YAC9G,IAAI;gBACF,MAAM,WAAW,MAAM,IAAI,CAAC,QAAQ,CAAC;gBACrC,IAAI,aAAa,KAAK,SAAS,cAAc,GAAG,KAAK;oBACnD,OAAO;;cAET,OAAO,GAAG;gBACV,IAAI,aAAa,GAAG;oBAClB,MAAM;;;;YAGV,MAAM,MAAM;YACZ,MAAM,UAAU,QAAQ,UAAU;YAClC,OAAO,CAAC,mBAAmB,GAAG,WAAW,QAAQ;YACjD,OAAO,MAAM,IAAI,CAAC,aAAa,CAAC,SAAS,EAAE,WAAW,eAAe,GAAG,EAAE;QAC5E;;IAEQ,SAAS,OAAuB,EAAA;QACtC,IAAI,SAAS,QAAQ,aAAa,GAAG,QAAQ;QAC7C,IAAI,OAAO,QAAQ,OAAO;QAK1B,MAAM,yBAAyB,iBAAiB,QAAQ,SAAS;QAEjE,OAAO,MAAM,QAAQ,MAAM,IAAI;YAC7B,QAAQ;YACR,MAAM;YACN,SAAS,QAAQ,UAAU;YAC3B,aAAa,yBAAyB,gBAAgB;WACrD,IAAI,CAAC,CAAC;YACP,MAAM,UAAsC,CAAA;YAC5C,KAAK,OAAO,CAAC,OAAO,CAAC,CAAC,OAAe;gBACnC,OAAO,CAAC,KAAK,GAAG;YAClB;YAEA,MAAM,OAAO;gBACX,MAAM,IAAM,KAAK,IAAI;gBACrB,QAAQ,IAAM,KAAK,IAAI;;YAEzB,OAAO,IAAI,OAAA,eAAe,CAAC,KAAK,MAAM,EAAE,SAAS;QACnD;IACF;;AAjDF,QAAA,0BAAA,GAAA"}},
    {"offset": {"line": 125, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 129, "column": 0}, "map": {"version":3,"sources":["turbopack://[project]/node_modules/svix/src/openapi/http/http.ts"],"sourcesContent":["// typings of url-parse are incorrect...\n// @ts-ignore\nimport * as URLParse from \"url-parse\";\nimport { Observable, from } from \"../rxjsStub\";\n\nexport * from \"./isomorphic-fetch\";\n\n/**\n * Represents an HTTP method.\n */\nexport enum HttpMethod {\n  GET = \"GET\",\n  HEAD = \"HEAD\",\n  POST = \"POST\",\n  PUT = \"PUT\",\n  DELETE = \"DELETE\",\n  CONNECT = \"CONNECT\",\n  OPTIONS = \"OPTIONS\",\n  TRACE = \"TRACE\",\n  PATCH = \"PATCH\",\n}\n\nfunction qsStringify(queryParams: Record<string, any>) {\n  const res = [];\n  for (let paramName in queryParams)\n    if (queryParams.hasOwnProperty(paramName)) {\n      const value = queryParams[paramName];\n      if (Array.isArray(value)) {\n        for (let i = 0; i < value.length; i++) {\n          res.push(`${encodeURIComponent(paramName)}=${encodeURIComponent(value[i])}`);\n        }\n      } else {\n        res.push(`${encodeURIComponent(paramName)}=${encodeURIComponent(value)}`);\n      }\n    }\n  return res.join(\"&\");\n}\n\n/**\n * Represents an HTTP file which will be transferred from or to a server.\n */\nexport type HttpFile = Blob & { readonly name: string };\n\nexport class HttpException extends Error {\n  public constructor(msg: string) {\n    super(msg);\n  }\n}\n\n/**\n * Represents the body of an outgoing HTTP request.\n */\nexport type RequestBody = undefined | string | FormData;\n\n/**\n * Represents an HTTP request context\n */\nexport class RequestContext {\n  private headers: { [key: string]: string } = {};\n  private body: RequestBody = undefined;\n  private url: URLParse;\n\n  /**\n   * Creates the request context using a http method and request resource url\n   *\n   * @param url url of the requested resource\n   * @param httpMethod http method\n   */\n  public constructor(url: string, private httpMethod: HttpMethod) {\n    this.url = new URLParse(url, true);\n  }\n\n  /*\n   * Returns the url set in the constructor including the query string\n   *\n   */\n  public getUrl(): string {\n    return this.url.toString(qsStringify);\n  }\n\n  /**\n   * Replaces the url set in the constructor with this url.\n   *\n   */\n  public setUrl(url: string) {\n    this.url = new URLParse(url, true);\n  }\n\n  /**\n   * Sets the body of the http request either as a string or FormData\n   *\n   * Note that setting a body on a HTTP GET, HEAD, DELETE, CONNECT or TRACE\n   * request is discouraged.\n   * https://httpwg.org/http-core/draft-ietf-httpbis-semantics-latest.html#rfc.section.7.3.1\n   *\n   * @param body the body of the request\n   */\n  public setBody(body: RequestBody) {\n    this.body = body;\n  }\n\n  public getHttpMethod(): HttpMethod {\n    return this.httpMethod;\n  }\n\n  public getHeaders(): { [key: string]: string } {\n    return this.headers;\n  }\n\n  public getBody(): RequestBody {\n    return this.body;\n  }\n\n  public setQueryParam(name: string, value: string) {\n    let queryObj = this.url.query;\n    queryObj[name] = value;\n    this.url.set(\"query\", queryObj);\n  }\n\n  /**\n   * Sets a cookie with the name and value. NO check  for duplicate cookies is performed\n   *\n   */\n  public addCookie(name: string, value: string): void {\n    if (!this.headers[\"Cookie\"]) {\n      this.headers[\"Cookie\"] = \"\";\n    }\n    this.headers[\"Cookie\"] += name + \"=\" + value + \"; \";\n  }\n\n  public setHeaderParam(key: string, value: string): void {\n    this.headers[key] = value;\n  }\n}\n\nexport interface ResponseBody {\n  text(): Promise<string>;\n  binary(): Promise<Blob>;\n}\n\n/**\n * Helper class to generate a `ResponseBody` from binary data\n */\nexport class SelfDecodingBody implements ResponseBody {\n  constructor(private dataSource: Promise<Blob>) {}\n\n  binary(): Promise<Blob> {\n    return this.dataSource;\n  }\n\n  async text(): Promise<string> {\n    const data: Blob = await this.dataSource;\n    // @ts-ignore\n    if (data.text) {\n      // @ts-ignore\n      return data.text();\n    }\n\n    return new Promise<string>((resolve, reject) => {\n      const reader = new FileReader();\n      reader.addEventListener(\"load\", () => resolve(reader.result as string));\n      reader.addEventListener(\"error\", () => reject(reader.error));\n      reader.readAsText(data);\n    });\n  }\n}\n\nexport class ResponseContext {\n  public constructor(\n    public httpStatusCode: number,\n    public headers: { [key: string]: string },\n    public body: ResponseBody\n  ) {}\n\n  /**\n   * Parse header value in the form `value; param1=\"value1\"`\n   *\n   * E.g. for Content-Type or Content-Disposition\n   * Parameter names are converted to lower case\n   * The first parameter is returned with the key `\"\"`\n   */\n  public getParsedHeader(headerName: string): { [parameter: string]: string } {\n    const result: { [parameter: string]: string } = {};\n    if (!this.headers[headerName]) {\n      return result;\n    }\n\n    const parameters = this.headers[headerName].split(\";\");\n    for (const parameter of parameters) {\n      let [key, value] = parameter.split(\"=\", 2);\n      key = key.toLowerCase().trim();\n      if (value === undefined) {\n        result[\"\"] = key;\n      } else {\n        value = value.trim();\n        if (value.startsWith('\"') && value.endsWith('\"')) {\n          value = value.substring(1, value.length - 1);\n        }\n        result[key] = value;\n      }\n    }\n    return result;\n  }\n\n  public async getBodyAsFile(): Promise<HttpFile> {\n    const data = await this.body.binary();\n    const fileName = this.getParsedHeader(\"content-disposition\")[\"filename\"] || \"\";\n    const contentType = this.headers[\"content-type\"] || \"\";\n    try {\n      return new File([data], fileName, { type: contentType });\n    } catch (error) {\n      /** Fallback for when the File constructor is not available */\n      return Object.assign(data, {\n        name: fileName,\n        type: contentType,\n      });\n    }\n  }\n}\n\nexport interface HttpLibrary {\n  send(request: RequestContext): Observable<ResponseContext>;\n}\n\nexport interface PromiseHttpLibrary {\n  send(request: RequestContext): Promise<ResponseContext>;\n}\n\nexport function wrapHttpLibrary(promiseHttpLibrary: PromiseHttpLibrary): HttpLibrary {\n  return {\n    send(request: RequestContext): Observable<ResponseContext> {\n      return from(promiseHttpLibrary.send(request));\n    },\n  };\n}\n"],"names":[],"mappings":"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"}},
    {"offset": {"line": 331, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 335, "column": 0}, "map": {"version":3,"sources":["turbopack://[project]/node_modules/svix/src/openapi/auth/auth.ts"],"sourcesContent":["// typings for btoa are incorrect\nimport { RequestContext } from \"../http/http\";\n\n/**\n * Interface authentication schemes.\n */\nexport interface SecurityAuthentication {\n    /*\n     * @return returns the name of the security authentication as specified in OAI\n     */\n    getName(): string;\n\n    /**\n     * Applies the authentication scheme to the request context\n     *\n     * @params context the request context which should use this authentication scheme\n     */\n    applySecurityAuthentication(context: RequestContext): void | Promise<void>;\n}\n\nexport interface TokenProvider {\n  getToken(): Promise<string> | string;\n}\n\n/**\n * Applies http authentication to the request context.\n */\nexport class HTTPBearerAuthentication implements SecurityAuthentication {\n    /**\n     * Configures the http authentication with the required details.\n     *\n     * @param tokenProvider service that can provide the up-to-date token when needed\n     */\n    public constructor(private tokenProvider: TokenProvider) {}\n\n    public getName(): string {\n        return \"HTTPBearer\";\n    }\n\n    public async applySecurityAuthentication(context: RequestContext) {\n        context.setHeaderParam(\"Authorization\", \"Bearer \" + await this.tokenProvider.getToken());\n    }\n}\n\n\nexport type AuthMethods = {\n    \"HTTPBearer\"?: SecurityAuthentication\n}\n\nexport type ApiKeyConfiguration = string;\nexport type HttpBasicConfiguration = { \"username\": string, \"password\": string };\nexport type HttpBearerConfiguration = { tokenProvider: TokenProvider };\nexport type OAuth2Configuration = { accessToken: string };\n\nexport type AuthMethodsConfiguration = {\n    \"HTTPBearer\"?: HttpBearerConfiguration\n}\n\n/**\n * Creates the authentication methods from a swagger description.\n *\n */\nexport function configureAuthMethods(config: AuthMethodsConfiguration | undefined): AuthMethods {\n    let authMethods: AuthMethods = {}\n\n    if (!config) {\n        return authMethods;\n    }\n\n    if (config[\"HTTPBearer\"]) {\n        authMethods[\"HTTPBearer\"] = new HTTPBearerAuthentication(\n            config[\"HTTPBearer\"][\"tokenProvider\"]\n        );\n    }\n\n    return authMethods;\n}"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2BA,MAAa;IAMT,YAA2B,aAA4B,CAAA;QAA5B,IAAA,CAAA,aAAa,GAAb;IAA+B;IAEnD,UAAO;QACV,OAAO;IACX;IAEa,4BAA4B,OAAuB,EAAA;;YAC5D,QAAQ,cAAc,CAAC,iBAAiB,YAAS,CAAG,MAAM,IAAI,CAAC,aAAa,CAAC,QAAQ,EAAE;QAC3F;;;AAdJ,QAAA,wBAAA,GAAA;AAmCA,SAAgB,qBAAqB,MAA4C;IAC7E,IAAI,cAA2B,CAAA;IAE/B,IAAI,CAAC,QAAQ;QACT,OAAO;;IAGX,IAAI,MAAM,CAAC,aAAa,EAAE;QACtB,WAAW,CAAC,aAAa,GAAG,IAAI,yBAC5B,MAAM,CAAC,aAAa,CAAC,gBAAgB;;IAI7C,OAAO;AACX;AAdA,QAAA,oBAAA,GAAA"}},
    {"offset": {"line": 392, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 396, "column": 0}, "map": {"version":3,"sources":["turbopack://[project]/node_modules/svix/src/openapi/middleware.ts"],"sourcesContent":["import {RequestContext, ResponseContext} from './http/http';\nimport { Observable, from } from './rxjsStub';\n\n/**\n * Defines the contract for a middleware intercepting requests before\n * they are sent (but after the RequestContext was created)\n * and before the ResponseContext is unwrapped.\n *\n */\nexport interface Middleware {\n    /**\n     * Modifies the request before the request is sent.\n     *\n     * @param context RequestContext of a request which is about to be sent to the server\n     * @returns an observable of the updated request context\n     *\n     */\n    pre(context: RequestContext): Observable<RequestContext>;\n    /**\n     * Modifies the returned response before it is deserialized.\n     *\n     * @param context ResponseContext of a sent request\n     * @returns an observable of the modified response context\n     */\n    post(context: ResponseContext): Observable<ResponseContext>;\n}\n\nexport class PromiseMiddlewareWrapper implements Middleware {\n\n    public constructor(private middleware: PromiseMiddleware) {\n\n    }\n\n    pre(context: RequestContext): Observable<RequestContext> {\n        return from(this.middleware.pre(context));\n    }\n    \n    post(context: ResponseContext): Observable<ResponseContext> {\n        return from(this.middleware.post(context));\n    }\n\n}\n\n/**\n * Defines the contract for a middleware intercepting requests before\n * they are sent (but after the RequestContext was created)\n * and before the ResponseContext is unwrapped.\n *\n */\nexport interface PromiseMiddleware {\n    /**\n     * Modifies the request before the request is sent.\n     *\n     * @param context RequestContext of a request which is about to be sent to the server\n     * @returns an observable of the updated request context\n     *\n     */\n    pre(context: RequestContext): Promise<RequestContext>;\n        /**\n     * Modifies the returned response before it is deserialized.\n     *\n     * @param context ResponseContext of a sent request\n     * @returns an observable of the modified response context\n     */\n    post(context: ResponseContext): Promise<ResponseContext>;\n}\n"],"names":[],"mappings":";;;;;AACA,MAAA;AA0BA,MAAa;IAET,YAA2B,UAA6B,CAAA;QAA7B,IAAA,CAAA,UAAU,GAAV;IAE3B;IAEA,IAAI,OAAuB,EAAA;QACvB,OAAO,WAAA,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,GAAG,CAAC;IACpC;IAEA,KAAK,OAAwB,EAAA;QACzB,OAAO,WAAA,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC;IACrC;;AAZJ,QAAA,wBAAA,GAAA"}},
    {"offset": {"line": 414, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 418, "column": 0}, "map": {"version":3,"sources":["turbopack://[project]/node_modules/svix/src/openapi/servers.ts"],"sourcesContent":["import { RequestContext, HttpMethod } from \"./http/http\";\n\nexport interface BaseServerConfiguration {\n    makeRequestContext(endpoint: string, httpMethod: HttpMethod): RequestContext;\n}\n\n/**\n *\n * Represents the configuration of a server including its\n * url template and variable configuration based on the url.\n *\n */\nexport class ServerConfiguration<T extends { [key: string]: string }> implements BaseServerConfiguration {\n    public constructor(private url: string, private variableConfiguration: T) {}\n\n    /**\n     * Sets the value of the variables of this server.\n     *\n     * @param variableConfiguration a partial variable configuration for the variables contained in the url\n     */\n    public setVariables(variableConfiguration: Partial<T>) {\n        Object.assign(this.variableConfiguration, variableConfiguration);\n    }\n\n    public getConfiguration(): T {\n        return this.variableConfiguration\n    }\n\n    private getUrl() {\n        let replacedUrl = this.url;\n        for (const key in this.variableConfiguration) {\n            var re = new RegExp(\"{\" + key + \"}\",\"g\");\n            replacedUrl = replacedUrl.replace(re, this.variableConfiguration[key]);\n        }\n        return replacedUrl\n    }\n\n    /**\n     * Creates a new request context for this server using the url with variables\n     * replaced with their respective values and the endpoint of the request appended.\n     *\n     * @param endpoint the endpoint to be queried on the server\n     * @param httpMethod httpMethod to be used\n     *\n     */\n    public makeRequestContext(endpoint: string, httpMethod: HttpMethod): RequestContext {\n        return new RequestContext(this.getUrl() + endpoint, httpMethod);\n    }\n}\n\nexport const server1 = new ServerConfiguration<{  }>(\"https://api.eu.svix.com\", {  })\nexport const server2 = new ServerConfiguration<{  }>(\"https://api.us.svix.com\", {  })\n\nexport const servers = [server1, server2];\n"],"names":[],"mappings":";;;;;AAAA,MAAA;AAYA,MAAa;IACT,YAA2B,GAAW,EAAU,qBAAwB,CAAA;QAA7C,IAAA,CAAA,GAAG,GAAH;QAAqB,IAAA,CAAA,qBAAqB,GAArB;IAA2B;IAOpE,aAAa,qBAAiC,EAAA;QACjD,OAAO,MAAM,CAAC,IAAI,CAAC,qBAAqB,EAAE;IAC9C;IAEO,mBAAgB;QACnB,OAAO,IAAI,CAAC,qBAAqB;IACrC;IAEQ,SAAM;QACV,IAAI,cAAc,IAAI,CAAC,GAAG;QAC1B,IAAK,MAAM,OAAO,IAAI,CAAC,qBAAqB,CAAE;YAC1C,IAAI,KAAK,IAAI,OAAO,MAAM,MAAM,KAAI;YACpC,cAAc,YAAY,OAAO,CAAC,IAAI,IAAI,CAAC,qBAAqB,CAAC,IAAI;;QAEzE,OAAO;IACX;IAUO,mBAAmB,QAAgB,EAAE,UAAsB,EAAA;QAC9D,OAAO,IAAI,OAAA,cAAc,CAAC,IAAI,CAAC,MAAM,KAAK,UAAU;IACxD;;AAnCJ,QAAA,mBAAA,GAAA;AAsCa,QAAA,OAAO,GAAG,IAAI,oBAA0B,2BAA2B,CAAA;AACnE,QAAA,OAAO,GAAG,IAAI,oBAA0B,2BAA2B,CAAA;AAEnE,QAAA,OAAO,GAAG;IAAC,QAAA,OAAO;IAAE,QAAA,OAAO;CAAC"}},
    {"offset": {"line": 454, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 458, "column": 0}, "map": {"version":3,"sources":["turbopack://[project]/node_modules/svix/src/openapi/configuration.ts"],"sourcesContent":["import { HttpLibrary } from \"./http/http\";\nimport { Middleware, PromiseMiddleware, PromiseMiddlewareWrapper } from \"./middleware\";\nimport { IsomorphicFetchHttpLibrary as DefaultHttpLibrary } from \"./http/isomorphic-fetch\";\nimport { BaseServerConfiguration, server1 } from \"./servers\";\nimport { configureAuthMethods, AuthMethods, AuthMethodsConfiguration } from \"./auth/auth\";\n\nexport interface Configuration {\n    readonly baseServer: BaseServerConfiguration;\n    readonly httpApi: HttpLibrary;\n    readonly middleware: Middleware[];\n    readonly authMethods: AuthMethods;\n}\n\n\n/**\n * Interface with which a configuration object can be configured.\n */\nexport interface ConfigurationParameters {\n    /**\n     * Default server to use\n     */\n    baseServer?: BaseServerConfiguration;\n    /**\n     * HTTP library to use e.g. IsomorphicFetch\n     */\n    httpApi?: HttpLibrary;\n    /**\n     * The middlewares which will be applied to requests and responses\n     */\n    middleware?: Middleware[];\n    /**\n     * Configures all middlewares using the promise api instead of observables (which Middleware uses)\n     */\n    promiseMiddleware?: PromiseMiddleware[];\n    /**\n     * Configuration for the available authentication methods\n     */\n    authMethods?: AuthMethodsConfiguration\n}\n\n/**\n * Configuration factory function\n *\n * If a property is not included in conf, a default is used:\n *    - baseServer: server1\n *    - httpApi: IsomorphicFetchHttpLibrary\n *    - middleware: []\n *    - promiseMiddleware: []\n *    - authMethods: {}\n *\n * @param conf partial configuration\n */\nexport function createConfiguration(conf: ConfigurationParameters = {}): Configuration {\n    const configuration: Configuration = {\n        baseServer: conf.baseServer !== undefined ? conf.baseServer : server1,\n        httpApi: conf.httpApi || new DefaultHttpLibrary(),\n        middleware: conf.middleware || [],\n        authMethods: configureAuthMethods(conf.authMethods)\n    };\n    if (conf.promiseMiddleware) {\n        conf.promiseMiddleware.forEach(\n            m => configuration.middleware.push(new PromiseMiddlewareWrapper(m))\n        );\n    }\n    return configuration;\n}"],"names":[],"mappings":";;;;;AACA,MAAA;AACA,MAAA;AACA,MAAA;AACA,MAAA;AAgDA,SAAgB,oBAAoB,OAAgC,CAAA,CAAE;IAClE,MAAM,gBAA+B;QACjC,YAAY,KAAK,UAAU,KAAK,YAAY,KAAK,UAAU,GAAG,UAAA,OAAO;QACrE,SAAS,KAAK,OAAO,IAAI,IAAI,mBAAA,0BAAkB;QAC/C,YAAY,KAAK,UAAU,IAAI,EAAE;QACjC,aAAa,OAAA,oBAAoB,CAAC,KAAK,WAAW;;IAEtD,IAAI,KAAK,iBAAiB,EAAE;QACxB,KAAK,iBAAiB,CAAC,OAAO,CAC1B,CAAA,IAAK,cAAc,UAAU,CAAC,IAAI,CAAC,IAAI,aAAA,wBAAwB,CAAC;;IAGxE,OAAO;AACX;AAbA,QAAA,mBAAA,GAAA"}},
    {"offset": {"line": 480, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 484, "column": 0}, "map": {"version":3,"sources":["turbopack://[project]/node_modules/svix/src/openapi/util.ts"],"sourcesContent":["/**\n * Returns if a specific http code is in a given code range\n * where the code range is defined as a combination of digits \n * and \"X\" (the letter X) with a length of 3\n *\n * @param codeRange string with length 3 consisting of digits and \"X\" (the letter X)\n * @param code the http status code to be checked against the code range\n */\nexport function isCodeInRange(codeRange: string, code: number): boolean {\n    // This is how the default value is encoded in OAG\n    if (codeRange === \"0\") {\n        return true;\n    }\n    if (codeRange == code.toString()) {\n        return true;\n    } else {\n        const codeString = code.toString();\n        if (codeString.length != codeRange.length) {\n            return false;\n        }\n        for (let i = 0; i < codeString.length; i++) {\n            if (codeRange.charAt(i) != \"X\" && codeRange.charAt(i) != codeString.charAt(i)) {\n                return false;\n            }\n        }\n        return true;\n    }\n}\n"],"names":[],"mappings":";;;;;AAQA,SAAgB,cAAc,SAAiB,EAAE,IAAY;IAEzD,IAAI,cAAc,KAAK;QACnB,OAAO;;IAEX,IAAI,aAAa,KAAK,QAAQ,IAAI;QAC9B,OAAO;WACJ;QACH,MAAM,aAAa,KAAK,QAAQ;QAChC,IAAI,WAAW,MAAM,IAAI,UAAU,MAAM,EAAE;YACvC,OAAO;;QAEX,IAAK,IAAI,IAAI,GAAG,IAAI,WAAW,MAAM,EAAE,IAAK;YACxC,IAAI,UAAU,MAAM,CAAC,MAAM,OAAO,UAAU,MAAM,CAAC,MAAM,WAAW,MAAM,CAAC,IAAI;gBAC3E,OAAO;;;QAGf,OAAO;;AAEf;AAnBA,QAAA,aAAA,GAAA"}},
    {"offset": {"line": 509, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 513, "column": 0}, "map": {"version":3,"sources":["turbopack://[project]/node_modules/svix/src/openapi/index.ts"],"sourcesContent":["export * from \"./http/http\";\nexport * from \"./auth/auth\";\nexport * from \"./models/all\";\nexport { createConfiguration } from \"./configuration\"\nexport { Configuration } from \"./configuration\"\nexport * from \"./apis/exception\";\nexport * from \"./servers\";\n\nexport { PromiseMiddleware as Middleware } from './middleware';\nexport { ApplicationApiGetAppUsageStatsApiV1AppStatsUsageGetRequest, ApplicationApiV1ApplicationCreateRequest, ApplicationApiV1ApplicationDeleteRequest, ApplicationApiV1ApplicationGetRequest, ApplicationApiV1ApplicationGetStatsRequest, ApplicationApiV1ApplicationListRequest, ApplicationApiV1ApplicationPatchRequest, ApplicationApiV1ApplicationUpdateRequest, ObjectApplicationApi as ApplicationApi,  AuthenticationApiV1AuthenticationAppPortalAccessRequest, AuthenticationApiV1AuthenticationCreateMessageTokenRequest, AuthenticationApiV1AuthenticationDashboardAccessRequest, AuthenticationApiV1AuthenticationExchangeOneTimeTokenRequest, AuthenticationApiV1AuthenticationExpireAllRequest, AuthenticationApiV1AuthenticationLogoutRequest, ObjectAuthenticationApi as AuthenticationApi,  BackgroundTasksApiGetBackgroundTaskRequest, BackgroundTasksApiListBackgroundTasksRequest, ObjectBackgroundTasksApi as BackgroundTasksApi,  BroadcastApiCreateBroadcastMessageRequest, ObjectBroadcastApi as BroadcastApi,  EndpointApiV1EndpointCreateRequest, EndpointApiV1EndpointDeleteRequest, EndpointApiV1EndpointDeleteMtlsConfigRequest, EndpointApiV1EndpointDeleteOauthConfigRequest, EndpointApiV1EndpointGetRequest, EndpointApiV1EndpointGetHeadersRequest, EndpointApiV1EndpointGetSecretRequest, EndpointApiV1EndpointGetStatsRequest, EndpointApiV1EndpointListRequest, EndpointApiV1EndpointPatchRequest, EndpointApiV1EndpointPatchHeadersRequest, EndpointApiV1EndpointRecoverRequest, EndpointApiV1EndpointReplayRequest, EndpointApiV1EndpointRotateSecretRequest, EndpointApiV1EndpointSendExampleRequest, EndpointApiV1EndpointTransformationGetRequest, EndpointApiV1EndpointTransformationPartialUpdateRequest, EndpointApiV1EndpointTransformationSimulateRequest, EndpointApiV1EndpointUpdateRequest, EndpointApiV1EndpointUpdateHeadersRequest, EndpointApiV1EndpointUpdateMtlsConfigRequest, EndpointApiV1EndpointUpdateOauthConfigRequest, EndpointApiV1SinkCreateRequest, EndpointApiV1SinkGetRequest, EndpointApiV1SinkListRequest, ObjectEndpointApi as EndpointApi,  EnvironmentApiV1EnvironmentExportRequest, EnvironmentApiV1EnvironmentExportGetRequest, EnvironmentApiV1EnvironmentImportRequest, ObjectEnvironmentApi as EnvironmentApi,  EnvironmentSettingsApiV1EnvironmentGetSettingsRequest, ObjectEnvironmentSettingsApi as EnvironmentSettingsApi,  EventTypeApiV1EventTypeCreateRequest, EventTypeApiV1EventTypeDeleteRequest, EventTypeApiV1EventTypeExportOpenapiRequest, EventTypeApiV1EventTypeGenerateExampleRequest, EventTypeApiV1EventTypeGetRequest, EventTypeApiV1EventTypeGetRetryScheduleRequest, EventTypeApiV1EventTypeImportOpenapiRequest, EventTypeApiV1EventTypeListRequest, EventTypeApiV1EventTypePatchRequest, EventTypeApiV1EventTypeUpdateRequest, EventTypeApiV1EventTypeUpdateRetryScheduleRequest, ObjectEventTypeApi as EventTypeApi,  EventsApiV1EventsRequest, ObjectEventsApi as EventsApi,  HealthApiV1HealthGetRequest, ObjectHealthApi as HealthApi,  InboundApiV1InboundMsgRequest, InboundApiV1InboundRotateUrlRequest, ObjectInboundApi as InboundApi,  IntegrationApiV1IntegrationCreateRequest, IntegrationApiV1IntegrationDeleteRequest, IntegrationApiV1IntegrationGetRequest, IntegrationApiV1IntegrationGetKeyRequest, IntegrationApiV1IntegrationListRequest, IntegrationApiV1IntegrationRotateKeyRequest, IntegrationApiV1IntegrationUpdateRequest, ObjectIntegrationApi as IntegrationApi,  MessageApiCreateMessageAttemptForEndpointRequest, MessageApiV1MessageCreateRequest, MessageApiV1MessageEventsRequest, MessageApiV1MessageEventsSubscriptionRequest, MessageApiV1MessageEventsSubscriptionCreateTokenRequest, MessageApiV1MessageExpungeContentRequest, MessageApiV1MessageGetRequest, MessageApiV1MessageGetRawPayloadRequest, MessageApiV1MessageListRequest, ObjectMessageApi as MessageApi,  MessageAttemptApiV1MessageAttemptExpungeContentRequest, MessageAttemptApiV1MessageAttemptGetRequest, MessageAttemptApiV1MessageAttemptGetHeadersRequest, MessageAttemptApiV1MessageAttemptListAttemptedDestinationsRequest, MessageAttemptApiV1MessageAttemptListAttemptedMessagesRequest, MessageAttemptApiV1MessageAttemptListByEndpointRequest, MessageAttemptApiV1MessageAttemptListByEndpointDeprecatedRequest, MessageAttemptApiV1MessageAttemptListByMsgRequest, MessageAttemptApiV1MessageAttemptListByMsgDeprecatedRequest, MessageAttemptApiV1MessageAttemptResendRequest, ObjectMessageAttemptApi as MessageAttemptApi,  SinkApiV1StreamCreateEventsRequest, SinkApiV1StreamEventsGetRequest, ObjectSinkApi as SinkApi,  StatisticsApiV1StatisticsAggregateAppStatsRequest, StatisticsApiV1StatisticsAggregateEventTypesRequest, StatisticsApiV1StatsAppAttemptsRequest, StatisticsApiV1StatsEndpointAttemptsRequest, ObjectStatisticsApi as StatisticsApi,  StreamApiV1StreamCreateRequest, StreamApiV1StreamDeleteRequest, StreamApiV1StreamGetRequest, StreamApiV1StreamListRequest, StreamApiV1StreamPatchRequest, StreamApiV1StreamUpdateRequest, ObjectStreamApi as StreamApi,  TransformationTemplateApiV1EndpointUpdateHubspotOauthConfigRequest, TransformationTemplateApiV1TransformationTemplateCreateRequest, TransformationTemplateApiV1TransformationTemplateDeleteRequest, TransformationTemplateApiV1TransformationTemplateGenerateRequest, TransformationTemplateApiV1TransformationTemplateGetRequest, TransformationTemplateApiV1TransformationTemplateListRequest, TransformationTemplateApiV1TransformationTemplateOauthDiscordRequest, TransformationTemplateApiV1TransformationTemplateOauthHubspotRequest, TransformationTemplateApiV1TransformationTemplateOauthSlackRequest, TransformationTemplateApiV1TransformationTemplatePatchRequest, TransformationTemplateApiV1TransformationTemplateSimulateRequest, TransformationTemplateApiV1TransformationTemplateUpdateRequest, ObjectTransformationTemplateApi as TransformationTemplateApi } from './types/ObjectParamAPI';\n\n"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;AAAA,sHAAA;AACA,sHAAA;AACA,uHAAA;AACA,IAAA;AAAS,OAAA,cAAA,CAAA,SAAA,uBAAA;IAAA,YAAA;IAAA,KAAA;QAAA,OAAA,gBAAA,mBAAmB;IAAA;AAAA;AAE5B,2HAAA;AACA,oHAAA;AAGA,IAAA;AAAuW,OAAA,cAAA,CAAA,SAAA,kBAAA;IAAA,YAAA;IAAA,KAAA;QAAA,OAAA,iBAAA,oBAAoB;IAAA;AAAA;AAAoW,OAAA,cAAA,CAAA,SAAA,qBAAA;IAAA,YAAA;IAAA,KAAA;QAAA,OAAA,iBAAA,uBAAuB;IAAA;AAAA;AAAkH,OAAA,cAAA,CAAA,SAAA,sBAAA;IAAA,YAAA;IAAA,KAAA;QAAA,OAAA,iBAAA,wBAAwB;IAAA;AAAA;AAAoE,OAAA,cAAA,CAAA,SAAA,gBAAA;IAAA,YAAA;IAAA,KAAA;QAAA,OAAA,iBAAA,kBAAkB;IAAA;AAAA;AAA4/B,OAAA,cAAA,CAAA,SAAA,eAAA;IAAA,YAAA;IAAA,KAAA;QAAA,OAAA,iBAAA,iBAAiB;IAAA;AAAA;AAAmJ,OAAA,cAAA,CAAA,SAAA,kBAAA;IAAA,YAAA;IAAA,KAAA;QAAA,OAAA,iBAAA,oBAAoB;IAAA;AAAA;AAA4E,OAAA,cAAA,CAAA,SAAA,0BAAA;IAAA,YAAA;IAAA,KAAA;QAAA,OAAA,iBAAA,4BAA4B;IAAA;AAAA;AAAue,OAAA,cAAA,CAAA,SAAA,gBAAA;IAAA,YAAA;IAAA,KAAA;QAAA,OAAA,iBAAA,kBAAkB;IAAA;AAAA;AAA6C,OAAA,cAAA,CAAA,SAAA,aAAA;IAAA,YAAA;IAAA,KAAA;QAAA,OAAA,iBAAA,eAAe;IAAA;AAAA;AAA6C,OAAA,cAAA,CAAA,SAAA,aAAA;IAAA,YAAA;IAAA,KAAA;QAAA,OAAA,iBAAA,eAAe;IAAA;AAAA;AAAoF,OAAA,cAAA,CAAA,SAAA,cAAA;IAAA,YAAA;IAAA,KAAA;QAAA,OAAA,iBAAA,gBAAgB;IAAA;AAAA;AAAqT,OAAA,cAAA,CAAA,SAAA,kBAAA;IAAA,YAAA;IAAA,KAAA;QAAA,OAAA,iBAAA,oBAAoB;IAAA;AAAA;AAAoY,OAAA,cAAA,CAAA,SAAA,cAAA;IAAA,YAAA;IAAA,KAAA;QAAA,OAAA,iBAAA,gBAAgB;IAAA;AAAA;AAAskB,OAAA,cAAA,CAAA,SAAA,qBAAA;IAAA,YAAA;IAAA,KAAA;QAAA,OAAA,iBAAA,uBAAuB;IAAA;AAAA;AAA6F,OAAA,cAAA,CAAA,SAAA,WAAA;IAAA,YAAA;IAAA,KAAA;QAAA,OAAA,iBAAA,aAAa;IAAA;AAAA;AAA2M,OAAA,cAAA,CAAA,SAAA,iBAAA;IAAA,YAAA;IAAA,KAAA;QAAA,OAAA,iBAAA,mBAAmB;IAAA;AAAA;AAA8M,OAAA,cAAA,CAAA,SAAA,aAAA;IAAA,YAAA;IAAA,KAAA;QAAA,OAAA,iBAAA,eAAe;IAAA;AAAA;AAAkyB,OAAA,cAAA,CAAA,SAAA,6BAAA;IAAA,YAAA;IAAA,KAAA;QAAA,OAAA,iBAAA,+BAA+B;IAAA;AAAA"}},
    {"offset": {"line": 653, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}